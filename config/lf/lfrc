set icons true
set hidden true
set drawbox true
set preview true
set info size
set dircounts on
set timefmt " Jan _2 2006 15:04:05"
set tabstop 4
set period 1
set promptfmt ""
set errorfmt "\033[38;5;1m error: \033[0m%s"
set shell 'sh'
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set previewer ~/.config/lf/scripts/lf_previewer
set cleaner ~/.config/lf/scripts/lf_cleaner

%{{
    touch /tmp/lfundo_$id
    lf_update . $id
    lf -remote "send $id recol"
}}

cmd recol &{{
    term_pid="$(lf_getpid $id)"
    w=$(awesome-client "return get_lfterm_width($term_pid)" | awk '{print $2}')
    if [ $w -le 1000 ]
    then
        lf -remote "send $id set ratios 2:3"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}

cmd my_open %{{
    case $(file --mime-type $f -b 2> /dev/null) in
        text/* | inode/x-empty)
            if [ "${f##*.}" == "org" ]
            then
                emacsclient -c -a emacs $f
            else
                lf -remote "send $id push e"
            fi
            ;;
        inode/directory)
            fix_f="$(lf_file_fix $f)"
            lf -remote "send $id my_cd $fix_f" ;;
        inode/symlink)
            if [ -d "$f" ]
            then
                fix_f="$(lf_file_fix $f)"
                lf -remote "send $id my_cd $fix_f"
            else
                lf -remote "send $id push e"
            fi
            ;;
        application/pdf | image/vnd.djvu)
            evince $f ;;
        image/*)
            eog $f ;;
        font/sfnt)
            font-manager $f ;;
        *)
            for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done ;;
    esac
}}

cmd my_cd &{{
    FILE="/tmp/lfundo_$id"
    lf_prepare_file $FILE

    sed -i "1s|^|$PWD\n|" $FILE
    sed -i "1s|^|cd\n|" $FILE

    fix_f="$(lf_file_fix $1)"
    eval zoxide add $fix_f
    lf -remote "send $id cd $fix_f"
    lf_update $1 $id
}}

cmd my_updir %{{
    FILE="/tmp/lfundo_$id"
    lf_prepare_file $FILE

    sed -i "1s|^|$PWD\n|" $FILE
    sed -i "1s|^|cd\n|" $FILE

    lf -remote "send $id updir"
    lf_update "$(dirname $PWD)" $id
}}

cmd mkdir &{{
    dir_name=$(input "Dir name")
    while [ -e $dir_name ] && [ "$dir_name" != "" ]
    do
        errormsg "directory exists"
        dir_name=$(input "Dir name")
    done

    if [ "$dir_name" != "" ]
    then
        mkdir $dir_name
        lf -remote "send $id load"
    fi
}}

cmd mkfile &{{
    file_name=$(input "File name")
    while [ -e $file_name ] && [ "$file_name" != "" ]
    do
        errormsg "file exists"
        file_name=$(input "File name")
    done

    if [ "$file_name" != "" ]
    then
        touch $file_name
        lf -remote "send $id load"
    fi
}}

cmd my_rename &{{
    FILE="/tmp/lfundo_$id"
    lf_prepare_file $FILE

    echo "${f##*/}" | xclip -selection clipboard

    new_name=$(input "New name")
    while [ -e $new_name ] && [ "$new_name" != "" ]
    do
        errormsg "file exists"
        new_name=$(input "New name")
    done

    if [ "$new_name" != "" ]
    then
        mv $f $new_name
        sed -i "1s|^|$f\n|" $FILE
        sed -i "1s|^|$(dirname $f)/$new_name\n|" $FILE
        sed -i "1s|^|name_restore\n|" $FILE
        lf -remote "send $id load"
    fi
}}

cmd my_paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    has_dir=0
    output=$(timeout 0.2 du -acb "$@" || echo "toobig")
    total_size=$(echo "$output" | tail -n 1 | awk '{print $1}')
    total_files=$(echo "$output" | wc -l)

    # If the files are on different devices must use vcp to copy
    current_device=$(df --output='source' . | sed '1d')
    for file in "$@"
    do
        file_device=$(df --output='source' $file | sed '1d')
        if [ "$file_device" != "$current_device" ]
        then
            total_size="toobig"
            break;
        fi
    done

    if [[ "$total_size" = "toobig" ]] ||
       [[ $total_size -ge 314572800 ]] ||
       [[ $total_files -ge 2500 && $total_size -ge 52428800 ]]
    then
        term_pid=$(lf_getpid $id)
        for file in "$@"
        do
            # Some file names require additional processing
            # Example: 'test (name)' -> 'test\\\ \\\(name\\\)'
            files+=" $(echo $file | sed 's/\ /\\\\ /g' | sed 's/(/\\\\(/g' | sed 's/)/\\\\)/g')"
        done
        awesome-client "create_lf_terminal(\"cd $PWD;\
                                             vcp -cRH $files .;\
                                             [ \\\"$mode\\\" = \\\"move\\\" ] && rm -rf $files;\
                                             lf -remote \\\"send reload\\\"\",\
                                             800, 400, false, $term_pid)"
    else
        for file in "$@"
        do
            [ -d "$file" ] && has_dir=1
            name=$(basename $file)
            while [ -e ./$name ]
            do
                name=$name"_"
            done
            cp -r $file ./$name
        done
        if [ "$mode" = "move" ]
        then
            rm -rf "$@"
        fi
        lf -remote "send load"
    fi

    rm ~/.local/share/lf/files
    lf -remote "send clear"
    [[ $has_dir -eq 1 ]] && lf -remote "send reload"
}}

cmd undo &{{
    FILE="/tmp/lfundo_$id"
    command="$(head -n 1 $FILE)"
    sed -i '1d' $FILE

    if [ "$command" = "trash_restore" ]
    then
        rip --graveyard $TPATH -u
        while read line;
        do
            [[ -z "$line" ]] && break
            rip --graveyard $TPATH -u
            sed -i '1d' $FILE
        done < $FILE
    elif [ "$command" = "name_restore" ]
    then
        mv $(head -n 2 $FILE)
        sed -i '2d' $FILE
    elif [ "$command" = "cd" ]
    then
        lf -remote "send $id cd $(head -n 1 $FILE)"
        sed -i '1d' $FILE
    fi

    sed -i '1d' $FILE
    lf -remote "send $id load"
}}

cmd chmod &{{
    for file in $fx
    do
        chmod $1 $file
    done
    lf -remote "send $id reload"
}}

cmd trash &{{
    FILE="/tmp/lfundo_$id"
    lf_prepare_file $FILE

    for file in $fx
    do
        rip --graveyard $TPATH $file
        sed -i "1s|^|trash_restore\n|" $FILE
    done

    lf -remote "send $id load"
}}

cmd trash_restore &{{
    tmp_file=$(mktemp)
    term_pid=$(lf_getpid $id)
    lines="$(cat $TPATH/.record)"
    res=""

    for line in $lines
    do
        file=$(echo "$line" | awk 'BEGIN{FS="\t"} {print $3}' | sed "s|$TPATH||g")
        res="$res$file\n"
    done
    awesome-client "create_lf_terminal(\"lf_trash_restore \\\"$res\\\" $tmp_file\",\
                                       800, 400, false, $term_pid)"
    while ! [ -s $tmp_file ]; do sleep 0.1; done

    path=$(cat $tmp_file)
    if [ "$path" != "cancel" ]
    then
        rip --graveyard $TPATH -u "$TPATH$path"
        lf -remote "send load"
    fi
}}

cmd trash_empty ${{
    rm -rf $TPATH/*
    echo -n "" > $TPATH/.record
    lf -remote "send load"
}}

cmd fzf_jump ${{
    path="$(find -L . \( -path '*/\*' -o -fstype 'dev' -o -fstype 'proc' \) -prune \
        -o -print 2> /dev/null | sed 1d | cut -b3- | fzf --reverse +m -e --preview='ls -1A {}')"
    if [ "$path" != "" ]
    then
        if [ -d "$path" ]
        then
            lf -remote "send $id my_cd $path"
        else
            lf -remote "send $id select $path"
        fi
    fi
}}

cmd fzf_jump_prev &{{
    tmp_file=$(mktemp)
    awesome-client "create_lf_terminal(\"lf_jump_prev $tmp_file\", 1100, 600, true, nil)"
    while ! [ -s $tmp_file ]; do sleep 0.1; done
    path="$(cat $tmp_file | sed 's/\ /\\\ /g')"
    [ "$path" != "cancel" ] && lf -remote "send $id my_cd $path"
}}

cmd my_search %{{
    path=$(filesearch $PWD)
    if [ -d $path ] && [ "$(cd $path 2>&1)" == "" ]
    then
        lf -remote "send $id my_cd $path"
    else
        lf -remote "send $id select $path"
    fi
}}

cmd goto_config %{{
    path=$(filesearch ~/.config)
    if [ -d $path ]
    then
        lf -remote "send $id my_cd $path"
    else
        lf -remote "send $id select $path"
    fi
}}

cmd git_clone &{{
    link=$(longinput "Link")
    term_pid=$(lf_getpid $id)
    if [ "$link" != "" ]
    then
        awesome-client "create_lf_terminal(\"cd $PWD;\
                                             git clone $link;\
                                             printf \\\"%s \\\" \\\"Press enter to continue\\\";\
                                             read ans\",\
                                             900, 210, false, $term_pid)"
    fi
}}

cmd new_lf &{{
    alacritty -e lfrun &
}}

cmd chng_layout %{{
    xkb-switch -s us
    lf -remote "send $id push $1"
}}

cmd my_quit ${{
    rm /tmp/lfundo_$id
    lf -remote "send $id quit"
}}

cmd select_for_emacs ${{
    rm /tmp/lfundo_$id
    if [ "$f" = "" ]
    then
        echo -n "cancel" > ~/.cache/emacs/path
    else
        echo -n $f > ~/.cache/emacs/path
    fi
    lf -remote "send $id quit"
}}

cmd open_for_emacs %{{
    case $(file --mime-type $f -b 2> /dev/null) in
        inode/directory)
            fix_f="$(lf_file_fix $f)"
            lf -remote "send $id my_cd $fix_f" ;;
        inode/symlink)
            if [ -d "$f" ]
            then
                fix_f="$(lf_file_fix $f)"
                lf -remote "send $id my_cd $fix_f"
            else
                lf -remote "send $id select_for_emacs"
            fi
            ;;
        *)
            lf -remote "send $id select_for_emacs" ;;
    esac
}}

cmd quit_for_emacs ${{
    rm /tmp/lfundo_$id
    echo -n "cancel" > ~/.cache/emacs/path
    lf -remote "send $id quit"
}}

# Remove some defaults
map m
map c
map d
map t
map f
map x
map n

# basic
map q my_quit
map l my_open
map h my_updir
map r recol
map / my_search
map J low
map K high

# select/unselect everything
map a glob-select *
map <esc> :clear; unselect

# see hidden files
map . :set hidden!

# movement
map gh my_cd ~
map gc goto_config
map gp my_cd ~/Pictures
map gD my_cd ~/Documents
map gd my_cd ~/Downloads
map g/ my_cd /
map gt my_cd /tmp
map ge my_cd /etc
map gm my_cd /run/media
map gM my_cd /mnt
map gu my_cd /usr
map gv my_cd /var

# chmod
map +x chmod +x
map +w chmod +w
map +r chmod +r
map -x chmod -x
map -w chmod -w
map -r chmod -r

# file operations
map md mkdir
map mf mkfile
map cw my_rename
map p my_paste
map s cut
map dd trash
map u undo
map tr trash_restore
map te trash_empty
map i git_clone

# execute current file (must be executable)
map x !$f
map X $$f

# find files
map fd fzf_jump_prev
map cd fzf_jump
map fg :cd /; fzf_jump

# New lf window
map nw new_lf

# Automatic switchover of the Russian layout
map а chng_layout f
map б chng_layout ,
map в chng_layout d
map г chng_layout u
map д chng_layout l
map е chng_layout t
map ё chng_layout `
map ж chng_layout ;
map з chng_layout p
map и chng_layout b
map й chng_layout q
map к chng_layout r
map л chng_layout k
map м chng_layout v
map н chng_layout y
map о chng_layout j
map п chng_layout g
map р chng_layout h
map с chng_layout c
map т chng_layout n
map у chng_layout e
map ф chng_layout a
map х chng_layout x
map ц chng_layout w
map ч chng_layout x
map ш chng_layout i
map щ chng_layout o
map ъ chng_layout ]
map ы chng_layout s
map ь chng_layout m
map э chng_layout '
map ю chng_layout .
map я chng_layout m
