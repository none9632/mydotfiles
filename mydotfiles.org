# -*- eval: (my/org-config-mode) -*-

#+TITILE: My dotfiles
#+STARTUP: fold

* Gitignore

#+begin_src text :tangle ./.gitignore

  .config/nvim/bundle
  .config/zsh/.zcompdump
  .config/zsh/plugins
  bin/bar/cpu
  bin/bar/ram

#+end_src

* Install script
:PROPERTIES:
:header-args: :tangle ./install.sh :tangle-mode (identity #o755)
:END:

** Header

#+begin_src sh

  #!/bin/sh

#+end_src

** Variables

#+begin_src sh

  dot_dir=$(pwd)               # dotfiles directory
  bin_dir=~/.local/bin         # bin files directory
  old_dots_dir=~/.dotfiles.old # old dotfiles backup directory

  # list of the build packages
  build_pkgs="base-devel git gcc make cmake"
  # list of packages that will be installed
  pkgs="alacritty neofetch rofi flameshot lf-bin scrot xdotool picom zoxide brightnessctl alsa-utils dunst evince font-manager fzf rm-improved"

  # list of files/folders to symlink in homedir
  config_files="alacritty awesome dunst flameshot lf neofetch nvim rofi zsh picom"

  bin_files="inkscape-figures update list in pin re"
  bar_c_files="cpu ram"
  bar_bin_files="$bar_c_files updates"

#+end_src

** Functions

#+begin_src sh

  function help
  {
      echo -e "\
  Usage: install.sh [COMMAND]\n\
  \n\
  By default installs all.
  \n\
  Commands:\n\
  all         Install all.\n\
  bin         Install binary files only.\n\
  config      Install config files only.\n\
  font        Install font only.\n\
  packages    Install only the necessary packages.\n\
  help        Show this message and exit."
      exit 0
  }

  function install_all ()
  {
      install_pkgs
      install_config
      install_font
      install_bin
  }

  function install_bin ()
  {
      for file in $bin_files
      do
          [ -e $bin_dir/$file ] && mv ~/.local/bin/$file $old_dots_dir/.local/bin
          echo "Creating symlink to $file in $bin_dir"
          ln -s $dot_dir/bin/$file $bin_dir/$file
      done

      for file in $bar_c_files
      do
          echo "Compilation $file file"
          gcc -Wall -O3 $dot_dir/bin/bar/$file.c -o $dot_dir/bin/bar/$file
      done
      for file in $bar_bin_files
      do
          [ -e $bin_dir/$file ] && mv $bin_dir/$file $old_dots_dir/.local/bin
          echo "Creating symlink to $file in $bin_dir"
          ln -s $dot_dir/bin/bar/$file $bin_dir/$file
      done
  }

  function install_config ()
  {
      # move any existing dotfiles in homedir to directory, then create symlinks
      for file in $config_files
      do
          [ -d ~/.config/$file ] && mv ~/.config/$file $old_dots_dir/.config
          echo "Creating symlink to $file in home directory."
          ln -s $dot_dir/.config/$file ~/.config/$file
      done

      [ -f ~/.bash_profile ] && mv ~/.bash_profile $old_dots_dir
      echo "Creating symlink to .bash_profile"
      ln -s $dot_dir/.bash_profile ~/.bash_profile
  }

  function install_font ()
  {
      font_path=~/.local/share/fonts
      font_file=MyFont.ttf

      [ -f $font_path/$font_file ] && mv $font_path/$font_file $old_dots_dir/.local/share/fonts
      echo "Font installation"
      cp $dot_dir/font/$font_file $font_path
  }

  function install_pkgs ()
  {
      if [[ ! "$EUID" = 0 ]]; then
          sudo ls /root
      fi

      # install the necessary build packages
      sudo pacman --noconfirm --needed -Sy $build_pkgs

      # install yay
      if [[ ! -f $(which yay) ]]
      then
          cd $(mktemp -d)
          git clone https://aur.archlinux.org/yay.git
          cd yay
          makepkg --noconfirm -scri
      fi

      # install the necessary packages
      yay --noconfirm --needed -S $pkgs

      if [[ ! -f $(which vcp) ]]
      then
          cd $(mktemp -d)
          git clone https://github.com/none9632/VCP
          cd VCP
          make
          sudo make install
      fi
  }

#+end_src

** The actual script

#+begin_src sh

  # create dotfiles_old in homedir
  [ -d $old_dots_dir ] && rm -rf $old_dots_dir
  echo "Creating $old_dots_dir for backup of any existing config files"
  mkdir -p $old_dots_dir
  mkdir -p $old_dots_dir/.config
  mkdir -p $old_dots_dir/.local/bin
  mkdir -p $old_dots_dir/.local/share/fonts

  case "$1" in
      ""|all)   install_all    ;;
      bin)      install_bin    ;;
      config)   install_config ;;
      font)     install_font   ;;
      packages) install_pkgs   ;;
      help|*)   help           ;;
  esac

#+end_src

* My scripts
** inkscape-figures
:PROPERTIES:
:header-args: :tangle ./bin/inkscape-figures :tangle-mode (identity #o755)
:END:

*** Header

#+begin_src sh

  #!/bin/sh

#+end_src

*** Variables

#+begin_src sh

  figures_path=./figures/
  images_path=./images/
  template_svg="\
  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
  <!-- Created with Inkscape (http://www.inkscape.org/) -->\n\
  \n\
  <svg\n\
     xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\
     xmlns:cc=\"http://creativecommons.org/ns#\"\n\
     xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n\
     xmlns:svg=\"http://www.w3.org/2000/svg\"\n\
     xmlns=\"http://www.w3.org/2000/svg\"\n\
     xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n\
     xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n\
     width=\"240mm\"\n\
     height=\"120mm\"\n\
     viewBox=\"0 0 240 120\"\n\
     version=\"1.1\"\n\
     id=\"svg8\"\n\
     inkscape:version=\"0.92.4 (unknown)\"\n\
     sodipodi:docname=\"figure.svg\">\n\
    <defs\n\
       id=\"defs2\" />\n\
    <sodipodi:namedview\n\
       id=\"base\"\n\
       pagecolor=\"#ffffff\"\n\
       bordercolor=\"#666666\"\n\
       borderopacity=\"1.0\"\n\
       inkscape:pageopacity=\"0.0\"\n\
       inkscape:pageshadow=\"2\"\n\
       inkscape:zoom=\"0.99437388\"\n\
       inkscape:cx=\"284.27627\"\n\
       inkscape:cy=\"182.72055\"\n\
       inkscape:document-units=\"mm\"\n\
       inkscape:current-layer=\"layer1\"\n\
       showgrid=\"false\"\n\
       showborder=\"true\"\n\
       width=\"200mm\"\n\
       showguides=\"true\"\n\
       inkscape:guide-bbox=\"true\"\n\
       inkscape:window-width=\"2520\"\n\
       inkscape:window-height=\"995\"\n\
       inkscape:window-x=\"20\"\n\
       inkscape:window-y=\"65\"\n\
       inkscape:window-maximized=\"1\">\n\
      <inkscape:grid\n\
         type=\"xygrid\"\n\
         id=\"grid815\"\n\
         units=\"mm\"\n\
         spacingx=\"10\"\n\
         spacingy=\"10\"\n\
         empspacing=\"4\"\n\
         dotted=\"false\" />\n\
    </sodipodi:namedview>\n\
    <metadata\n\
       id=\"metadata5\">\n\
      <rdf:RDF>\n\
        <cc:Work\n\
           rdf:about=\"\">\n\
          <dc:format>image/svg+xml</dc:format>\n\
          <dc:type\n\
             rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n\
          <dc:title />\n\
        </cc:Work>\n\
      </rdf:RDF>\n\
    </metadata>\n\
    <g\n\
       inkscape:label=\"Layer 1\"\n\
       inkscape:groupmode=\"layer\"\n\
       id=\"layer1\"\n\
       transform=\"translate(0,-177)\" />\n\
  </svg>"

#+end_src

*** Functions

#+begin_src sh

  function help
  {
      echo -e "\
  Usage: inkscape-images [OPTIONS] COMMAND [ARGS]...\n\
  \n\
  Options:\n\
  -h, --help             Show this message and exit.\n\
  -d, --dir <directory>  Change images directory. Default ./images/.\n\
  \n\
  Commands:\n\
  create       Creates a image.\n\
  edit <path>  Edits a image."
      exit 0
  }

  function create
  {
      [ ! -d $figures_path ] && mkdir -p $figures_path
      if [ ! -d $figures_path ]
      then
          errormsg "Can't create figures path"
          echo ""
          return
      fi

      title="$(input "Figure name")"
      fig_file_path=$figures_path$(echo "${title/ /-}.svg")
      while [ "$title" != "" ] && [ -f $fig_file_path ]
      do
          errormsg "file exists"
          title="$(input "Figure name")"
          fig_file_path=$figures_path$(echo "${title/ /-}.svg")
      done

      [ "$title" = "" ] && return

      touch $fig_file_path
      if [ ! -f $fig_file_path ]
      then
          errormsg "Can't create figure file"
          echo ""
          return
      fi

      echo -e $template_svg > $fig_file_path
      inkscape $fig_file_path
      echo -n $fig_file_path
  }

  function move
  {
      [ ! -d $images_path ] && mkdir -p $images_path
      if [ ! -d $images_path ] || [ ! -f $1 ]
      then
          errormsg "Can't create images path"
          echo -n ""
          return
      fi

      new_filename=$(md5sum -b $1 | awk '{print $1}')
      old_filename=$(basename "$1")
      extension="${old_filename##*.}"
      img_file_path=$images_path$(echo "$new_filename.$extension")

      mv $1 $img_file_path
      if [ ! -f $img_file_path ]
      then
          errormsg "Can't create image file"
          echo -n ""
          return
      fi

      echo -n $img_file_path
  }

  function edit
  {
      if [ ! -f $1 ]
      then
          errormsg "file does not exist"
          return
      fi
      inkscape $1
  }

#+end_src

*** The actual script

#+begin_src sh

  while [ -n "$1" ]
  do
      case "$1" in
          -d|--dir)
              figures_path="$2"
              shift ;;
          -h|--help)
              help ;;
          ,*)
              break ;;
      esac
      shift
  done

  case "$1" in
      create) create    ;;
      move)   move "$2" ;;
      edit)   edit "$2" ;;
      ,*)      help      ;;
  esac

#+end_src

** update

#+begin_src sh :tangle ./bin/update :tangle-mode (identity #o755)

  #!/bin/sh

  cache_dir=$HOME/.cache/updates
  yay_log_file=$cache_dir/updates.log
  yay_cache_file=$cache_dir/yay_cache
  pac_cache_file=$cache_dir/pacman_cache

  mkdir -p $cache_dir

  > $yay_log_file
  sudo yay -Syy >/dev/null 2>$yay_log_file
  pacman -Slq > $pac_cache_file
  yay -Slq > $yay_cache_file

#+end_src

** update list

#+begin_src sh :tangle ./bin/list :tangle-mode (identity #o755)

  #!/bin/sh

  pkgs="alacritty rofi lf-bin flameshot emacs zsh bash neofetch neovim picom linux-zen awesome bat firefox librewolf-bin tor-browser pacman yay-bin fzf dunst evince"

  function help
  {
      echo -e "\
  Usage: list [COMMAND]\n\
  \n\
  By default shows available updates
  \n\
  Commands:\n\
  install     Install available updates.
  help        Show this message and exit."
      exit 0
  }

  case "$1" in
      "")       yay -Qu $pkgs ;;
      install)  yay -S --needed $pkgs  ;;
      help|*)   help          ;;
  esac

#+end_src

** yay install package

Install packages using yay

#+begin_src sh :tangle ./bin/in :tangle-mode (identity #o755)

  #!/bin/sh

  cache_dir=$HOME/.cache/updates
  yay_cache_file=$cache_dir/yay_cache

  mkdir -p $cache_dir

  if [ ! -s $yay_cache_file ]
  then
      echo "Creating cache..."
      yay -Slq > $yay_cache_file
      echo "Done"
  fi

  cat $yay_cache_file | fzf --bind 'ctrl-space:toggle' --reverse --multi --preview 'yay -Si {1}' | xargs -ro yay -S

#+end_src

** pacman install package

Install packages using pacman

#+begin_src sh :tangle ./bin/pin :tangle-mode (identity #o755)

  #!/bin/sh

  cache_dir=$HOME/.cache/updates
  pac_cache_file=$cache_dir/pacman_cache

  mkdir -p $cache_dir

  if [ ! -s $pac_cache_file ]
  then
      echo "Creating cache..."
      pacman -Slq > $pac_cache_file
      echo "Done"
  fi

  cat $pac_cache_file | fzf --bind 'ctrl-space:toggle' --reverse --multi --preview 'pacman -Si {1}' | xargs -ro pacman -S

#+end_src

** remove package

#+begin_src sh :tangle ./bin/re :tangle-mode (identity #o755)

  #!/bin/sh

  # Remove installed packages
  yay -Qq | fzf --bind 'ctrl-space:toggle' --reverse -q "$1" -m --preview 'yay -Qi {1}' | xargs -ro yay -Rns

#+end_src

** bar
*** cpu

#+begin_src c :tangle ./bin/bar/cpu.c

  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <time.h>

  void read_stat(long long int *a)
  {
      FILE *stat = fopen("/proc/stat","r");

      if (stat == NULL)
          exit(EXIT_FAILURE);

      fscanf(stat,"%*s %lli %lli %lli %lli %lli %lli %lli", &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6]);
      fclose(stat);
  }

  int main(void)
  {
      long long int a[7], b[7];
      double delta;
      int used;

      read_stat(a);
      usleep(250000);
      read_stat(b);

      delta = ((b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6]) - (a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]));
      used  = (delta - (b[3] - a[3])) / delta * 100;

      printf("%i%%", used);

      return 0;
  }

#+end_src

*** ram

#+begin_src c :tangle ./bin/bar/ram.c

  #include <stdio.h>
  #include <stdlib.h>

  #define SIZE 28

  #define mem_available_s buffers_s
  #define swap_cached_s   shmem_s
  #define active_s        shmem_s
  #define inactive_s      shmem_s
  #define active_anon_s   shmem_s
  #define inactive_anoa_s shmem_s
  #define active_file_s   shmem_s
  #define inactive_file_s shmem_s
  #define unevictable_s   shmem_s
  #define mlocked_s       shmem_s
  #define swap_total_s    shmem_s
  #define swap_free_s     shmem_s
  #define dirty_s         shmem_s
  #define writeback_s     shmem_s
  #define anon_pages_s    shmem_s
  #define mapped_s        shmem_s
  #define kreclaimable_s  sreclaimable_s
  #define slab_s          sreclaimable_s

  int take_num(char *str)
  {
    int num = 0;

    for (int i = 16; i < SIZE - 4; ++i)
      {
        char ch = str[i];

        if (ch == ' ')
          continue;

        num = num * 10 + (ch - '0');
      }

    return num;
  }

  int main(void)
  {
    FILE *meminfo = fopen("/proc/meminfo", "r");
    char mem_total_s[SIZE],
      mem_free_s[SIZE],
      buffers_s[SIZE],
      cached_s[SIZE],
      shmem_s[SIZE],
      sreclaimable_s[SIZE];

    if (meminfo == NULL)
      exit(EXIT_FAILURE);

    fread(mem_total_s,     sizeof(char), SIZE, meminfo);
    fread(mem_free_s,      sizeof(char), SIZE, meminfo);
    fread(buffers_s,       sizeof(char), SIZE, meminfo);
    fread(mem_available_s, sizeof(char), SIZE, meminfo);
    fread(cached_s,        sizeof(char), SIZE, meminfo);
    fread(swap_cached_s,   sizeof(char), SIZE, meminfo);
    fread(active_s,        sizeof(char), SIZE, meminfo);
    fread(inactive_s,      sizeof(char), SIZE, meminfo);
    fread(active_anon_s,   sizeof(char), SIZE, meminfo);
    fread(inactive_anoa_s, sizeof(char), SIZE, meminfo);
    fread(active_file_s,   sizeof(char), SIZE, meminfo);
    fread(inactive_file_s, sizeof(char), SIZE, meminfo);
    fread(unevictable_s,   sizeof(char), SIZE, meminfo);
    fread(mlocked_s,       sizeof(char), SIZE, meminfo);
    fread(swap_total_s,    sizeof(char), SIZE, meminfo);
    fread(swap_free_s,     sizeof(char), SIZE, meminfo);
    fread(dirty_s,         sizeof(char), SIZE, meminfo);
    fread(writeback_s,     sizeof(char), SIZE, meminfo);
    fread(anon_pages_s,    sizeof(char), SIZE, meminfo);
    fread(mapped_s,        sizeof(char), SIZE, meminfo);
    fread(shmem_s,         sizeof(char), SIZE, meminfo);
    fread(kreclaimable_s,  sizeof(char), SIZE, meminfo);
    fread(slab_s,          sizeof(char), SIZE, meminfo);
    fread(sreclaimable_s,  sizeof(char), SIZE, meminfo);

    int mem_total    = take_num(mem_total_s),
      mem_free     = take_num(mem_free_s),
      buffers      = take_num(buffers_s),
      shmem        = take_num(shmem_s),
      sreclaimable = take_num(sreclaimable_s),
      cached       = take_num(cached_s) + sreclaimable - shmem;

    int used = mem_total - (mem_free + buffers + cached);
    double total_M = mem_total / 1024;
    double used_M = used / 1024;

    if (used_M < 1024)
      printf("%iM/%.2lfG", (int)used_M, total_M / 1024);
    else
      printf("%.2lfG/%.2lfG", used_M / 1024, total_M / 1024);

    fclose(meminfo);
    return 0;
  }

#+end_src

*** updates

#+begin_src sh :tangle ./bin/bar/updates :tangle-mode (identity #o755)

  #!/bin/sh

  yay_log_file=$HOME/.cache/updates/updates.log

  get_total_updates ()
  {
      while [ $(ping -c 1 -q archlinux.org >&/dev/null; echo $?) -ne 0 ]
      do
          sleep 1
      done

      update
      updates=$(yay -Qu 2>/dev/null | wc -l);
  }

  get_total_updates

  if [ $(cat $yay_log_file | wc -l) -gt 0 ]
  then
      notify-send -u normal "Error in updates script" "Something wrong"
  fi

  echo $updates

#+end_src

* Bash
** .bash_profile
:PROPERTIES:
:header-args: :tangle ./.bash_profile
:END:

*** Export

#+begin_src sh

  export PATH=$HOME/.config/rofi/scripts:$HOME/.config/lf/scripts:$HOME/.local/bin:$PATH
  export ZDOTDIR="$HOME/.config/zsh"
  export TPATH="$HOME/.local/share/my-trash"

  export SHELL="/bin/bash"
  export EDITOR="/bin/nvim"
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"

#+end_src

*** Startup the necessary commands

#+begin_src sh

  [[ ! -d $TPATH ]] && mkdir -p $TPATH
  [[ -f /usr/bin/udiskie ]] && udiskie &

  xset r rate 300 24
  syndaemon -t -i 1 -d
  trash-empty 7 &

#+end_src

* Zsh
:PROPERTIES:
:header-args: :tangle ./.config/zsh/.zshrc :tangle-mode (identity #o755)
:END:

** Functions

#+begin_src sh

  # store all plugins to be upgraded
  export -Ua PLUGINS_UPGRADE

  function zsh-add-plugin ()
  {
      PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
      PLUGIN_DIR="$ZDOTDIR/plugins/$PLUGIN_NAME"

      [ ! -d "$PLUGIN_DIR" ] && git clone "https://github.com/$1.git" "$PLUGIN_DIR"

      PLUGINS_UPGRADE+=("${PLUGIN_DIR}")

      if   [ "$2" != "" ] && [ -f $PLUGIN_DIR/$2 ];    then source $PLUGIN_DIR/$2
      elif [ -f $PLUGIN_DIR/$PLUGIN_NAME.plugin.zsh ]; then source $PLUGIN_DIR/$PLUGIN_NAME.plugin.zsh
      elif [ -f $PLUGIN_DIR/$PLUGIN_NAME.zsh ];        then source $PLUGIN_DIR/$PLUGIN_NAME.zsh
      else
          echo "Can't load $PLUGIN_NAME"
      fi
  }

  function zsh-upgrade ()
  {
      local PLUGIN_DIR

      for PLUGIN_DIR in "${PLUGINS_UPGRADE[@]}"
      do
          pushd "${PLUGIN_DIR}" > /dev/null || continue
          printf 'Updating %s\n' "${PLUGIN_DIR}"
          git pull
          printf '\n'
          popd > /dev/null || continue
      done
  }

  # Function to source files if they exist
  # function zsh-add-file ()
  # {
  #     [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
  # }

  # function zsh-add-completion ()
  # {
  #     PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
  #     if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
  #         # For completions
  #         completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
  #         fpath+="$(dirname "${completion_file_path}")"
  #         zsh-add-file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
  #     else
  #         git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
  #         fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
  #         [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
  #     fi
  #     completion_file="$(basename "${completion_file_path}")"
  #     if [ "$2" = true ] && compinit "${completion_file:1}"
  # }

  # Unpacking the archive
  function ex ()
  {
      if [ -f $1 ] ; then
          case $1 in
              ,*.tar.bz2) tar xvjf $1   ;;
              ,*.tar.gz)  tar xvzf $1   ;;
              ,*.tar.xz)  tar xvfJ $1   ;;
              ,*.bz2)     bunzip2 $1    ;;
              ,*.rar)     unrar x $1    ;;
              ,*.gz)      gunzip $1     ;;
              ,*.tar)     tar xvf $1    ;;
              ,*.tbz2)    tar xvjf $1   ;;
              ,*.tgz)     tar xvzf $1   ;;
              ,*.zip)     unzip $1      ;;
              ,*.Z)       uncompress $1 ;;
              ,*.7z)      7z x $1       ;;
              ,*)         echo "'$1' cannot be unpacked with ex()" ;;
          esac
      else
          echo "'$1' is not valid file"
      fi
  }

  # Packing in the archive
  function pk ()
  {
      if [ $1 ] ; then
          case $1 in
              tbz)    tar cjvf $2.tar.bz2 $2   ;;
              tgz)    tar czvf $2.tar.gz  $2   ;;
              tar)    tar cpvf $2.tar  $2      ;;
              bz2)    bzip $2                  ;;
              gz)     gzip -c -9 -n $2 > $2.gz ;;
              zip)    zip -r $2.zip $2         ;;
              7z)     7z a $2.7z $2            ;;
              ,*)      echo "'$1' cannot be packed with pk()" ;;
          esac
      else
          echo "'$1' is not valid file"
      fi
  }

#+end_src

** Plugins

#+begin_src sh

  mkdir -p ~/.config/zsh/plugins

  zsh-add-plugin "zsh-users/zsh-autosuggestions"
  zsh-add-plugin "hlissner/zsh-autopair"
  zsh-add-plugin "none9632/zsh-sudo"
  zsh-add-plugin "zsh-users/zsh-syntax-highlighting"
  zsh-add-plugin "djui/alias-tips"

#+end_src

** Prompt

#+begin_src sh

  autoload -U colors && colors

  PREFIX="λ"
  WHITE="%F{#bbc2cf}"
  PURPLE="%B%F{#d499e5}"
  GREEN="%B%F{#98be65}"
  BLUE="%B%F{#51afef}"
  ORANGE="%B%F{214}"
  GREY="%F{#7b7278}"
  BCYAN="%F{#46d9ff}"
  END="%{$reset_color%}"

  PROMPT="\
  ${GREY}┌[${END}\
  ${GREEN}%~${END}\
  ${GREY}]─[${END}\
  ${BLUE}%n${END}\
  ${GREY}]─[${END}\
  ${ORANGE}%M${END}\
  ${GREY}]
  └>${END} \
  ${BCYAN}${PREFIX}${END} \
  ${WHITE}${END}"

#+end_src

** Syntax highlighting

#+begin_src sh

  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern regexp)

  ZSH_HIGHLIGHT_REGEXP+=('\bsudo\b' fg=#e76f51)
  ZSH_HIGHLIGHT_REGEXP+=("[\$][a-zA-Z0-9_]*" fg=#5699af)
  ZSH_HIGHLIGHT_REGEXP+=("\b(http|https|ftp)://[^\"|\ |'|\$]*\b" fg=#51afef,underline)

  ZSH_HIGHLIGHT_STYLES[arg0]='fg=#c792ea'
  ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=#e7c07b'
  ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=#e7c07b'
  ZSH_HIGHLIGHT_STYLES[path]='fg=#98be65'
  ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]='none'
  ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=#5699af'

#+end_src

** History

#+begin_src sh

  HISTSIZE=10000
  SAVEHIST=10000
  HISTFILE=$HOME/.cache/zsh/history

  mkdir -p $HOME/.cache/zsh

  # Ignoring repetitive lines in the history
  setopt HIST_IGNORE_DUPS
  setopt HIST_IGNORE_SPACE
  setopt HIST_REDUCE_BLANKS
  # setopt INC_APPEND_HISTORY
  setopt SHARE_HISTORY

#+end_src

** fzf

#+begin_src sh

  [ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
  [ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh

  export FZF_DEFAULT_COMMAND="fd --type f --color=never --hidden"
  export FZF_DEFAULT_OPTS="--bind tab:down --bind btab:up"

  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :50 {}'"

  export FZF_ALT_C_COMMAND='fd --type d --type symlink . --color=never --hidden'
  export FZF_ALT_C_OPTS="--preview 'exa -1a --color=always --group-directories-first {} | head -50'"

  export FZF_HISTDIR=$HOME/.cache/fzf

  FZF_COMPLETION_TRIGGER='hh'

  function find_file ()
  {
      res="$(find -L . \( -path '*/\*' -o -fstype 'dev' -o -fstype 'proc' \) -prune \
          -o -print 2> /dev/null | sed 1d | cut -b3- | fzf +m -e --preview='ls -1A {}')"
      LBUFFER+="$res "
      # Needed in order for the highlighting rules to apply
      zle copy-region-as-kill
  }
  zle -N find_file

  bindkey -M vicmd "T" fzf-file-widget
  bindkey "^h^h" fzf-cd-widget
  bindkey "^[r"  fzf-history-widget
  bindkey "^[f"  find_file

#+end_src

** Completion

#+begin_src sh

  autoload -U compinit && compinit

  # Added hidden files
  _comp_options+=(globdots)

  # Use a cache in order to proxy the list of results
  zstyle ':completion:*' use-cache on
  zstyle ':completion:*' cache-path ~/.cache/zsh/

  # Ignore completion functions for commands you don't have
  zstyle ':completion:*:functions' ignored-patterns '_*'

  # Persistent rehash
  zstyle ':completion:*' rehash true

  zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  zsh-add-plugin "Aloxaf/fzf-tab"

  # Needed in order for the highlighting rules to apply
  function fix-fzf-tab ()
  {
      zle fzf-tab-complete
      zle copy-region-as-kill
  }
  zle -N fix-fzf-tab
  bindkey "^I" fix-fzf-tab

#+end_src

** Keybinding

#+begin_src sh

  bindkey -v

  KEYTIMEOUT=25

  # Updates editor information when the keymap changes.
  function zle-keymap-select()
  {
      # change cursor style in vi-mode
      case $KEYMAP in
          vicmd)      print -n -- "\e[1 q" ;;
          viins|main) print -n -- "\e[5 q" ;;
          vivis)      print -n -- "\e[1 q" ;;
      esac

      zle reset-prompt
      zle -R
  }
  # Start every prompt in insert mode
  function zle-line-init ()
  {
      zle -K viins
  }

  zle -N zle-keymap-select
  zle -N zle-line-init

  bindkey -M  vicmd "U" redo
  bindkey -M  vicmd "k" up-history
  bindkey -M  vicmd "j" down-history
  bindkey -M  vicmd "L" forward-word
  bindkey -M  vicmd "H" backward-word
  bindkey -sM vicmd ":" ""
  bindkey -sM vicmd "/" ""

  bindkey -M viins "jj" vi-cmd-mode
  bindkey -M viins "^?" backward-delete-char
  bindkey -M viins "^[^?" backward-kill-word
  bindkey -M viins "^l" autosuggest-accept

#+end_src

** Copy/Paste into clipboard

#+begin_src sh

  function clip-paste ()
  {
      CUTBUFFER=$(xsel -o -b </dev/null)
      zle yank
      # Needed in order for the highlighting rules to apply
      zle copy-region-as-kill
  }

  function clip-copy ()
  {
      zle copy-region-as-kill
      print -rn $CUTBUFFER | xsel -i -b
  }

  zle -N clip-paste
  zle -N clip-copy

  bindkey -M viins "^y" clip-copy
  bindkey -M vicmd "y" clip-copy
  bindkey -M viins "^p" clip-paste
  bindkey -M vicmd "p" clip-paste

#+end_src

** Autopair

#+begin_src sh

  # Needed in order for the highlighting rules to apply
  function fix-autopair-insert ()
  {
      autopair-insert
      zle copy-region-as-kill
  }

  zle -N fix-autopair-insert

  for p in ${(@k)AUTOPAIR_PAIRS}; do
      bindkey "$p" fix-autopair-insert
      bindkey -M isearch "$p" self-insert
  done

#+end_src

** Aliases

#+begin_src sh

  alias stcpu="stress -c 8"
  alias stmem="stress -vm 2 --vm-bytes"

  alias ls="exa -la --color=always --group-directories-first"
  alias cat="bat"
  alias vim="nvim"
  alias rm="rm -r"
  alias cp="cp -r"
  alias pin="sudo pin"

  alias src="source ~/.config/zsh/.zshrc"
  alias mkcd="foo(){ mkdir -p \"$1\"; cd \"$1\" }; foo "
  alias c="clear"
  alias env="xdotool keydown Shift; printenv | fzf; xdotool keyup Shift"
  alias als="alias | fzf"
  alias upgrade="yay -Syu"

  # Navigation
  alias ..="cd .."
  alias ...="cd ../.."
  alias ....="cd ../../../../"
  alias .....="cd ../../../../"
  alias .3="cd ../../.."
  alias .4="cd ../../../.."
  alias .5="cd ../../../../.."

  # Get fastest mirrors
  alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
  alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
  alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
  alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

  # Colorize grep output
  alias grep="grep --color=auto"
  alias egrep="egrep --color=auto"
  alias fgrep="fgrep --color=auto"

  alias -g H="| head"
  alias -g T="| tail"
  alias -g G="| grep"
  alias -g L="| less"
  alias -g M="| most"
  alias -g C='| wc -l'
  alias -g LL="2>&1 | less"
  alias -g CA="2>&1 | cat -A"
  alias -g NE="2> /dev/null"
  alias -g NUL="> /dev/null 2>&1"

  # git
  alias gac="git add . && git commit -a -m "

#+end_src

** Misc

#+begin_src sh

  # Resetting the terminal with escape sequences
  function reset_broken_terminal()
  {
      printf '%b' '\e[0m\e(B\e)0\017\e[?5l\e7\e[0;0r\e8'
  }
  autoload -Uz add-zsh-hook
  add-zsh-hook -Uz precmd reset_broken_terminal

  source /usr/share/doc/pkgfile/command-not-found.zsh

  # lf
  function lfcd()
  {
      tmp="$(mktemp)"
      lfrun -last-dir-path="$tmp" "$@"
      if [ -f "$tmp" ]; then
          dir="$(cat "$tmp")"
          rm -f "$tmp"
          [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
      fi
  }
  alias lf="lfcd"

  # Run neofetch
  [[ $run_neofetch ]] && echo "" && neofetch

#+end_src

* Awesome
:PROPERTIES:
:header-args: :tangle ./.config/awesome/rc.lua
:END:

** Libraries

#+begin_src lua

  -- awesome_mode: api-level=4:screen=on
  -- If LuaRocks is installed, make sure that packages installed through it are
  -- found (e.g. lgi). If LuaRocks is not installed, do nothing.
  pcall(require, "luarocks.loader")

  -- Standard awesome library
  local gears = require("gears")
  local awful = require("awful")
  require("awful.autofocus")
  -- Widget and layout library
  local wibox = require("wibox")
  -- Theme handling library
  local beautiful = require("beautiful")
  local dpi = require('beautiful').xresources.apply_dpi
  -- Notification library
  local old_dbus = dbus
  dbus = nil
  local naughty = require("naughty")
  dbus = old_dbus
  package.loaded["naughty.dbus"] = {}
  -- Declarative object management
  local ruled = require("ruled")
  -- local menubar = require("menubar")
  local hotkeys_popup = require("awful.hotkeys_popup")
  -- Enable hotkeys help widget for VIM and other apps
  -- when client with a matching name is opened:
  require("awful.hotkeys_popup.keys")

#+end_src

** Error handling

#+begin_src lua

  -- Check if awesome encountered an error during startup and fell back to
  -- another config (This code will only ever execute for the fallback config)
  naughty.connect_signal("request::display_error", function(message, startup)
                            naughty.notification {
                               urgency = "critical",
                               title   = "Oops, an error happened"..(startup and " during startup!" or "!"),
                               message = message
                            }
  end)

#+end_src

** Variable definitions

#+begin_src lua

  -- This is used later as the default terminal and editor to run.
  terminal = "alacritty"
  editor = os.getenv("EDITOR") or "nano"
  editor_cmd = terminal .. " -e " .. editor

  -- Default modkey.
  -- Usually, Mod4 is the key with a logo between Control and Alt.
  -- If you do not like this or do not have such a key,
  -- I suggest you to remap Mod4 to another key using xmodmap or other tools.
  -- However, you can use another modifier like Mod1, but it may interact with others.
  modkey = "Mod4"

#+end_src

** Tag layout

#+begin_src lua

  -- Table of layouts to cover with awful.layout.inc, order matters.
  tag.connect_signal("request::default_layouts", function()
                        awful.layout.append_default_layouts({
                              -- awful.layout.suit.floating,
                              awful.layout.suit.tile,
                              awful.layout.suit.tile.left,
                              awful.layout.suit.tile.bottom,
                              awful.layout.suit.tile.top,
                              awful.layout.suit.fair,
                              awful.layout.suit.fair.horizontal,
                              awful.layout.suit.spiral,
                              awful.layout.suit.spiral.dwindle,
                              awful.layout.suit.max,
                              awful.layout.suit.max.fullscreen,
                              awful.layout.suit.magnifier,
                              awful.layout.suit.corner.nw,
                        })
  end)

  -- Each screen has its own tag table.
  awful.screen.connect_for_each_screen(function(s)
        awful.tag({ " 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", "hidden_tag" }, s, awful.layout.layouts[1])
  end)

#+end_src

** Rules

#+begin_src lua

  -- Rules to apply to new clients.
  ruled.client.connect_signal("request::rules", function()
      -- All clients will match this rule.
      ruled.client.append_rule {
          id         = "global",
          rule       = { },
          properties = {
              focus     = awful.client.focus.filter,
              raise     = true,
              screen    = awful.screen.preferred,
              placement = awful.placement.no_overlap+awful.placement.no_offscreen
          }
      }

      ruled.client.append_rule {
         rule       = { class = "Evince" },
         properties = { floating = true },
         callback = function(c)
            awful.placement.maximize(c, { margins = beautiful.useless_gap * 2, honor_workarea = true })
         end
      }

      ruled.client.append_rule {
         rule       = { class = "Font-viewer" },
         properties = { floating = true },
         callback = function(c)
            c.width = 1000
            c.height = 600
            awful.placement.centered(c, { margins = { top = 56 }})
         end
      }

      ruled.client.append_rule {
         rule       = { class = "Codium" },
         properties = { floating = true },
         callback = function(c)
            awful.placement.centered(c, { margins = { top = 56 }})
         end
      }

      ruled.client.append_rule {
         rule_any   = {
            class = {
               "Rofi",
               "Gpick",
            }
         },
         properties = {
            floating = true,
            ontop    = true,
         }
      }
  end)

  client.connect_signal('manage', function(c)
                           if c.class == "Gpick" then
                              awful.spawn.with_shell("killall picom")
                           end
                           -- Sometimes the rofi is not in the right position
                           if c.class == "Rofi" and c.x == 0 then
                              awful.placement.centered(c, { margins = { top = 56 }})
                           end
  end)

  client.connect_signal('unmanage', function(c)
                           if c.class == "Gpick" then
                              awful.spawn.with_shell("picom -b --experimental-backends --config $HOME/.config/picom/picom.conf")
                           end
  end)

#+end_src

** Splash apps
*** Misc

#+begin_src lua

  function create_blurbg(pid_file)
     local s = awful.screen.focused()
     return awful.spawn("rofi " ..
                        "-pid /run/user/1000/" .. pid_file .. " " ..
                        "-replace " ..
                        "-normal-window " ..
                        "-theme /home/none9632/.config/rofi/themes/other/blurbg.rasi " ..
                        "-p \"\" " ..
                        "-dmenu", {
                           focus  = false,
                           above  = true,
                           width  = s.geometry.width,
                           height = s.geometry.height,
     })
  end

  function raise_client(rclient)
     local t = awful.screen.focused().selected_tag
     rclient:move_to_tag(t)
     rclient:raise()
     client.focus = rclient
  end

  function toggle_splash_height()
     c = client.focus

     if c.pid == terminal_pid or c.class == "firefox" then
        if c.width <= 1350 then
           awful.placement.maximize(c, { margins = beautiful.useless_gap * 2, honor_workarea = true })
        else
           c.width = 1350
           c.height = 800
           awful.placement.centered(c, { margins = { top = 56 }})
        end
     end
  end

#+end_src

*** Terminal

#+begin_src lua

  local terminal_pid = 'notnil'
  local terminal_client
  local terminal_blurbg_pid = 'notnil'
  local terminal_blurbg_client

  function create_terminal()
     for _, c in ipairs(client.get()) do
        if c.instance == "Alacritty-splash" then
           terminal_pid = c.pid
           terminal_client = c
           c.ontop = true
           awful.placement.centered(c, { margins = { top = 56 }})
           raise_client(terminal_client)
        end
     end

     if not terminal_blurbg_client then
        terminal_blurbg_pid = create_blurbg("rofi-terminal.pid")
     end

     if not terminal_client then
        terminal_pid = awful.spawn("alacritty --class Alacritty-splash")
     end
  end

  function toggle_terminal()
     local s = awful.screen.focused()
     local c = client.focus
     awful.spawn.with_shell("xdotool key Mode_switch")

     if not terminal_client then
        create_terminal()
     elseif c ~= terminal_client then
        terminal_blurbg_client:move_to_tag(s.selected_tag)
        terminal_blurbg_client:raise()
        raise_client(terminal_client)
     else
        terminal_client:move_to_tag(s.tags[8])
        terminal_blurbg_client:move_to_tag(s.tags[8])
     end
  end

  client.connect_signal('manage', function(c)
                           if c.pid == terminal_pid then
                              terminal_client = c
                              c.floating = true
                              c.ontop = true
                              c.width = 1350
                              c.height = 800
                              client.focus = c
                              awful.placement.centered(c, { margins = { top = 56 }})
                           end
                           if c.pid == terminal_blurbg_pid then
                              terminal_blurbg_client = c
                              c:lower()
                              awful.placement.centered(c)
                           end
  end)

  client.connect_signal('unmanage', function(c)
                           if c.pid == terminal_pid then
                              terminal_client = nil
                              terminal_pid = 'notnil'
                              terminal_blurbg_client:kill()
                              terminal_blurbg_client = nil
                              terminal_blurbg_pid = 'notnil'
                           end
  end)

#+end_src

*** Firefox

#+begin_src lua

  local firefox_pid = 'notnil'
  local firefox_client
  local firefox_blurbg_pid = 'notnil'
  local firefox_blurbg_client

  function create_firefox()
     for _, c in ipairs(client.get()) do
        if c.width == 1350 and c.class == "firefox" then
           firefox_pid = c.pid
           firefox_client = c
           c.ontop = true
           awful.placement.centered(c, { margins = { top = 56 }})
           raise_client(firefox_client)
        end
     end

     if not firefox_blurbg_client then
        firefox_blurbg_pid = create_blurbg("rofi-firefox.pid")
     end

     if not firefox_client then
        firefox_pid = awful.spawn("firefox")
     end
  end

  function toggle_firefox()
     local s = awful.screen.focused()
     local c = client.focus

     if not firefox_client then
        create_firefox()
     elseif c ~= firefox_client then
        firefox_blurbg_client:move_to_tag(s.selected_tag)
        firefox_blurbg_client:raise()
        raise_client(firefox_client)
     else
        firefox_client:move_to_tag(s.tags[8])
        firefox_blurbg_client:move_to_tag(s.tags[8])
     end
  end

  client.connect_signal('manage', function(c)
                           if c.pid == firefox_pid then
                              firefox_client = c
                              c.floating = true
                              c.ontop = true
                              c.width = 1350
                              c.height = 800
                              client.focus = c
                              awful.placement.centered(c, { margins = { top = 56 }})
                           end
                           if c.pid == firefox_blurbg_pid then
                              firefox_blurbg_client = c
                              c:lower()
                              awful.placement.centered(c)
                           end
  end)

  client.connect_signal('unmanage', function(c)
                           if c.pid == firefox_pid then
                              firefox_client = nil
                              firefox_pid = 'notnil'
                              firefox_blurbg_client:kill()
                              firefox_blurbg_client = nil
                              firefox_blurbg_pid = 'notnil'
                           end
  end)

#+end_src

*** lf for emacs

#+begin_src lua

  local emacs_fm_pid = 'notnil'

  function create_emacs_fm(path)
     emacs_fm_pid = awful.spawn.with_shell("alacritty -e lfrun " ..
                                           "-command \"cd " .. path .. "\" " ..
                                          "-command \"map <esc> quit_for_emacs\" " ..
                                          "-command \"map q quit_for_emacs\" " ..
                                          "-command \"map <enter> select_for_emacs\"")
  end

  client.connect_signal('manage', function(c)
                           if c.pid == emacs_fm_pid then
                              c.ontop = true
                              c.floating = true
                              c.width = 1400
                              c.height = 800
                              awful.placement.centered(c, { margins = { top = 56 }})
                           end
  end)

  client.connect_signal('unmanage', function(c)
                           if c.pid == emacs_fm_pid then
                              emacs_fm_pid = 'notnil'
                           end
  end)

#+end_src

*** Terminal for lf

#+begin_src lua

  local lf_terminal_pid = 'notnil'
  local lf_terminal_width = 0
  local lf_terminal_height = 0
  local lf_terminal_centered = true
  local lf_pid = nil

  function create_lf_terminal(command, width, height, centered, term_pid)
     lf_terminal_width = width
     lf_terminal_height = height
     lf_terminal_centered = centered
     lf_pid = term_pid
     lf_terminal_pid = awful.spawn.with_shell("alacritty -e sh -c 'tput civis;" .. command .. "'")
  end

  client.connect_signal('manage', function(c)
                           if c.pid == lf_terminal_pid then
                              c.ontop = true
                              c.floating = true
                              c.width = lf_terminal_width
                              c.height = lf_terminal_height
                              if lf_terminal_centered == true then
                                 awful.placement.centered(c, { margins = { top = 56 }})
                              else
                                 local lf_client = get_client(lf_pid)
                                 c.x = lf_client.x + lf_client.width/2 - c.width/2
                                 c.y = lf_client.y + lf_client.height/2 - c.height/2
                              end
                              client.focus = c
                           end
  end)

#+end_src

** Theme

#+begin_src lua

  local theme_assets = require("beautiful.theme_assets")

  local gfs = require("gears.filesystem")
  local themes_path = gfs.get_themes_dir()

  local theme = {}

  theme.font          = "Iosevka Nerd Font 13"

  theme.bg_normal     = "#222222"
  theme.bg_focus      = "#535d6c"
  theme.bg_urgent     = "#ff0000"
  theme.bg_minimize   = "#444444"
  theme.bg_systray    = theme.bg_normal

  theme.fg_normal     = "#cad0da"
  theme.fg_focus      = "#ffffff"
  theme.fg_urgent     = "#ffffff"
  theme.fg_minimize   = "#ffffff"

  theme.useless_gap   = dpi(7)
  theme.border_width  = dpi(0)
  theme.border_normal = "#000000"
  theme.border_focus  = "#535d6c"
  theme.border_marked = "#91231c"

  -- There are other variable sets
  -- overriding the default one when
  -- defined, the sets are:
  -- taglist_[bg|fg]_[focus|urgent|occupied|empty|volatile]
  -- tasklist_[bg|fg]_[focus|urgent]
  -- titlebar_[bg|fg]_[normal|focus]
  -- tooltip_[font|opacity|fg_color|bg_color|border_width|border_color]
  -- mouse_finder_[color|timeout|animate_timeout|radius|factor]
  -- prompt_[fg|bg|fg_cursor|bg_cursor|font]
  -- hotkeys_[bg|fg|border_width|border_color|shape|opacity|modifiers_fg|label_bg|label_fg|group_margin|font|description_font]

  theme.taglist_bg_focus = "#51afef"
  theme.taglist_fg_focus = "#1c252a"

  theme.taglist_fg_occupied = "#51afef"

  theme.taglist_fg_empty = "#cad0da"

  -- Variables set for theming the menu:
  -- menu_[bg|fg]_[normal|focus]
  -- menu_[border_color|border_width]
  theme.menu_submenu_icon = themes_path .. "default/submenu.png"
  theme.menu_height = dpi(15)
  theme.menu_width  = dpi(100)

  -- You can add as many variables as
  -- you wish and access them by using
  -- beautiful.variable in your rc.lua
  --theme.bg_widget = "#cc0000"

  -- You can use your own layout icons like this:
  theme.layout_fairh         = themes_path .. "default/layouts/fairhw.png"
  theme.layout_fairv         = themes_path .. "default/layouts/fairvw.png"
  theme.layout_floating      = themes_path .. "default/layouts/floatingw.png"
  theme.layout_magnifier     = themes_path .. "default/layouts/magnifierw.png"
  theme.layout_max           = themes_path .. "default/layouts/maxw.png"
  theme.layout_fullscreen    = themes_path .. "default/layouts/fullscreenw.png"
  theme.layout_tilebottom    = themes_path .. "default/layouts/tilebottomw.png"
  theme.layout_tileleft      = themes_path .. "default/layouts/tileleftw.png"
  theme.layout_tile          = themes_path .. "default/layouts/tilew.png"
  theme.layout_tiletop       = themes_path .. "default/layouts/tiletopw.png"
  theme.layout_spiral        = themes_path .. "default/layouts/spiralw.png"
  theme.layout_dwindle       = themes_path .. "default/layouts/dwindlew.png"
  theme.layout_cornernw      = themes_path .. "default/layouts/cornernww.png"
  theme.layout_cornerne      = themes_path .. "default/layouts/cornernew.png"
  theme.layout_cornersw      = themes_path .. "default/layouts/cornersww.png"
  theme.layout_cornerse      = themes_path .. "default/layouts/cornersew.png"

  -- Generate Awesome icon:
  theme.awesome_icon = theme_assets.awesome_icon(
     theme.menu_height, theme.bg_focus, theme.fg_focus
  )

  -- Define the icon theme for application icons. If not set then the icons
  -- from /usr/share/icons and /usr/share/icons/hicolor will be used.
  theme.icon_theme = nil

  beautiful.init(theme)

#+end_src

** Wibar
*** Widgets

#+begin_src lua

  mycpu = wibox.widget {
     {
        id     = "text",
        widget = wibox.widget.textbox
     },
     bg     = "#364852cc",
     widget = wibox.container.background
  }

  mycputemp = wibox.widget {
     {
        id     = "text",
        widget = wibox.widget.textbox
     },
     bg     = "#32424bcc",
     widget = wibox.container.background
  }

  myram = wibox.widget {
     {
        id     = "text",
        widget = wibox.widget.textbox
     },
     bg     = "#2e3c44cc",
     widget = wibox.container.background
  }

  mybattery = wibox.widget {
     {
        id     = "text",
        widget = wibox.widget.textbox
     },
     bg     = "#29363ecc",
     widget = wibox.container.background
  }

  myupdates = wibox.widget {
     {
        id     = "text",
        widget = wibox.widget.textbox
     },
     bg     = "#253137cc",
     widget = wibox.container.background
  }

  mykeyboardlayout = wibox.widget {
     {
        {
           markup = " <span font='MyFont' size='16.5pt' foreground='#d499e5'>䂌</span>",
           widget = wibox.widget.textbox
        },
        {
           widget = awful.widget.keyboardlayout
        },
        layout = wibox.layout.fixed.horizontal,
        widget = wibox.container.margin
     },
     bg     = "#202b31cc",
     widget = wibox.container.background
  }

  mytextclock = wibox.widget {
     {
        {
           markup = " <span font='MyFont' size='16pt' foreground='#51afef'>䂋</span>",
           widget = wibox.widget.textbox
        },
        {
           format = ' %H:%M ',
           widget = wibox.widget.textclock
        },
        layout = wibox.layout.fixed.horizontal,
        widget = wibox.container.margin
     },
     bg     = "#1c252acc",
     widget = wibox.container.background
  }

#+end_src

*** Wibox

#+begin_src lua

  awful.screen.connect_for_each_screen(function(s)
        local sgeo = s.geometry
        local gap = beautiful.useless_gap

        s.tagbar = wibox({
              x 	  	= sgeo.x + gap * 2,
              y 	  	= sgeo.y + gap * 2,
              screen  = s,
              width   = 245,
              height  = 42,
              ontop   = true,
              visible = true,
              bg      = "#1c252acc",
        })

        s.tagbar:setup {
           {
              layout = wibox.layout.fixed.horizontal,
              expand = "none",

              awful.widget.taglist {
                 screen  = s,
                 filter  = awful.widget.taglist.filter.all,
                 buttons = {
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                          if client.focus then
                             client.focus:move_to_tag(t)
                          end
                    end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                          if client.focus then
                             client.focus:toggle_tag(t)
                          end
                    end),
                    awful.button({ }, 4, function(t) awful.tag.viewprev(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewnext(t.screen) end),
                 }
              }
           },

           widget = wibox.container.margin
        }

        s.tagbar:struts({ top = s.tagbar.height + gap * 2 })

        s.mywibox = awful.popup {
           screen = s,
           placement = function(c)
              return awful.placement.top_right(c, { margins = gap * 2 })
           end,
           minimum_height = 42,
           bg = "#00000000",
           ontop = true,
           widget = {
              {
                 layout = wibox.layout.fixed.horizontal,
                 expand = "none",

                 mycpu,
                 mycputemp,
                 myram,
                 mybattery,
                 myupdates,
                 mykeyboardlayout,
                 mytextclock,
              },
              widget = wibox.container.margin
           }
        }
  end)

#+end_src

*** Timers

#+begin_src lua

  cputemp_icons = { "䂓", "䂒", "䂑", "䂐", "䂏" }

  gears.timer {
     timeout   = 1.5,
     call_now  = true,
     autostart = true,
     callback  = function()
        awful.spawn.easy_async_with_shell("cpu",
                                          function(out)
                                             mycpu.text.markup = " <span font='Myfont' size='16.5pt' foreground='#ff6c6b'>䂄</span> " ..
                                                out:gsub("%\n", "") .. " "
        end)
        awful.spawn.easy_async_with_shell("cat /sys/class/hwmon/hwmon3/temp1_input",
                                          function(out)
                                             cputemp = math.floor(tonumber(out) / 1000 + 0.5)
                                             if cputemp <= 35 then
                                                icon = cputemp_icons[1]
                                             elseif cputemp <= 44 then
                                                icon = cputemp_icons[2]
                                             elseif cputemp <= 53 then
                                                icon = cputemp_icons[3]
                                             elseif cputemp <= 62 then
                                                icon = cputemp_icons[4]
                                             else
                                                icon = cputemp_icons[5]
                                             end

                                             if cputemp > 70 then
                                                mycputemp.bg = "#ff6c6bcc"
                                             else
                                                mycputemp.bg = "#32424bcc"
                                             end

                                             mycputemp.text.markup = " <span font='Myfont' size='16.5pt' foreground='#ffaf00'>" ..
                                                icon .. "</span> " .. cputemp .. "°C "
        end)
        awful.spawn.easy_async_with_shell("ram",
                                          function(out)
                                             myram.text.markup = " <span font='Myfont' size='18pt' foreground='#98be65'>䂎</span> " ..
                                                out:gsub("%\n", "") .. " "
        end)
     end
  }

  bat_notification_count_1 = 1
  bat_notification_count_2 = 1
  bat_icons = { "䂉", "䂈", "䂇", "䂆", "䂅" }
  bat_prev_status = ""
  bat_prev_index = 0

  gears.timer {
     timeout   = 1,
     call_now  = true,
     autostart = true,
     callback  = function()
        awful.spawn.easy_async_with_shell("capacity=$(cat /sys/class/power_supply/BAT1/capacity | tr -d '\n');" ..
                                          "status=$(cat /sys/class/power_supply/BAT1/status | tr -d '\n');" ..
                                          "echo -n \"$capacity $status\"",
                                          function(out)
                                             out = out:gsub("\n", "")
                                             capacity = tonumber(out:match("^(.+)%s"))
                                             status = out:match(" (.+)")

                                             if status ~= bat_prev_status then
                                                if status == "Discharging" then
                                                   bat_notification_count_1 = 0
                                                   bat_notification_count_2 = 0
                                                   bat_prev_index = 0
                                                end
                                                bat_prev_status = status
                                             end

                                             if capacity <= 10 and bat_notification_count_1 == 0 then
                                                awful.spawn.with_shell("notify-send -t 0 -i ~/Downloads/icons/low-battery.png -u normal \"Battery is low\" \"10% battery remaining\"")
                                                bat_notification_count_1 = 1
                                             elseif capacity <= 1 and bat_notification_count_2 == 0 then
                                                awful.spawn.with_shell("notify-send -t 0 -u normal \"Battery is low\" \"1% battery remaining\"")
                                                bat_notification_count_2 = 1
                                             end

                                             icon_index = 1 + math.floor((capacity - 15) / 25 + 0.96)
                                             if status == "Charging" then
                                                if bat_prev_index == 0 or bat_prev_index == 5 then
                                                   bat_prev_index = icon_index - 1
                                                end
                                                bat_prev_index = bat_prev_index + 1
                                                icon_index = bat_prev_index
                                             end

                                             mybattery.text.markup = " <span font='MyFont' size='16.5pt' foreground='#46d9ff'>" ..
                                                bat_icons[icon_index] .. "</span> " .. capacity .. "% "
        end)
     end
  }

  myupdates.text.markup = " <span font='MyFont' size='16.5pt' foreground='#c38a48'>䂍</span> .. "
  updates_prev = 0

  gears.timer {
     timeout   = 1000,
     call_now  = true,
     autostart = true,
     callback  = function()
        awful.spawn.easy_async_with_shell("updates",
                                          function(out)
                                             if updates_prev == 0 then
                                                awful.spawn.with_shell("notify-send -u normal \"You should update soon\" \"" ..
                                                                       out:gsub("%\n", "") .. " new updates\"")
                                             end
                                             updates_prev = tonumber(out)

                                             myupdates.text.markup = " <span font='MyFont' size='16.5pt' foreground='#c38a48'>䂍</span> " ..
                                                out:gsub("%\n", "") .. " "
        end)
     end
  }

#+end_src

*** Fullscreen rule

#+begin_src lua

  client.connect_signal("property::fullscreen", function(c)
                           local s = awful.screen.focused()
                           if c.width == s.geometry.width and c.class ~= "Rofi" then
                              s.mywibox.ontop = false
                              s.tagbar.ontop = false
                           elseif c.class ~= "Rofi" then
                              s.mywibox.ontop = true
                              s.tagbar.ontop = true
                           end
  end)
#+end_src

** Misc

#+begin_src lua

  function get_client(pid)
     for _, c in ipairs(client.get()) do
        if c.pid == pid then
           return c
        end
     end
  end

  function get_lfterm_width (term_pid)
     local term_client = get_client(term_pid)
     return term_client.width
  end

  client.connect_signal('property::width', function(c)
                           awful.spawn.with_shell("lf -remote \"send recol\"")
                           if lf_terminal_centered == false then
                              for _, c in ipairs(client.get()) do
                                 if c.pid == lf_terminal_pid then
                                    local lf_client = get_client(lf_pid)
                                    c.x = lf_client.x + lf_client.width/2 - c.width/2
                                    c.y = lf_client.y + lf_client.height/2 - c.height/2
                                    break
                                 end
                              end
                           end
  end)

#+end_src

** Keybindings
*** General Awesome keys

#+begin_src lua

  -- General Awesome keys
  awful.keyboard.append_global_keybindings({
        awful.key({ modkey,           }, "s", hotkeys_popup.show_help,
           {description="show help", group="awesome"}),
        awful.key({ modkey, "Control" }, "r", awesome.restart,
           {description = "reload awesome", group = "awesome"}),
  })

#+end_src

*** Tags keybindings

#+begin_src lua

  awful.keyboard.append_global_keybindings({
        awful.key({ modkey,           }, "l", function ()
              local s = awful.screen.focused()
              local t = s.selected_tag
              if t.index == 7 then
                 s.tags[1]:view_only()
              else
                 awful.tag.viewnext()
              end
        end,
           {description = "view next tag", group = "tag"}),
        awful.key({ modkey,           }, "h", function ()
              local s = awful.screen.focused()
              local t = s.selected_tag
              if t.index == 1 then
                 s.tags[7]:view_only()
              else
                 awful.tag.viewprev()
              end
        end,
           {description = "view previous tag", group = "tag"}),
        awful.key({ modkey,           }, "n", awful.tag.history.restore,
           {description = "go back", group = "tag"}),
        awful.key {
           modifiers   = { modkey },
           keygroup    = "numrow",
           description = "only view tag",
           group       = "tag",
           on_press    = function (index)
              if index ~= 8 then
                 local screen = awful.screen.focused()
                 local tag = screen.tags[index]
                 local has_fullscreen = false

                 if tag then
                    for _, c in ipairs(tag:clients()) do
                       if c.width == screen.geometry.width and c.class ~= "Rofi" then
                          has_fullscreen = true
                          break
                       end
                    end
                    if has_fullscreen then
                       screen.mywibox.ontop = false
                       screen.tagbar.ontop = false
                    else
                       screen.mywibox.ontop = true
                       screen.tagbar.ontop = true
                    end
                    tag:view_only()
                 end
              end
           end,
        },
        awful.key {
           modifiers = { modkey, "Shift" },
           keygroup    = "numrow",
           description = "move focused client to tag",
           group       = "tag",
           on_press    = function (index)
              if index ~= 8 and client.focus then
                 local tag = client.focus.screen.tags[index]
                 if tag then
                    client.focus:move_to_tag(tag)
                 end
              end
           end,
        },
  })

#+end_src

*** Focus keybindings

#+begin_src lua

  awful.keyboard.append_global_keybindings({
        awful.key({ modkey,           }, "j",
           function ()
              awful.client.focus.byidx( 1)
           end,
           {description = "focus next by index", group = "client"}
        ),
        awful.key({ modkey,           }, "k",
           function ()
              awful.client.focus.byidx(-1)
           end,
           {description = "focus previous by index", group = "client"}
        ),
        awful.key({ modkey,           }, "Tab",
           function ()
              awful.client.focus.history.previous()
              if client.focus then
                 client.focus:raise()
              end
           end,
           {description = "go back", group = "client"}),
        awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
           {description = "focus the next screen", group = "screen"}),
        awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
           {description = "focus the previous screen", group = "screen"}),
        -- awful.key({ modkey, "Control" }, "n",
        --    function ()
        --       local c = awful.client.restore()
        --       -- Focus restored client
        --       if c then
        --          c:activate { raise = true, context = "key.unminimize" }
        --       end
        --    end,
        --    {description = "restore minimized", group = "client"}),
  })

#+end_src

*** Layout keybindings

#+begin_src lua

  awful.keyboard.append_global_keybindings({
        awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
           {description = "swap with next client by index", group = "client"}),
        awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
           {description = "swap with previous client by index", group = "client"}),
        awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
           {description = "jump to urgent client", group = "client"}),
        awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incmwfact( 0.05)          end,
           {description = "increase master width factor", group = "layout"}),
        awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incmwfact(-0.05)          end,
           {description = "decrease master width factor", group = "layout"}),
        -- awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
        --    {description = "increase the number of master clients", group = "layout"}),
        -- awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
        -- {description = "decrease the number of master clients", group = "layout"}),
        awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
           {description = "increase the number of columns", group = "layout"}),
        awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
           {description = "decrease the number of columns", group = "layout"}),
        awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
           {description = "select next", group = "layout"}),
        awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
           {description = "select previous", group = "layout"}),
  })

#+end_src

*** My keybinding

#+begin_src lua

  awful.keyboard.append_global_keybindings({
        awful.key({ "Mod1" }, "Escape", function ()
              -- If you want to always position the menu on the same place set coordinates
              awful.menu.menu_keys.down = { "Down", "Alt_L" }
              awful.menu.clients({theme = { width = 250 }}, { keygrabber=true, coords={x=525, y=330} })
        end),
        awful.key({ modkey }, "Return", function () awful.util.spawn("appsmenu") end,
           {description = "open a apps menu", group = "launcher"}),
        awful.key({ modkey }, "d", function () awful.util.spawn("appslauncher") end,
           {description = "run rofi launcher", group = "launcher"}),
        awful.key({ modkey }, "p", function() awful.util.spawn("powermenu") end,
           {description = "power menu", group = "launcher"}),
        awful.key({ modkey }, "z", function() awful.util.spawn("brightness") end,
           {description = "brightness menu", group = "launcher"}),
        awful.key({ modkey }, "x", function() awful.util.spawn("volume") end,
           {description = "volume menu", group = "launcher"}),
        awful.key({ modkey }, "w", function() awful.spawn.with_shell("feh -z --bg-fill $HOME/Pictures/wallpapers") end,
           {description = "wallpaper change", group = "launcher"}),
        awful.key({        }, "Print", function() awful.util.spawn("screenshot") end,
           {description = "take a screenshot", group = "launcher"}),
        awful.key({        }, "F11", function() awful.util.spawn("screenshot") end,
           {description = "take a screenshot", group = "launcher"}),
        awful.key({ modkey }, "`", function() toggle_terminal() end,
           {description = "toggle splash terminal", group = "launcher"}),
        awful.key({ modkey }, "b", function() toggle_firefox() end,
           {description = "toggle splash firefox", group = "launcher"}),
        awful.key({ modkey }, "m", function() toggle_splash_height() end,
           {description = "resize splash app", group = "launcher"})
  })

#+end_src

*** Mouse keybinding

#+begin_src lua

  client.connect_signal("request::default_mousebindings", function()
                           awful.mouse.append_client_mousebindings({
                                 awful.button({ }, 1, function (c)
                                       c:activate { context = "mouse_click" }
                                 end),
                                 awful.button({ modkey }, 1, function (c)
                                       c:activate { context = "mouse_click", action = "mouse_move"  }
                                 end),
                                 awful.button({ modkey }, 3, function (c)
                                       c:activate { context = "mouse_click", action = "mouse_resize"}
                                 end),
                           })
  end)

#+end_src

*** Client keybinding

#+begin_src lua

  client.connect_signal("request::default_keybindings", function()
                           awful.keyboard.append_client_keybindings({
                                 awful.key({ modkey,           }, "f",
                                    function (c)
                                       c.fullscreen = not c.fullscreen
                                       c:raise()
                                    end,
                                    {description = "toggle fullscreen", group = "client"}),
                                 awful.key({ modkey,           }, "q",
                                    function (c)
                                       if c.pid == terminal_pid then
                                          toggle_terminal()
                                       elseif c.pid ~= emacs_fm_pid
                                          and c.pid ~= terminal_blurbg_pid
                                          and c.pid ~= firefox_blurbg_pid then
                                          c:kill()
                                       end
                                    end,
                                    {description = "close", group = "client"}),
                                 awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
                                    {description = "toggle floating", group = "client"}),
                                 awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
                                    {description = "move to master", group = "client"}),
                                 awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
                                    {description = "move to screen", group = "client"}),
                                 -- awful.key({ modkey,           }, "n",
                                 --    function (c)
                                 --       -- The client currently has the input focus, so it cannot be
                                 --       -- minimized, since minimized clients can't have the focus.
                                 --       c.minimized = true
                                 --    end,
                                 --    {description = "minimize", group = "client"}),
                           })
  end)

#+end_src

** Autostart

#+begin_src lua

  awful.spawn.with_shell("lf -server")
  awful.spawn.with_shell("picom -b --experimental-backends --config $HOME/.config/picom/picom.conf")
  awful.spawn.with_shell("feh -z --bg-fill $HOME/Pictures/wallpapers")

#+end_src

* Alacritty
:PROPERTIES:
:header-args: :tangle ./.config/alacritty/alacritty.yml
:END:

Configuration for Alacritty, the GPU enhanced terminal emulator.

** COMMENT Import

Import additional configuration files

Imports are loaded in order, skipping all missing files, with the importing file being loaded last.
If a field is already present in a previous import, it will be replaced.

All imports must either be absolute paths starting with `/`, or paths relative to the user's home
directory starting with `~/`.

#+begin_src yaml

  #import:
  #  - /path/to/alacritty.yml

#+end_src

** Env

Any items in the `env` entry below will be added as environment variables. Some entries may override
variables set by alacritty itself.

#+begin_src yaml

  env:
    # TERM variable
    #
    # This value is used to set the `$TERM` environment variable for
    # each instance of Alacritty. If it is not present, alacritty will
    # check the local terminfo database and use `alacritty` if it is
    # available, otherwise `xterm-256color` is used.
    TERM: alacritty

#+end_src

** Window

#+begin_src yaml

  window:
    # Window dimensions (changes require restart)
    #
    # Number of lines/columns (not pixels) in the terminal. The number of columns
    # must be at least `2`, while using a value of `0` for columns and lines will
    # fall back to the window manager's recommended size.
    #dimensions:
    #  columns: 0
    #  lines: 0

    # Window position (changes require restart)
    #
    # Specified in number of pixels.
    # If the position is not set, the window manager will handle the placement.
    #position:
    #  x: 0
    #  y: 0

    # Window padding (changes require restart)
    #
    # Blank space added around the window in pixels. This padding is scaled
    # by DPI and the specified value is always added at both opposing sides.
    padding:
     x: 8
     y: 8

    # Spread additional padding evenly around the terminal content.
    #dynamic_padding: false

    # Window decorations
    #
    # Values for `decorations`:
    #     - full: Borders and title bar
    #     - none: Neither borders nor title bar
    #
    # Values for `decorations` (macOS only):
    #     - transparent: Title bar, transparent background and title bar buttons
    #     - buttonless: Title bar, transparent background and no title bar buttons
    #decorations: full

    # Background opacity
    #
    # Window opacity as a floating point number from `0.0` to `1.0`.
    # The value `0.0` is completely transparent and `1.0` is opaque.
    opacity: 0.85

    # Startup Mode (changes require restart)
    #
    # Values for `startup_mode`:
    #   - Windowed
    #   - Maximized
    #   - Fullscreen
    #
    # Values for `startup_mode` (macOS only):
    #   - SimpleFullscreen
    #startup_mode: Windowed

    # Window title
    #title: Alacritty

    # Allow terminal applications to change Alacritty's window title.
    #dynamic_title: true

    # Window class (Linux/BSD only):
    #class:
      # Application instance name
      #instance: Alacritty
      # General application class
      #general: Alacritty

    # GTK theme variant (Linux/BSD only)
    #
    # Override the variant of the GTK theme. Commonly supported values are `dark`
    # and `light`. Set this to `None` to use the default theme variant.
    #gtk_theme_variant: None

#+end_src

** Scrolling

#+begin_src yaml

  scrolling:
    # Maximum number of lines in the scrollback buffer.
    # Specifying '0' will disable scrolling.
    history: 10000

    # Scrolling distance multiplier.
    #multiplier: 3

#+end_src

** Font configuration

#+begin_src yaml

  font:
    normal:
      family: SauceCodePro Nerd Font
      style: Regular

    bold:
      family: SauceCodePro Nerd Font
      style: Bold

    italic:
      family: SauceCodePro Nerd Font
      style: Italic

    bold_italic:
      family: SauceCodePro Nerd Font
      style: Bold Italic

    # Point size
    size: 8.0

    # Offset is the extra space around each character. `offset.y` can be thought
    # of as modifying the line spacing, and `offset.x` as modifying the letter
    # spacing.
    offset:
      x: 0
      y: 0

    # Glyph offset determines the locations of the glyphs within their cells with
    # the default being at the bottom. Increasing `x` moves the glyph to the
    # right, increasing `y` moves the glyph upward.
    #glyph_offset:
    #  x: 0
    #  y: 0

  # If `true`, bold text is drawn using the bright color variants.
  #draw_bold_text_with_bright_colors: false

#+end_src

** Colors

#+begin_src yaml

  colors:
    # Default colors
    primary:
      # background: '#21242b'
      background: '#1c252a'
      foreground: '#bbc2cf'

      # Bright and dim foreground colors
      #
      # The dimmed foreground color is calculated automatically if it is not
      # present. If the bright foreground color is not set, or
      # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
      # color will be used.
      #dim_foreground: '#828482'
      #bright_foreground: '#eaeaea'

    # Cursor colors
    #
    # Colors which should be used to draw the terminal cursor.
    #
    # Allowed values are CellForeground and CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #cursor:
    #  text: CellBackground
    #  cursor: CellForeground

    # Vi mode cursor colors
    #
    # Colors for the cursor when the vi mode is active.
    #
    # Allowed values are CellForeground and CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #vi_mode_cursor:
    #  text: CellBackground
    #  cursor: CellForeground

    # Search colors
    #
    # Colors used for the search bar and match highlighting.
    #search:
      # Allowed values are CellForeground and CellBackground, which reference the
      # affected cell, or hexadecimal colors like #ff00ff.
      #matches:
      #  foreground: '#51afef'
      #  background: '#bbc2cf'
      #focused_match:
      #  foreground: CellBackground
      #  background: CellForeground

      #bar:
      #  background: '#c5c8c6'
      #  foreground: '#1d1f21'

    # Line indicator
    #
    # Color used for the indicator displaying the position in history during
    # search and vi mode.
    #
    # By default, these will use the opposing primary color.
    #line_indicator:
    #  foreground: None
    #  background: None

    # Selection colors
    #
    # Colors which should be used to draw the selection area.
    #
    # Allowed values are CellForeground and CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #selection:
    # text: '#bbc2cf'
    # background: '#ffffff'

    # Normal colors
    normal:
      black:   '#182024'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#d499e5'
      cyan:    '#5699af'
      white:   '#bbc2cf'

    # Bright colors
    bright:
      black:   '#7b7278'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ffaf00'
      blue:    '#51afef'
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'

    # Dim colors
    #
    # If the dim colors are not set, they will be calculated automatically based
    # on the `normal` colors.
    #dim:
    #  black:   '#131415'
    #  red:     '#864343'
    #  green:   '#777c44'
    #  yellow:  '#9e824c'
    #  blue:    '#556a7d'
    #  magenta: '#75617b'
    #  cyan:    '#5b7d78'
    #  white:   '#828482'

    # Indexed Colors
    #
    # The indexed colors include all colors from 16 to 256.
    # When these are not set, they're filled with sensible defaults.
    #
    # Example:
    #   `- { index: 16, color: '#ff00ff' }`
    #
    #indexed_colors: []

#+end_src

** COMMENT Bell

The bell is rung every time the BEL control character is received.

#+begin_src yaml

  #bell:
    # Visual Bell Animation
    #
    # Animation effect for flashing the screen when the visual bell is rung.
    #
    # Values for `animation`:
    #   - Ease
    #   - EaseOut
    #   - EaseOutSine
    #   - EaseOutQuad
    #   - EaseOutCubic
    #   - EaseOutQuart
    #   - EaseOutQuint
    #   - EaseOutExpo
    #   - EaseOutCirc
    #   - Linear
    #animation: EaseOutExpo

    # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
    # disable the visual bell animation.
    #duration: 0

    # Visual bell animation color.
    #color: '#ffffff'

    # Bell Command
    #
    # This program is executed whenever the bell is rung.
    #
    # When set to `command: None`, no command will be executed.
    #
    # Example:
    #   command:
    #     program: notify-send
    #     args: ["Hello, World!"]
    #
    #command: None

#+end_src

** COMMENT Selection

#+begin_src yaml

  #selection:
    # This string contains all characters that are used as separators for
    # "semantic words" in Alacritty.
    #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

    # When set to `true`, selected text will be copied to the primary clipboard.
    #save_to_clipboard: false

#+end_src

** COMMENT Cursor

#+begin_src yaml

  #cursor:
    # Cursor style
    #style:
      # Cursor shape
      #
      # Values for `shape`:
      #   - ▇ Block
      #   - _ Underline
      #   - | Beam
      #shape: Block

      # Cursor blinking state
      #
      # Values for `blinking`:
      #   - Never: Prevent the cursor from ever blinking
      #   - Off: Disable blinking by default
      #   - On: Enable blinking by default
      #   - Always: Force the cursor to always blink
      #blinking: Off

    # Vi mode cursor style
    #
    # If the vi mode cursor style is `None` or not specified, it will fall back to
    # the style of the active value of the normal cursor.
    #
    # See `cursor.style` for available options.
    #vi_mode_style: None

    # Cursor blinking interval in milliseconds.
    #blink_interval: 750

    # If this is `true`, the cursor will be rendered as a hollow box when the
    # window is not focused.
    #unfocused_hollow: true

    # Thickness of the cursor relative to the cell width as floating point number
    # from `0.0` to `1.0`.
    #thickness: 0.15

#+end_src

** COMMENT Live config reload

changes require restart

#+begin_src yaml

  #live_config_reload: true

#+end_src

** Shell

You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`. Entries in
`shell.args` are passed unmodified as arguments to the shell.

Default:
  - (macOS) /bin/bash --login
  - (Linux/BSD) user login shell
  - (Windows) powershell

#+begin_src yaml

  shell:
   program: /bin/zsh
  #  args:
  #    - --login

#+end_src

** COMMENT Startup directory

Directory the shell is started in. If this is unset, or `None`, the working directory of the parent
process will be used.

#+begin_src yaml

  #working_directory: None

#+end_src

** COMMENT ESC when alt is pressed

Send ESC (\x1b) before characters when alt is pressed.

#+begin_src yaml

  #alt_send_esc: true

#+end_src

** COMMENT Mouse

#+begin_src yaml

  #mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

#+end_src

** COMMENT Hide when typing

If this is `true`, the cursor is temporarily hidden when typing.

#+begin_src yaml

  #hide_when_typing: false

#+end_src

** COMMENT URL

#+begin_src yaml

  #url:
  # URL launcher
  #
  # This program is executed when clicking on a text which is recognized as a
  # URL. The URL is always added to the command as the last parameter.
  #
  # When set to `launcher: None`, URL launching will be disabled completely.
  #
  # Default:
  #   - (macOS) open
  #   - (Linux/BSD) xdg-open
  #   - (Windows) explorer
  #launcher:
  #  program: xdg-open
  #  args: []

  # URL modifiers
  #
  # These are the modifiers that need to be held down for opening URLs when
  # clicking on them. The available modifiers are documented in the key
  # binding section.
  #modifiers: None

#+end_src

** COMMENT Mouse bindings

Mouse bindings are specified as a list of objects, much like the key
bindings further below.

To trigger mouse bindings when an application running within Alacritty
captures the mouse, the `Shift` modifier is automatically added as a
requirement.

Each mouse binding will specify a:

- `mouse`:

  - Middle
  - Left
  - Right
  - Numeric identifier such as `5`

- `action` (see key bindings)

And optionally:

- `mods` (see key bindings)

#+begin_src yaml

  #mouse_bindings:
  #  - { mouse: Middle, action: PasteSelection }

#+end_src

** Key bindings

#+begin_src yaml

  # Key bindings
  #
  # Key bindings are specified as a list of objects. For example, this is the
  # default paste binding:
  #
  # `- { key: V, mods: Control|Shift, action: Paste }`
  #
  # Each key binding will specify a:
  #
  # - `key`: Identifier of the key pressed
  #
  #    - A-Z
  #    - F1-F24
  #    - Key0-Key9
  #
  #    A full list with available key codes can be found here:
  #    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
  #
  #    Instead of using the name of the keys, the `key` field also supports using
  #    the scancode of the desired key. Scancodes have to be specified as a
  #    decimal number. This command will allow you to display the hex scancodes
  #    for certain keys:
  #
  #       `showkey --scancodes`.
  #
  # Then exactly one of:
  #
  # - `chars`: Send a byte sequence to the running application
  #
  #    The `chars` field writes the specified string to the terminal. This makes
  #    it possible to pass escape sequences. To find escape codes for bindings
  #    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
  #    of tmux. Note that applications use terminfo to map escape sequences back
  #    to keys. It is therefore required to update the terminfo when changing an
  #    escape sequence.
  #
  # - `action`: Execute a predefined action
  #
  #   - ToggleViMode
  #   - SearchForward
  #       Start searching toward the right of the search origin.
  #   - SearchBackward
  #       Start searching toward the left of the search origin.
  #   - Copy
  #   - Paste
  #   - IncreaseFontSize
  #   - DecreaseFontSize
  #   - ResetFontSize
  #   - ScrollPageUp
  #   - ScrollPageDown
  #   - ScrollHalfPageUp
  #   - ScrollHalfPageDown
  #   - ScrollLineUp
  #   - ScrollLineDown
  #   - ScrollToTop
  #   - ScrollToBottom
  #   - ClearHistory
  #       Remove the terminal's scrollback history.
  #   - Hide
  #       Hide the Alacritty window.
  #   - Minimize
  #       Minimize the Alacritty window.
  #   - Quit
  #       Quit Alacritty.
  #   - ToggleFullscreen
  #   - SpawnNewInstance
  #       Spawn a new instance of Alacritty.
  #   - CreateNewWindow
  #       Create a new Alacritty window from the current process.
  #   - ClearLogNotice
  #       Clear Alacritty's UI warning and error notice.
  #   - ClearSelection
  #       Remove the active selection.
  #   - ReceiveChar
  #   - None
  #
  # - Vi mode exclusive actions:
  #
  #   - Open
  #       Perform the action of the first matching hint under the vi mode cursor
  #       with `mouse.enabled` set to `true`.
  #   - ToggleNormalSelection
  #   - ToggleLineSelection
  #   - ToggleBlockSelection
  #   - ToggleSemanticSelection
  #       Toggle semantic selection based on `selection.semantic_escape_chars`.
  #
  # - Vi mode exclusive cursor motion actions:
  #
  #   - Up
  #       One line up.
  #   - Down
  #       One line down.
  #   - Left
  #       One character left.
  #   - Right
  #       One character right.
  #   - First
  #       First column, or beginning of the line when already at the first column.
  #   - Last
  #       Last column, or beginning of the line when already at the last column.
  #   - FirstOccupied
  #       First non-empty cell in this terminal row, or first non-empty cell of
  #       the line when already at the first cell of the row.
  #   - High
  #       Top of the screen.
  #   - Middle
  #       Center of the screen.
  #   - Low
  #       Bottom of the screen.
  #   - SemanticLeft
  #       Start of the previous semantically separated word.
  #   - SemanticRight
  #       Start of the next semantically separated word.
  #   - SemanticLeftEnd
  #       End of the previous semantically separated word.
  #   - SemanticRightEnd
  #       End of the next semantically separated word.
  #   - WordLeft
  #       Start of the previous whitespace separated word.
  #   - WordRight
  #       Start of the next whitespace separated word.
  #   - WordLeftEnd
  #       End of the previous whitespace separated word.
  #   - WordRightEnd
  #       End of the next whitespace separated word.
  #   - Bracket
  #       Character matching the bracket at the cursor's location.
  #   - SearchNext
  #       Beginning of the next match.
  #   - SearchPrevious
  #       Beginning of the previous match.
  #   - SearchStart
  #       Start of the match to the left of the vi mode cursor.
  #   - SearchEnd
  #       End of the match to the right of the vi mode cursor.
  #
  # - Search mode exclusive actions:
  #   - SearchFocusNext
  #       Move the focus to the next search match.
  #   - SearchFocusPrevious
  #       Move the focus to the previous search match.
  #   - SearchConfirm
  #   - SearchCancel
  #   - SearchClear
  #       Reset the search regex.
  #   - SearchDeleteWord
  #       Delete the last word in the search regex.
  #   - SearchHistoryPrevious
  #       Go to the previous regex in the search history.
  #   - SearchHistoryNext
  #       Go to the next regex in the search history.
  #
  # - macOS exclusive actions:
  #   - ToggleSimpleFullscreen
  #       Enter fullscreen without occupying another space.
  #
  # - Linux/BSD exclusive actions:
  #
  #   - CopySelection
  #       Copy from the selection buffer.
  #   - PasteSelection
  #       Paste from the selection buffer.
  #
  # - `command`: Fork and execute a specified command plus arguments
  #
  #    The `command` field must be a map containing a `program` string and an
  #    `args` array of command line parameter strings. For example:
  #       `{ program: "alacritty", args: ["-e", "vttest"] }`
  #
  # And optionally:
  #
  # - `mods`: Key modifiers to filter binding actions
  #
  #    - Command
  #    - Control
  #    - Option
  #    - Super
  #    - Shift
  #    - Alt
  #
  #    Multiple `mods` can be combined using `|` like this:
  #       `mods: Control|Shift`.
  #    Whitespace and capitalization are relevant and must match the example.
  #
  # - `mode`: Indicate a binding for only specific terminal reported modes
  #
  #    This is mainly used to send applications the correct escape sequences
  #    when in different modes.
  #
  #    - AppCursor
  #    - AppKeypad
  #    - Search
  #    - Alt
  #    - Vi
  #
  #    A `~` operator can be used before a mode to apply the binding whenever
  #    the mode is *not* active, e.g. `~Alt`.
  #
  # Bindings are always filled by default, but will be replaced when a new
  # binding with the same triggers is defined. To unset a default binding, it can
  # be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
  # a no-op if you do not wish to receive input characters for that binding.
  #
  # If the same trigger is assigned to multiple actions, all of them are executed
  # in the order they were defined in.

  key_bindings:
  - { key: Back, mods: Shift, chars: "\x1b\x7f" }

  #- { key: Paste,                                       action: Paste          }
  #- { key: Copy,                                        action: Copy           }
  #- { key: L,         mods: Control,                    action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
  #- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Up,                          mode: Vi|~Search, action: Up                      }
  #- { key: Down,                        mode: Vi|~Search, action: Down                    }
  #- { key: Left,                        mode: Vi|~Search, action: Left                    }
  #- { key: Right,                       mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

  # Search Mode
  #- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  #- { key: Escape,                mode: Search,     action: SearchCancel          }
  #- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  #- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  #- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  #- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  #- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  #- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  #- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  #- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  #- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  #- { key: C,              mods: Control|Shift,                   action: Copy             }
  #- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
  #- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  #- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                           action: PasteSelection   }
  #- { key: Key0,           mods: Control,                         action: ResetFontSize    }
  #- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
  #- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  #- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"            }
  #- { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory     }
  #- { key: Key0,           mods: Command,                    action: ResetFontSize    }
  #- { key: Equals,         mods: Command,                    action: IncreaseFontSize }
  #- { key: Plus,           mods: Command,                    action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize }
  #- { key: Minus,          mods: Command,                    action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize }
  #- { key: V,              mods: Command,                    action: Paste            }
  #- { key: C,              mods: Command,                    action: Copy             }
  #- { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection   }
  #- { key: H,              mods: Command,                    action: Hide             }
  #- { key: M,              mods: Command,                    action: Minimize         }
  #- { key: Q,              mods: Command,                    action: Quit             }
  #- { key: W,              mods: Command,                    action: Quit             }
  #- { key: N,              mods: Command,                    action: SpawnNewInstance }
  #- { key: F,              mods: Command|Control,            action: ToggleFullscreen }
  #- { key: F,              mods: Command, mode: ~Search,     action: SearchForward    }
  #- { key: B,              mods: Command, mode: ~Search,     action: SearchBackward   }

#+end_src

** COMMENT Debug

#+begin_src yaml

  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

#+end_src

* lf
** Scripts
:PROPERTIES:
:header-args: :tangle-mode (identity #o755)
:END:

*** Cleaner

#+begin_src sh :tangle ./.config/lf/scripts/lf_cleaner

  #!/bin/sh

  if [ -n "$FIFO_UEBERZUG" ]; then
      printf '{"action": "remove", "identifier": "preview"}\n' >"$FIFO_UEBERZUG"
  fi

#+end_src

*** Disk

#+begin_src sh :tangle ./.config/lf/scripts/lf_disk

  #!/bin/sh

  disk=$(df --output=source "$1" | tail -n 1 | grep /dev/)
  [ "$disk" = "" ] && disk=/

  IFS=" " read -ra disk_info <<< "$(df -P -BK ${disk} | tail -n 1)"

  size=$(echo "${disk_info[1]}" | sed 's|[^[:digit:]]\+||g')
  used=$(echo "${disk_info[2]}" | sed 's|[^[:digit:]]\+||g')

  size_m=$(printf '%.1f' "$(echo "scale=1; $size/1024" | bc)")
  used_m=$(printf '%.1f' "$(echo "scale=1; $used/1024" | bc)")

  size_g=$(printf '%.1f' "$(echo "scale=1; x=$size_m; if (x>1024) x=x/1024; x" | bc)")
  used_g=$(printf '%.1f' "$(echo "scale=1; x=$used_m; if (x>1024) x=x/1024; x" | bc)")

  if [ "$size_m" = "$size_g" ]
  then
      size=$(echo "${size_m}M")
  else
      size=$(echo "${size_g}G")
  fi

  if [ "$used_m" = "$used_g" ]
  then
      used=$(echo "${used_m}M")
  else
      used=$(echo "${used_g}G")
  fi

  echo "\
  \033[35;5;5m\033[3;1m${used}\
  \033[38;5;8m/\
  \033[35;5;5m\033[3;1m${size}\033[0m"

#+end_src

*** Prepare file

#+begin_src sh :tangle ./.config/lf/scripts/lf_prepare_file

  #!/bin/sh

  if [ $(stat --printf="%s" $1) -eq 0 ]
  then
      echo "" > $1
  else
      sed -i "1s|^|\n|" $1
  fi

#+end_src

*** Previewer

#+begin_src sh :tangle ./.config/lf/scripts/lf_previewer

  #!/bin/sh

  draw() {
      path="$(printf '%s' "$1" | sed 's/\\/\\\\/g;s/"/\\"/g')"
      printf '{"action": "add", "identifier": "preview", "x": %d, "y": %d, "width": %d, "height": %d, "scaler": "contain", "scaling_position_x": 0.5, "scaling_position_y": 0.5, "path": "%s"}\n' \
             "$x" "$y" "$width" "$height" "$path" >"$FIFO_UEBERZUG"
      exit 1
  }

  hash() {
      printf '%s/.cache/lf/%s' "$HOME" \
             "$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}')"
  }

  cache() {
      if [ -f "$1" ]; then
          draw "$1"
      fi
  }

  batorcat() {
      file="$1"
      shift
      if command -v bat > /dev/null 2>&1
      then
          bat --color=always --style=plain --pager=never "$file" "$@"
      else
          cat "$file"
      fi
  }

  if ! [ -f "$1" ] && ! [ -h "$1" ]; then
      exit
  fi

  width="$(($2-1))"
  height="$(($3-1))"
  x="$4"
  y="$5"

  default_x="1920"
  default_y="1080"

  case "$1" in
      ,*.7z|*.a|*.ace|*.alz|*.arc|*.arj|*.bz|*.bz2|*.cab|*.cpio|*.deb|*.gz|*.jar|\
          ,*.lha|*.lrz|*.lz|*.lzh|*.lzma|*.lzo|*.rar|*.rpm|*.rz|*.t7z|*.tar|*.tbz|\
          ,*.tbz2|*.tgz|*.tlz|*.txz|*.tZ|*.tzo|*.war|*.xz|*.Z|*.zip)
          als -- "$1"
          exit 0
          ;;
      ,*.[1-8])
          man -- "$1" | col -b
          exit 0
          ;;
      ,*.pdf)
          if [ -n "$FIFO_UEBERZUG" ]; then
              cache="$(hash "$1")"
              cache "$cache.jpg"
              pdftoppm -f 1 -l 1 \
                       -scale-to-x "$default_x" \
                       -scale-to-y -1 \
                       -singlefile \
                       -jpeg \
                       -- "$1" "$cache"
              draw "$cache.jpg"
          else
              pdftotext -nopgbrk -q -- "$1" -
              exit 0
          fi
          ;;
      ,*.djvu|*.djv)
          if [ -n "$FIFO_UEBERZUG" ]; then
              cache="$(hash "$1").tiff"
              cache "$cache"
              ddjvu -format=tiff -quality=90 -page=1 -size="${default_x}x${default_y}" \
                    - "$cache" <"$1"
              draw "$cache"
          else
              djvutxt - <"$1"
              exit 0
          fi
          ;;
      ,*.docx|*.odt|*.epub)
          pandoc -s -t plain -- "$1"
          exit 0
          ;;
      ,*.htm|*.html|*.xhtml)
          lynx -dump -- "$1"
          exit 0
          ;;
      ,*.svg)
          if [ -n "$FIFO_UEBERZUG" ]; then
              cache="$(hash "$1").jpg"
              cache "$cache"
              convert -- "$1" "$cache"
              draw "$cache"
          fi
          ;;
  esac

  case "$(file -Lb --mime-type -- "$1")" in
      text/*|application/*)
          #highlight -q -O ansi -- "$1" || cat -- "$1"
          # pygmentize -f terminal -- "$1" || cat -- "$1"
          batorcat "$1"
          exit 0
          ;;
      image/*)
          if [ -n "$FIFO_UEBERZUG" ]; then
              orientation="$(identify -format '%[EXIF:Orientation]\n' -- "$1")"
              if [ -n "$orientation" ] && [ "$orientation" != 1 ]; then
                  cache="$(hash "$1").jpg"
                  cache "$cache"
                  convert -- "$1" -auto-orient "$cache"
                  draw "$cache"
              else
                  draw "$1"
              fi
          fi
          ;;
      video/*)
          if [ -n "$FIFO_UEBERZUG" ]; then
              cache="$(hash "$1").jpg"
              cache "$cache"
              ffmpegthumbnailer -i "$1" -o "$cache" -s 0
              draw "$cache"
          fi
          ;;
  esac

  header_text="File Type Classification"
  header=""
  len="$(( (width - (${#header_text} + 2)) / 2 ))"
  if [ "$len" -gt 0 ]; then
      for i in $(seq "$len"); do
          header="-$header"
      done
      header="$header $header_text "
      for i in $(seq "$len"); do
          header="$header-"
      done
  else
      header="$header_text"
  fi
  printf '\033[7m%s\033[0m\n' "$header"
  file -Lb -- "$1" | fold -s -w "$width"
  exit 0

#+end_src

*** Update

#+begin_src sh :tangle ./.config/lf/scripts/lf_update

  #!/bin/sh

  disk_info=$(lf_disk "$1")

  lf -remote "send $2 set promptfmt \"\
   \033[38;5;8m[\033[0m\
  \033[34;1m%u\033[0m\
  \033[38;5;8m]─[\033[0m\
  \033[38;5;11m\033[3;1m%h\033[0m\
  \033[38;5;8m]─[\033[0m\
  $disk_info\
  \033[38;5;8m]─[\033[0m\
  \033[32;1m%d\033[0m\
  \033[3;1m%f\033[0m\
  \033[38;5;8m]\033[0m\""

#+end_src

*** lfrun

#+begin_src sh :tangle ./.config/lf/scripts/lfrun

  #!/bin/sh

  set -e

  if [ -n "$DISPLAY" ]; then
      export FIFO_UEBERZUG="${TMPDIR:-/tmp}/lf-ueberzug-$$"

      cleanup() {
          exec 3>&-
          rm "$FIFO_UEBERZUG"
      }

      mkfifo "$FIFO_UEBERZUG"
      ueberzug layer -s <"$FIFO_UEBERZUG" &
      exec 3>"$FIFO_UEBERZUG"
      trap cleanup EXIT

      if ! [ -d "$HOME/.cache/lf" ]; then
          mkdir -p "$HOME/.cache/lf"
      fi

      lf "$@" 3>&-
  else
      exec "$@"
  fi

#+end_src

*** Get pid

#+begin_src sh :tangle ./.config/lf/scripts/lf_getpid

  #!/bin/sh

  pid=$1
  while [[ "$(ps -q $pid -o comm=)" != "alacritty" ]]
  do
      pid="$(ps -o ppid= -p $pid)"
  done

  echo -n $pid

#+end_src

*** Trash restore

#+begin_src sh :tangle ./.config/lf/scripts/lf_trash_restore

  #!/bin/sh

  tmp_file=$2
  path=$(echo -en "$1" | fzf --reverse --bind tab:down --bind btab:up)
  if [ "$path" != "" ]; then
      echo -n $path > $tmp_file;
  else
      echo -n cancel > $tmp_file;
  fi

#+end_src

*** Jump_prev

#+begin_src sh :tangle ./.config/lf/scripts/lf_jump_prev

  #!/bin/sh

  tmp_file=$1
  export _ZO_FZF_OPTS="--height 100%\
                       --reverse\
                       --no-sort\
                       --bind tab:down\
                       --bind btab:up\
                       --preview-window right:35%\
                       --preview=\"ls -1A {2..}\""
  path=$(zoxide query -i)
  if [ "$path" != "" ]; then
      echo -n $path > $tmp_file
  else
      echo -n cancel > $tmp_file
  fi

#+end_src

** icons

#+begin_src conf :tangle ./.config/lf/icons

  # file types (with matching order)
  ln                   䀺      # LINK
  or                   䀺      # ORPHAN
  tw                   䀳      # STICKY_OTHER_WRITABLE
  ow                   䀳      # OTHER_WRITABLE
  st                   䀳      # STICKY
  di                   䀳      # DIR
  pi                   䀵      # FIFO
  so                   䀵      # SOCK
  bd                   b       # BLK
  cd                   c       # CHR
  su                   u       # SETUID
  sg                   g       # SETGID
  ex                   䀶      # EXEC
  fi                   䀵      # FILE

  # comming soon
  # *.nix              
  # *.diff             
  # *.rss              
  # *.gitlab-ci.yml    

  # file extensions for programming languages
  ,*.asm                䁇
  ,*.nasm               䁇
  ,*.b                  䁉
  ,*.c                  䁊
  ,*.cc                 䁋
  ,*.cp                 䁋
  ,*.c++                䁋
  ,*.cxx                䁋
  ,*.cpp                䁋
  ,*.h                  䁌
  ,*.hh                 䁍
  ,*.hp                 䁍
  ,*.h++                䁍
  ,*.hxx                䁍
  ,*.hpp                䁍
  ,*.clj                䁎
  ,*.cljc               䁎
  ,*.cljs               䁎
  ,*.cmake              䁏
  ,*.conf               䁁
  ,*.ini                䁁
  ,*.coffee             䁐
  ,*.cs                 䁑
  ,*.css                䁒
  ,*.d                  䁕
  ,*.dart               䁔
  ,*.db                 䁖
  ,*.dockerfile         䁘
  ,*.gitignore          䁢
  ,*.ex                 䁚
  ,*.eex                䁚
  ,*.exs                䁚
  ,*.leex               䁚
  ,*.heex               䁚
  ,*.el                 䁙
  ,*.elc                䁙
  ,*.elm                䁛
  ,*.erl                䁜
  ,*.fs                 䁡
  ,*.fsx                䁡
  ,*.fsi                䁡
  ,*.fsscript           䁡
  ,*.go                 䁣
  ,*.hs                 䁤
  ,*.lhs                䁤
  ,*.htm                䁓
  ,*.html               䁓
  ,*.ino                䁆
  ,*.java               䁦
  ,*.jl                 䁪
  ,*.js                 䁧
  ,*.mjs                䁧
  ,*.jsx                䁩
  ,*.tsx                䁩
  ,*.json               䁨
  ,*.kt                 䁬
  ,*.kts                䁬
  ,*.less               䁒
  ,*.lua                䁮
  ,*.md                 䁰
  ,*.mdx                䁰
  ,*.rmd                䁰
  ,*.markdown           䁰
  ,*.org                䁲
  ,*.pl                 䁴
  ,*.pm                 䁴
  ,*.t                  䁴
  ,*.php                䁵
  ,*.py                 䁶
  ,*.pyc                䁶
  ,*.rb                 䁷
  ,*.ru                 䁷
  ,*.gemspec            䁷
  ,*.rake               䁷
  ,*.rs                 䁸
  ,*.S                  䁇
  ,*.s                  䁇
  ,*.scala              䁹
  ,*.sql                䁖
  ,*.sqlite             䁖
  ,*.swift              䁻
  ,*.tex                䁽
  ,*.torrent            䁿
  ,*.ts                 䂀
  ,*.vim                䂁
  ,*.vimrc              䂁
  ,*._vimrc             䂁
  ,*.viminfo            䂁
  ,*.gimrc              䂁
  ,*._gimrc             䂁
  ,*.xml                䂂
  ,*.yml                䂃
  ,*.yaml               䂃
  ,*.cmd                䀶
  ,*.ps1                䀶
  ,*.sh                 䀶
  ,*.bash               䀶
  ,*.zsh                䀶
  ,*.fish               䀶
  ,*.bat                䀶
  ,*.zshrc              䀶
  ,*.zprofile           䀶
  ,*.zshenv             䀶
  ,*.bashrc             䀶
  ,*.bash_logout        䀶
  ,*.bash_profile       䀶
  ,*.profile            䀶
  ,*.xinitrc            䀶
  ,*.xprofile           䀶
  ,*.mk                 䁯
  ,*.TODO               䁾
  ,*.todo               䁾

  # file names
  .gitconfig*          䁢
  .gitattributes*      䁢
  Makefile*            䁯
  makefile*            䁯
  Rakefile*            䁷
  rakefile*            䁷
  README*              䁰
  readme*              䁰
  CMakeLists.txt*      䁏
  cmakelists.txt*      䁏
  TAGS*                䁼
  TODO*                䁾
  LICENSE*             䁭
  license*             䁭
  Dockerfile*          䁘
  dockerfile*          䁘
  Docker-compose.yml*  䁘
  docker-compose.yml*  䁘
  vimrc*               䂁
  gvimrc*              䂁

  # archives or compressed
  ,*.tar                䀿
  ,*.tgz                䀿
  ,*.arc                䀿
  ,*.arj                䀿
  ,*.taz                䀿
  ,*.lha                䀿
  ,*.lz4                䀿
  ,*.lzh                䀿
  ,*.lzma               䀿
  ,*.tlz                䀿
  ,*.txz                䀿
  ,*.tzo                䀿
  ,*.t7z                䀿
  ,*.zip                䀿
  ,*.z                  䀿
  ,*.dz                 䀿
  ,*.gz                 䀿
  ,*.lrz                䀿
  ,*.lz                 䀿
  ,*.lzo                䀿
  ,*.xz                 䀿
  ,*.zst                䀿
  ,*.tzst               䀿
  ,*.bz2                䀿
  ,*.bz                 䀿
  ,*.tbz                䀿
  ,*.tbz2               䀿
  ,*.tz                 䀿
  ,*.deb                䀿
  ,*.rpm                䀿
  ,*.jar                䀿
  ,*.war                䀿
  ,*.ear                䀿
  ,*.sar                䀿
  ,*.rar                䀿
  ,*.alz                䀿
  ,*.ace                䀿
  ,*.zoo                䀿
  ,*.cpio               䀿
  ,*.7z                 䀿
  ,*.rz                 䀿
  ,*.cab                䀿
  ,*.wim                䀿
  ,*.swm                䀿
  ,*.dwm                䀿
  ,*.esd                䀿

  # image formats
  ,*.jpg                䀷
  ,*.jpeg               䀷
  ,*.mjpg               䀷
  ,*.mjpeg              䀷
  ,*.ico                䀷
  ,*.gif                䀷
  ,*.bmp                䀷
  ,*.pbm                䀷
  ,*.pgm                䀷
  ,*.ppm                䀷
  ,*.tga                䀷
  ,*.xbm                䀷
  ,*.xpm                䀷
  ,*.tif                䀷
  ,*.tiff               䀷
  ,*.png                䀷
  ,*.svg                䀷
  ,*.svgz               䀷
  ,*.mng                䀷
  ,*.pcx                䀷
  ,*.xcf                䀷
  ,*.xwd                䀷
  ,*.cgm                䀷
  ,*.emf                䀷
  ,*.bmp                䀷
  ,*.webp               䀷

  # audio formats
  ,*.mp3                䀹
  ,*.aac                䀹
  ,*.m4a                䀹
  ,*.oga                䀹
  ,*.spx                䀹
  ,*.au                 䀹
  ,*.wav                䀹
  ,*.opus               䀹
  ,*.ra                 䀹
  ,*.flac               䀹
  ,*.mid                䀹
  ,*.midi               䀹
  ,*.mka                䀹
  ,*.mpc                䀹
  ,*.xspf               䀹

  # video formats
  ,*.mp4                䀸
  ,*.webm               䀸
  ,*.mkv                䀸
  ,*.flv                䀸
  ,*.vob                䀸
  ,*.ogv                䀸
  ,*.ogm                䀸
  ,*.gifv               䀸
  ,*.mpg                䀸
  ,*.mpeg               䀸
  ,*.mp4v               䀸
  ,*.wmv                䀸
  ,*.qt                 䀸
  ,*.yuv                䀸
  ,*.rm                 䀸
  ,*.rmvb               䀸
  ,*.viv                䀸
  ,*.asf                䀸
  ,*.m4v                䀸
  ,*.avi                䀸
  ,*.mov                䀸
  ,*.m2v                䀸
  ,*.nuv                䀸
  ,*.flc                䀸
  ,*.fli                䀸
  ,*.gl                 䀸
  ,*.ogx                䀸

  # other formats
  ,*.pdf                䀻
  ,*.djvu               䁈
  ,*.ttf                䁠
  ,*.ttc                䁠
  ,*.otf                䁠
  ,*.woff               䁠
  ,*.o                  䁀
  ,*.obj                䁀
  ,*.exe                䁀
  ,*.bin                䁀
  ,*.elf                䁀
  ,*.log                䁂
  ,*.ods                䁃
  ,*.doc                䁞
  ,*.docx               䁞
  ,*.odt                䁞
  ,*.xls                䁝
  ,*.xlsx               䁝
  ,*.ppt                䁟
  ,*.pptx               䁟
  ,*.iso                䁥
  ,*.pem                䁫
  ,*.key                䁫

#+end_src

** lf configuration
:PROPERTIES:
:header-args: :tangle ./.config/lf/lfrc 
:END:

*** Options

#+begin_src conf

  set icons true
  set hidden true
  set drawbox true
  set preview true
  set info size
  set dircounts on
  set timefmt " Jan _2 2006 15:04:05"
  set tabstop 4
  set period 1
  set promptfmt ""
  set errorfmt "\033[38;5;1m error: \033[0m%s"
  set shell 'sh'
  set shellopts '-eu'
  set ifs "\n"
  set scrolloff 10
  set previewer ~/.config/lf/scripts/lf_previewer
  set cleaner ~/.config/lf/scripts/lf_cleaner

#+end_src

*** Custom functions

#+begin_src conf

  %{{
      touch /tmp/lfundo_$id
      lf_update . $id
      lf -remote "send $id recol"
  }}

  cmd recol &{{
      term_pid="$(lf_getpid $id)"
      w=$(awesome-client "return get_lfterm_width($term_pid)" | awk '{print $2}')
      if [ $w -le 1000 ]
      then
          lf -remote "send $id set ratios 2:3"
      else
          lf -remote "send $id set ratios 1:2:3"
      fi
  }}

  cmd my_open %{{
      case $(file --mime-type $f -b) in
          text/* | inode/x-empty)
              lf -remote "send $id push e" ;;
          inode/directory)
              fix_f="$(echo $f | sed 's/\ /\\\ /g')"
              lf -remote "send $id my_cd $fix_f" ;;
          inode/symlink)
              if [ -d "$f" ]
              then
                  fix_f="$(echo $f | sed 's/\ /\\\ /g')"
                  lf -remote "send $id my_cd $fix_f"
              else
                  lf -remote "send $id push e"
              fi
              ;;
          application/pdf | image/vnd.djvu)
              evince $f ;;
          font/sfnt)
              font-manager $f ;;
          ,*)
              for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done ;;
      esac
  }}

  cmd my_cd &{{
      FILE="/tmp/lfundo_$id"
      lf_prepare_file $FILE

      sed -i "1s|^|$PWD\n|" $FILE
      sed -i "1s|^|cd\n|" $FILE

      fix_f="$(echo $1 | sed 's/\ /\\\ /g')"
      eval zoxide add $fix_f
      lf -remote "send $id cd $fix_f"
      lf_update $1 $id
  }}

  cmd my_updir %{{
      FILE="/tmp/lfundo_$id"
      lf_prepare_file $FILE

      sed -i "1s|^|$PWD\n|" $FILE
      sed -i "1s|^|cd\n|" $FILE

      lf -remote "send $id updir"
      lf_update "$(dirname $PWD)" $id
  }}

  cmd mkdir &{{
      dir_name=$(input "Dir name")
      while [ -e $dir_name ] && [ "$dir_name" != "" ]
      do
          errormsg "directory exists"
          dir_name=$(input "Dir name")
      done

      if [ "$dir_name" != "" ]
      then
          mkdir $dir_name
          lf -remote "send $id load"
      fi
  }}

  cmd mkfile &{{
      file_name=$(input "File name")
      while [ -e $file_name ] && [ "$file_name" != "" ]
      do
          errormsg "file exists"
          file_name=$(input "File name")
      done

      if [ "$file_name" != "" ]
      then
          touch $file_name
          lf -remote "send $id load"
      fi
  }}

  cmd my_rename &{{
      FILE="/tmp/lfundo_$id"
      lf_prepare_file $FILE

      echo "${f##*/}" | xclip -selection clipboard

      new_name=$(input "New name")
      while [ -e $new_name ] && [ "$new_name" != "" ]
      do
          errormsg "file exists"
          new_name=$(input "New name")
      done

      if [ "$new_name" != "" ]
      then
          mv $f $new_name
          sed -i "1s|^|$f\n|" $FILE
          sed -i "1s|^|$(dirname $f)/$new_name\n|" $FILE
          sed -i "1s|^|name_restore\n|" $FILE
          lf -remote "send $id load"
      fi
  }}

  cmd my_paste &{{
      set -- $(cat ~/.local/share/lf/files)
      mode="$1"
      shift
      has_dir=0
      output=$(timeout 0.2 du -acb "$@" || echo "toobig")
      total_size=$(echo "$output" | tail -n 1 | awk '{print $1}')
      total_files=$(echo "$output" | wc -l)

      if [[ "$total_size" = "toobig" ]] ||
         [[ $total_size -ge 314572800 ]] ||
         [[ $total_files -ge 2500 && $total_size -ge 52428800 ]]
      then
          files="$@"
          term_pid=$(lf_getpid $id)
          if [ "$mode" = "move" ]
          then
              awesome-client "create_lf_terminal(\"cd $PWD;\
                                                   vcp -cRH $files .;\
                                                   rm -rf $files;\
                                                   lf -remote \\\"send reload\\\"\",\
                                                   800, 400, false, $term_pid)"
          else
              awesome-client "create_lf_terminal(\"cd $PWD;\
                                                   vcp -cRH $files .;\
                                                   lf -remote \\\"send reload\\\"\",\
                                                   800, 400, false, $term_pid)"
          fi
      else
          for file in "$@"
          do
              [ -d "$file" ] && has_dir=1

              name=$(basename $file)
              while [ -e ./$name ]
              do
                  name=$name"_"
              done

              cp -r $file ./$name
          done

          if [ "$mode" = "move" ]
          then
              rm -rf "$files"
          fi
      fi

      rm ~/.local/share/lf/files
      lf -remote "send clear"
      [[ $has_dir -eq 1 ]] && lf -remote "send reload"
  }}

  cmd undo &{{
      FILE="/tmp/lfundo_$id"
      command="$(head -n 1 $FILE)"
      sed -i '1d' $FILE

      if [ "$command" = "trash_restore" ]
      then
          rip --graveyard $TPATH -u
          while read line;
          do
              [[ -z "$line" ]] && break
              rip --graveyard $TPATH -u
              sed -i '1d' $FILE
          done < $FILE
      elif [ "$command" = "name_restore" ]
      then
          mv $(head -n 2 $FILE)
          sed -i '2d' $FILE
      elif [ "$command" = "cd" ]
      then
          lf -remote "send $id cd $(head -n 1 $FILE)"
          sed -i '1d' $FILE
      fi

      sed -i '1d' $FILE
      lf -remote "send $id load"
  }}

  cmd chmod &{{
      for file in $fx
      do
          chmod $1 $file
      done
      lf -remote "send $id reload"
  }}

  cmd trash &{{
      FILE="/tmp/lfundo_$id"
      lf_prepare_file $FILE

      for file in $fx
      do
          rip --graveyard $TPATH $file
          sed -i "1s|^|trash_restore\n|" $FILE
      done

      lf -remote "send $id load"
  }}

  cmd trash_restore &{{
      tmp_file=$(mktemp)
      term_pid=$(lf_getpid $id)
      lines="$(cat $TPATH/.record)"
      res=""

      for line in $lines
      do
          file=$(echo "$line" | awk 'BEGIN{FS="\t"} {print $3}' | sed "s|$TPATH||g")
          res="$res$file\n"
      done
      awesome-client "create_lf_terminal(\"lf_trash_restore \\\"$res\\\" $tmp_file\",\
                                         800, 400, false, $term_pid)"
      while ! [ -s $tmp_file ]; do sleep 0.1; done

      path=$(cat $tmp_file)
      if [ "$path" != "cancel" ]
      then
          rip --graveyard $TPATH -u "$TPATH$path"
          lf -remote "send load"
      fi
  }}

  cmd trash_empty ${{
      rm -rf $TPATH/*
      echo -n "" > $TPATH/.record
      lf -remote "send load"
  }}

  cmd fzf_jump ${{
      path="$(find -L . \( -path '*/\*' -o -fstype 'dev' -o -fstype 'proc' \) -prune \
          -o -print 2> /dev/null | sed 1d | cut -b3- | fzf --reverse +m -e --preview='ls -1A {}')"
      if [ "$path" != "" ]
      then
          if [ -d "$path" ]
          then
              lf -remote "send $id my_cd $path"
          else
              lf -remote "send $id select $path"
          fi
      fi
  }}

  cmd fzf_jump_prev &{{
      tmp_file=$(mktemp)
      awesome-client "create_lf_terminal(\"lf_jump_prev $tmp_file\", 1100, 600, true, nil)"
      while ! [ -s $tmp_file ]; do sleep 0.1; done
      path="$(cat $tmp_file)"
      [ "$path" != "cancel" ] && lf -remote "send $id my_cd $path"
  }}

  cmd my_search %{{
      path=$(filesearch $PWD)
      if [ -d $path ]
      then
          lf -remote "send $id my_cd $path"
      else
          lf -remote "send $id select $path"
      fi
  }}

  cmd goto_config %{{
      path=$(filesearch ~/.config)
      if [ -d $path ]
      then
          lf -remote "send $id my_cd $path"
      else
          lf -remote "send $id select $path"
      fi
  }}

  cmd git_clone &{{
      link=$(longinput "Link")
      term_pid=$(lf_getpid $id)
      if [ "$link" != "" ]
      then
          awesome-client "create_lf_terminal(\"cd $PWD;\
                                               git clone $link;\
                                               printf \\\"%s \\\" \\\"Press enter to continue\\\";\
                                               read ans\",\
                                               900, 210, false, $term_pid)"
      fi
  }}

  cmd chng_layout %{{
      xdotool key Mode_switch
      lf -remote "send $id push $1"
  }}

  cmd my_quit ${{
      rm /tmp/lfundo_$id
      lf -remote "send $id quit"
  }}

  cmd select_for_emacs ${{
      rm /tmp/lfundo_$id
      echo "test" > /tmp/testfile
      if [ "$f" = "" ]
      then
          echo -n "cancel" > ~/.cache/emacs/path
      else
          echo -n $f > ~/.cache/emacs/path
      fi
      lf -remote "send $id quit"
  }}

  cmd quit_for_emacs ${{
      rm /tmp/lfundo_$id
      echo -n "cancel" > ~/.cache/emacs/path
      lf -remote "send $id quit"
  }}

#+end_src

*** Keybindings

#+begin_src conf

  # Remove some defaults
  map m
  map c
  map d
  map t
  map f
  map x

  # basic
  map q my_quit
  map l my_open
  map h my_updir
  map r recol
  map / my_search

  # select/unselect everything
  map a glob-select *
  map <esc> :clear; unselect

  # see hidden files
  map . :set hidden!

  # movement
  map gh my_cd ~
  map gc goto_config
  map gp my_cd ~/Pictures
  map gd my_cd ~/Documents
  map gD my_cd ~/Downloads
  map g/ my_cd /
  map gt my_cd /tmp
  map ge my_cd /etc
  map gm my_cd /run/media
  map gM my_cd /mnt
  map gu my_cd /usr
  map gv my_cd /var

  # chmod
  map +x chmod +x
  map +w chmod +w
  map +r chmod +r
  map -x chmod -x
  map -w chmod -w
  map -r chmod -r

  # file operations
  map md mkdir
  map mf mkfile
  map cw my_rename
  map p my_paste
  map s cut
  map d trash
  map D delete
  map u undo
  map tr trash_restore
  map te trash_empty
  map i git_clone

  # execute current file (must be executable)
  map x !$f
  map X $$f

  # find files
  map fd fzf_jump_prev
  map cd fzf_jump
  map fg :cd /; fzf_jump

  # Automatic switchover of the Russian layout
  map а chng_layout f
  map б chng_layout ,
  map в chng_layout d
  map г chng_layout u
  map д chng_layout l
  map е chng_layout t
  map ё chng_layout `
  map ж chng_layout ;
  map з chng_layout p
  map и chng_layout b
  map й chng_layout q
  map к chng_layout r
  map л chng_layout k
  map м chng_layout v
  map н chng_layout y
  map о chng_layout j
  map п chng_layout g
  map р chng_layout h
  map с chng_layout c
  map т chng_layout n
  map у chng_layout e
  map ф chng_layout a
  map х chng_layout x
  map ц chng_layout w
  map ч chng_layout x
  map ш chng_layout i
  map щ chng_layout o
  map ъ chng_layout ]
  map ы chng_layout s
  map ь chng_layout m
  map э chng_layout '
  map ю chng_layout .
  map я chng_layout m

#+end_src

* Neovim
** init.vim
:PROPERTIES:
:header-args: :tangle ./.config/nvim/init.vim
:END:

*** Plugins

#+begin_src vimrc

  call plug#begin('~/.config/nvim/bundle')

  Plug 'jiangmiao/auto-pairs'
  Plug 'easymotion/vim-easymotion'
  Plug '907th/vim-auto-save'
  Plug 'ryanoasis/vim-devicons'
  Plug 'ap/vim-css-color'
  Plug 'preservim/nerdcommenter'
  Plug 'lambdalisue/suda.vim'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'lyokha/vim-xkbswitch'

  Plug 'joshdick/onedark.vim'
  Plug 'itchyny/lightline.vim'

  Plug 'preservim/nerdtree', { 'on' : 'NERDTreeToggle' }
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'airblade/vim-rooter'

  Plug 'lervag/vimtex'
  Plug 'sirver/ultisnips'
  Plug 'KeitaNakamura/tex-conceal.vim', { 'for' : 'tex' }
  Plug 'Konfekt/FastFold'

  " Plug 'skywind3000/asyncrun.vim'

  call plug#end()

#+end_src

*** Basic configuration

#+begin_src vimrc

  set tabstop=4
  set shiftwidth=4
  set smartindent
  set expandtab

  set number
  set wildmenu
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase
  set cursorline

  filetype plugin indent on
  set encoding=utf-8
  syntax on

  " Turn backup off, since most stuff is in SVN, git etc. anyway...
  set nobackup
  set nowb
  set noswapfile

  set so=7
  set nowrap

  set showcmd

  "Autosave
  let g:auto_save = 1
  let g:auto_save_silent = 1

  "Отображение пробелов и табуляции
  set list
  set listchars=tab:→\ ,space:·

  autocmd FileType * setlocal formatoptions-=o

  " .rasi syntax highlighting
  au BufNewFile,BufRead /*.rasi setf css
  au BufNewFile,BufRead /*.fish setf bash

  " set spell
  " set spelllang=en_us,ru_ru
  " inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

  " Russian keymap
  " au VimEnter * set keymap=russian-jcukenwin
  " set iminsert=0
  " set imsearch=0

  set timeoutlen=200

#+end_src

*** Keybinding

#+begin_src vimrc

  let g:mapleader=' '

  nnoremap U <C-r>
  nnoremap <C-r> U

  nnoremap n N
  nnoremap N n

  imap jj <Esc>
  imap оо <Esc>

  "Switching between splits.
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l

  "split creation
  nmap <Leader>l <C-w>v<C-w>l:Files<CR>
  nmap <Leader>j <C-w>s<C-w>j:Files<CR>

  nmap dA d$
  nmap dI d0

  map J }
  map K {
  map L w
  map H b

  "Copy/Paste to clipboard
  map <C-c> "+y
  map <C-p> "+P

  "exit and close
  map <Leader>q :q<CR>
  map <C-x><C-c> :qa<CR>

  "vim-plug
  map <Leader>pi :source $HOME/.config/nvim/init.vim<CR>:PlugInstall<CR>
  map <Leader>pd :source $HOME/.config/nvim/init.vim<CR>:PlugClean<CR>

  "Easy motion
  map /        <Plug>(easymotion-overwin-f2)
  map <Space>w <Plug>(esymotion-bd-w)

  "suda.vim
  command! W execute 'SudaWrite' <bar> edit!

  " set g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`"}

#+end_src

*** COMMENT From amix/vimrc

#+begin_src vimrc

  " vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
  " vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

  " Useful mappings for managing tabs
  map <leader>tn :tabnew<cr>
  map <leader>to :tabonly<cr>
  map <leader>tc :tabclose<cr>
  map <leader>tm :tabmove
  map <leader>t<leader> :tabnext

  " Let 'tl' toggle between this and the last accessed tab
  let g:lasttab = 1
  nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
  au TabLeave * let g:lasttab = tabpagenr()

  " Don't close window, when deleting a buffer
  " command! Bclose call <SID>BufcloseCloseIt()
  " function! <SID>BufcloseCloseIt()
      " let l:currentBufNum = bufnr("%")
      " let l:alternateBufNum = bufnr("#")

      " if buflisted(l:alternateBufNum)



          " buffer #
      " else
          " bnext
      " endif

      " if bufnr("%") == l:currentBufNum
          " new
      " endif

      " if buflisted(l:currentBufNum)
          " execute("bdelete! ".l:currentBufNum)
      " endif
  " endfunction

  " function! CmdLine(str)
      " call feedkeys(":" . a:str)
  " endfunction

  " function! VisualSelection(direction, extra_filter) range
      " let l:saved_reg = @"
      " execute "normal! vgvy"

      " let l:pattern = escape(@", "\\/.*'$^~[]")
      " let l:pattern = substitute(l:pattern, "\n$", "", "")

      " if a:direction == 'gv'
          " call CmdLine("Ack '" . l:pattern . "' " )
      " elseif a:direction == 'replace'
          " call CmdLine("%s" . '/'. l:pattern . '/')
      " endif

      " let @/ = l:pattern
      " let @" = l:saved_reg
  " endfunction

#+end_src

*** LaTeX

#+begin_src vimrc

  " vimtex
  let g:tex_flavor = 'latex'
  " let g:vimtex_compiler_progname = 'nvr'
  let g:vimtex_view_method = 'zathura'
  let g:vimtex_view_forward_search_on_start = 1
  let g:vimtex_quickfix_mode = 0
  let g:vimtex_quickfix_open_on_warning = 0
  let g:vimtex_quickfix_autoclose_after_keystrokes = 3
  let g:vimtex_fold_enabled = 1
  let g:vimtex_fold_types = {
        \ 'markers' : {'enabled': 0},
        \ 'sections' : {'parse_levels': 1},
        \}
  let g:vimtex_complete_enabled = 1
  let g:vimtex_complete_close_braces = 1
  let g:vimtex_complete_ignore_case = 1
  let g:vimtex_complete_smart_case = 1
  let g:vimtex_format_enabled = 1

  " KeitaNakamura/tex-conceal.vim
  set conceallevel=2
  let g:tex_conceal="abdmg"
  hi Conceal ctermbg=none

  " au BufNewFile,BufRead /*.tex VimtexCompile
  map <leader>c :VimtexCompile<CR>
  map <leader>e :VimtexErrors<CR>
  map <leader>f :VimtexView<CR>
  nnoremap <Enter> za

  " Close viewers when VimTeX buffers are closed
  function! CloseViewers()
      " Close viewers on quit
      if executable('xdotool') && exists('b:vimtex')
          \ && exists('b:vimtex.viewer') && b:vimtex.viewer.xwin_id > 0
          call system('xdotool windowclose '. b:vimtex.viewer.xwin_id)
      endif
  endfunction

  let mywindowid=system('xdotool getwindowfocus')

  augroup vimtex_event
      au!
      " au User VimtexEventInitPost VimtexCompile
      au User VimtexEventCompileSuccess call system('xdotool windowfocus ' . mywindowid)
      au User VimtexEventCompileFailed call system('xdotool windowfocus ' . mywindowid)
      au User VimtexEventView call system('xdotool windowfocus ' . mywindowid)
      au User VimtexEventQuit call CloseViewers()
  augroup END

#+end_src

*** coc.nvim

#+begin_src vimrc

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  " inoremap <silent><expr> <Tab>
  inoremap <silent><expr> <A-j>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><A-k> pumvisible() ? "\<C-p>" : "\<C-h>"
  " inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
  else
      inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

#+end_src

*** Snippets

#+begin_src vimrc

  let g:UltiSnipsExpandTrigger = '<tab>'
  let g:UltiSnipsJumpForwardTrigger = '<tab>'
  let g:UltiSnipsJumpBackwardTrigger = '<S-tab>'

#+end_src

*** COMMENT vim-xkbswitch

#+begin_src vimrc

  let g:XkbSwitchEnabled = 1

#+end_src

*** Theme

#+begin_src vimrc

  set background=dark
  colorscheme onedark

  highlight Normal           ctermfg=15      ctermbg=none  cterm=none
  highlight CursorLineNr     ctermfg=7       ctermbg=0     cterm=none
  highlight CursorLine       ctermfg=none    ctermbg=0     cterm=none

#+end_src

*** Status line

#+begin_src vimrc

  let g:lightline = {
      \ 'colorscheme' : 'deus',
      \ }

  " We don't need to see things like -- INSERT -- anymore
  set noshowmode

#+end_src

*** Nerdtree

#+begin_src vimrc

  map <C-n> :NERDTreeToggle<CR>

  "let g:NERDTreeDirArrowExpandable  = '>'
  "let g:NERDTreeDirArrowCollapsible = '˅'
  let g:NERDTreeShowHidden          = get(g:, 'NERDTreeShowHidden', 1)

  "let g:NERDTreeMapCustomOpen = get(g:, 'NERDTreeMapCustomOpen', '<Tab>')
  "let g:NERDTreeMapCustomOpen = get(g:, 'NERDTreeMapCustomOpen', '<CR>')
  let g:NERDTreeMapOpenSplit  = get(g:, 'NERDTreeMapOpenSplit',  '<Space>j')
  let g:NERDTreeMapOpenVSplit = get(g:, 'NERDTreeMapOpenVSplit', '<Space>l')

#+end_src

*** nerd-commenter

#+begin_src vimrc

  let g:NERDSpaceDelims = 1       " Add spaces after comment delimiters by default

  map <Space>/ <Plug>NERDCommenterToggle

#+end_src

*** fzf

#+begin_src vimrc

  " This is the default extra key bindings
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit' }

  " Enable per-command history.
  " CTRL-N and CTRL-P will be automatically bound to next-history and
  " previous-history instead of down and up. If you don't like the change,
  " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  map <C-f> :Files<CR>
  map <leader>b :Buffers<CR>
  nnoremap <leader>g :Rg<CR>
  nnoremap <leader>t :Tags<CR>
  nnoremap <leader>m :Marks<CR>

  tmap <M-k> <C-k>
  tmap <M-j> <C-j>

  let g:fzf_tags_command = 'ctags -R'
  " Border color
  let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

  let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline -e'
  let $FZF_DEFAULT_COMMAND="rg --files --hidden"

  " Customize fzf colors to match your color scheme
  let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \   'bg':      ['bg', 'Normal'],
      \   'hl':      ['fg', 'Comment'],
      \   'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \   'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \   'hl+':     ['fg', 'Statement'],
      \   'info':    ['fg', 'PreProc'],
      \   'border':  ['fg', 'Ignore'],
      \   'prompt':  ['fg', 'Conditional'],
      \   'pointer': ['fg', 'Exception'],
      \   'marker':  ['fg', 'Keyword'],
      \   'spinner': ['fg', 'Label'],
      \   'header':  ['fg', 'Comment'] }

  "Get Files
  command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

  " Get text in files with Rg
  command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
      \   fzf#vim#with_preview(), <bang>0)

  " Ripgrep advanced
  function! RipgrepFzf(query, fullscreen)
      let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
      let initial_command = printf(command_fmt, shellescape(a:query))
      let reload_command = printf(command_fmt, '{q}')
      let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
      call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction

  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

  " Git grep
  command! -bang -nargs=* GGrep
      \ call fzf#vim#grep(
      \   'git grep --line-number '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

#+end_src

** Snippets

#+begin_src text :tangle ./.config/nvim/UltiSnips/tex.snippets

  global !p
  def math():
      return vim.eval('vimtex#syntax#in_mathzone()') == '1'
  def visual():
      return vim.eval('mode()') == 'v'
  endglobal

  snippet beg "begin{} / end{}" bA
  \begin{$1}
      $0
  \end{$1}
  endsnippet

  snippet sec "section" bA
  \section{$1}
  $0
  endsnippet

  snippet ssec "subsection" bA
  \subsection{$1}
  $0
  endsnippet

  snippet sssec "subsubsection" bA
  \subsubsection{$1}
  $0
  endsnippet

  snippet mk "Math" wA
  $${1}$`!p
  if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
      snip.rv = ' '
  else:
      snip.rv = ''
  `$2
  endsnippet

  snippet ьл "Math" wA
  $${1}$`!p
  if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
      snip.rv = ' '
  else:
      snip.rv = ''
  `$2
  endsnippet

  snippet dm "Math" wA
  \[
  $1
  \] $0
  endsnippet

  context "math()"
  snippet ** "multiplier sign" iA
  \cdot $0
  endsnippet

  context "math()"
  snippet xx "multiplier sign" iA
  \times $0
  endsnippet

  context "math()"
  snippet '([A-Za-z])(\d)' "auto subscript" wrA
  `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
  endsnippet

  context "math()"
  snippet '_' "auto subscript" wrA
  _{$1}$0
  endsnippet

  context "math()"
  snippet sr "^2" iA
  ^2
  endsnippet

  context "math()"
  snippet cb "^3" iA
  ^3
  endsnippet

  context "math()"
  snippet compl "complement" iA
  ^{c}
  endsnippet

  context "math()"
  snippet td "superscript" iA
  ^{$1}$0
  endsnippet

  context "math()"
  snippet // "Fraction" iA
  \\frac{$1}{$2}$0
  endsnippet

  context "math()"
  snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
  \\frac{`!p snip.rv = match.group(1)`}{$1}$0
  endsnippet

  priority 1000
  context "math()"
  snippet '^.*\)/' "() Fraction" wrA
  `!p
  stripped = match.string[:-1]
  depth = 0
  i = len(stripped) - 1
  while True:
      if stripped[i] == ')': depth += 1
      if stripped[i] == '(': depth -= 1
      if depth == 0: break;
      i -= 1
  snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
  `{$1}$0
  endsnippet

  snippet / "Fraction" i
  \\frac{${VISUAL}}{$1}$0
  endsnippet

  priority 10
  context "math()"
  snippet "bar" "bar" riA
  \overline{$1}$0
  endsnippet

  priority 100
  context "math()"
  snippet "([a-zA-Z])bar" "bar" riA
  \overline{`!p snip.rv=match.group(1)`}
  endsnippet

  priority 10
  context "math()"
  snippet "hat" "hat" riA
  \hat{$1}$0
  endsnippet

  priority 100
  context "math()"
  snippet "([a-zA-Z])hat" "hat" riA
  \hat{`!p snip.rv=match.group(1)`}
  endsnippet

  context "math()"
  snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
  \vec{`!p snip.rv=match.group(1)`}
  endsnippet

  priority 100
  snippet ... "ldots" iA
  \ldots
  endsnippet

  snippet table "Table environment" b
  \begin{table}[${1:htpb}]
      \centering
      \caption{${2:caption}}
      \label{tab:${3:label}}
      \begin{tabular}{${5:c}}
      $0${5/((?<=.)c|l|r)|./(?1: & )/g}
      \end{tabular}
  \end{table}
  endsnippet

  snippet fig "Figure environment" b
  \begin{figure}[${1:htpb}]
      \centering
      ${2:\includegraphics[width=0.8\textwidth]{$3}}
      \caption{${4:$3}}
      \label{fig:${5:${3/\W+/-/g}}}
  \end{figure}
  endsnippet

  snippet enum "Enumerate" bA
  \begin{enumerate}
      \item $0
  \end{enumerate}
  endsnippet

  snippet item "Itemize" bA
  \begin{itemize}
      \item $0
  \end{itemize}
  endsnippet

  snippet desc "Description" b
  \begin{description}
      \item[$1] $0
  \end{description}
  endsnippet

  snippet dm "Math" bA
  \begin{align*}
      $0
  \end{align*}
  endsnippet

  snippet gt "gather" bA
  \begin{gather*}
      $0
  \end{gather*}
  endsnippet

  snippet pac "Package" b
  \usepackage[${1:options}]{${2:package}}$0
  endsnippet

  context "math()"
  snippet => "implies" Ai
  \implies
  endsnippet

  context "math()"
  snippet =< "implied by" Ai
  \impliedby
  endsnippet

  context "math()"
  snippet iff "iff" Ai
  \iff
  endsnippet

  context "math()"
  snippet == "equals" iA
  &= $1 \\\\
  endsnippet

  context "math()"
  snippet != "equals" iA
  \neq 
  endsnippet

  context "math()"
  snippet NN "N" iA
  \mathbb{N}
  endsnippet

  context "math()"
  snippet ZZ "Z" iA
  \mathbb{Z}
  endsnippet

  context "math()"
  snippet QQ "Q" iA
  \mathbb{Q}
  endsnippet

  context "math()"
  snippet RR "R" iA
  \mathbb{R}
  endsnippet

  context "math()"
  snippet CC "C" iA
  \mathbb{C}
  endsnippet

#+end_src

* Picom
:PROPERTIES:
:header-args: :tangle ./.config/picom/picom.conf
:END:

** Shadows

#+begin_src conf

  # Enabled client-side shadows on windows. Note desktop windows
  # (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
  # unless explicitly requested using the wintypes option.
  shadow = true;

  # The blur radius for shadows, in pixels. (defaults to 12)
  shadow-radius = 11;

  # The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
  # shadow-opacity = .75

  # The left offset for shadows, in pixels. (defaults to -15)
  shadow-offset-x = -7;

  # The top offset for shadows, in pixels. (defaults to -15)
  shadow-offset-y = -7;

  # Red color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-red = 0

  # Green color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-green = 0

  # Blue color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-blue = 0

  # Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
  # shadow-color = "#000000"

  # Specify a list of conditions of windows that should have no shadow.
  #
  # examples:
  #   shadow-exclude = "n:e:Notification";
  #
  shadow-exclude = [
      "name = 'Notification'",
      "class_g = 'Conky'",
      "class_g ?= 'Notify-osd'",
      "class_g = 'Cairo-clock'",
      "window_type = 'utility'",
      "_GTK_FRAME_EXTENTS@:c",
  ];

  # Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
  # clip-shadow-above = []

  # Specify a X geometry that describes the region in which shadow should not
  # be painted in, such as a dock window region. Use
  #    shadow-exclude-reg = "x10+0+0"
  # for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
  #
  # shadow-exclude-reg = ""

  # Crop shadow of a window fully on a particular Xinerama screen to the screen.
  # xinerama-shadow-crop = false

#+end_src

** Fading

#+begin_src conf

  # Fade windows in/out when opening/closing and when opacity changes,
  # unless no-fading-openclose is used.
  fading = true;

  # Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
  fade-in-step = 0.03;

  # Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
  fade-out-step = 0.03;

  # The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
  # fade-delta = 10

  # Specify a list of conditions of windows that should not be faded.
  # fade-exclude = []

  # Do not fade on window open/close.
  # no-fading-openclose = false

  # Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
  # no-fading-destroyed-argb = false

#+end_src

** Transparent-Opacity

#+begin_src conf

  # Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
  inactive-opacity = 0.8;

  # Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
  frame-opacity = 0.7;

  # Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
  # inactive-opacity-override = true;
  inactive-opacity-override = false;

  # Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
  active-opacity = 1.0

  # Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
  inactive-dim = 0.1

  # Specify a list of conditions of windows that should never be considered focused.
  focus-exclude = [
      "class_g = 'Cairo-clock'",
  ];

  # Use fixed inactive dim value, instead of adjusting according to window opacity.
  inactive-dim-fixed = 0.1

  # Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
  # like `50:name *= "Firefox"`. picom-trans is recommended over this.
  # Note we don't make any guarantee about possible conflicts with other
  # programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
  # example:
  #    opacity-rule = [ "80:class_g = 'URxvt'" ];
  #
  # opacity-rule = []

#+end_src

** Corners

#+begin_src conf

  # Sets the radius of rounded window corners. When > 0, the compositor will
  # round the corners of windows. Does not interact well with
  # `transparent-clipping`.
  corner-radius = 0

  # Exclude conditions for rounded corners.
  rounded-corners-exclude = [
      "window_type = 'dock'",
      "window_type = 'desktop'"
  ];

#+end_src

** Background-Blurring

#+begin_src conf

  # Parameters for background blurring, see the *BLUR* section for more information.
  blur-method = "dual_kawase";
  # blur-size = 12
  #
  # blur-deviation = false
  #
  blur-strength = 8

  # Blur background of semi-transparent / ARGB windows.
  # Bad in performance, with driver-dependent behavior.
  # The name of the switch may change without prior notifications.
  #
  # blur-background = false

  # Blur background of windows when the window frame is not opaque.
  # Implies:
  #    blur-background
  # Bad in performance, with driver-dependent behavior. The name may change.
  #
  # blur-background-frame = false

  # Use fixed blur strength rather than adjusting according to window opacity.
  # blur-background-fixed = false

  # Specify the blur convolution kernel, with the following format:
  # example:
  #   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
  #
  # blur-kern = ""
  # blur-kern = "3x3box";

  # Exclude conditions for background blur.
  blur-background-exclude = [
      "class_g = 'slop'",
      "name = 'main-dock'",
      "window_type = 'desktop'",
      "_GTK_FRAME_EXTENTS@:c",
      "window_type = 'utility'",
  ];

#+end_src

** General Settings

#+begin_src conf

  # Daemonize process. Fork to background after initialization.
  # Causes issues with certain (badly-written) drivers.
  # daemon = false

  # Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
  # `xrender` is the default one.
  backend = "glx"

  # Enable/disable VSync.
  vsync = true;

  # Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
  # dbus = false

  # Try to detect WM windows (a non-override-redirect window with no
  # child that has 'WM_STATE') and mark them as active.
  mark-wmwin-focused = true;

  # Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
  mark-ovredir-focused = true;

  # Try to detect windows with rounded corners and don't consider them
  # shaped windows. The accuracy is not very high, unfortunately.
  detect-rounded-corners = true;

  # Detect '_NET_WM_OPACITY' on client windows, useful for window managers
  # not passing '_NET_WM_OPACITY' of client windows to frame windows.
  detect-client-opacity = true;

  # Specify refresh rate of the screen. If not specified or 0, picom will
  # try detecting this with X RandR extension.
  refresh-rate = 0;

  # Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
  # rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
  # provided that the WM supports it.
  #
  # use-ewmh-active-win = false

  # Unredirect all windows if a full-screen opaque window is detected,
  # to maximize performance for full-screen windows. Known to cause flickering
  # when redirecting/unredirecting windows.
  #
  # unredir-if-possible = false

  # Delay before unredirecting the window, in milliseconds. Defaults to 0.
  # unredir-if-possible-delay = 0

  # Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
  # unredir-if-possible-exclude = []

  # Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
  # in the same group focused at the same time.
  detect-transient = true;

  # Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
  # group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
  # detect-transient is enabled, too.
  detect-client-leader = true;

  # Resize damaged region by a specific number of pixels.
  # A positive value enlarges it while a negative one shrinks it.
  # If the value is positive, those additional pixels will not be actually painted
  # to screen, only used in blur calculation, and such. (Due to technical limitations,
  # with use-damage, those pixels will still be incorrectly painted to screen.)
  # Primarily used to fix the line corruption issues of blur,
  # in which case you should use the blur radius value here
  # (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
  # with a 5x5 one you use `--resize-damage 2`, and so on).
  # May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
  #
  # resize-damage = 1

  # Specify a list of conditions of windows that should be painted with inverted color.
  # Resource-hogging, and is not well tested.
  #
  # invert-color-include = []

  # GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
  # Might cause incorrect opacity when rendering transparent content (but never
  # practically happened) and may not work with blur-background.
  # My tests show a 15% performance boost. Recommended.
  #
  # glx-no-stencil = false

  # GLX backend: Avoid rebinding pixmap on window damage.
  # Probably could improve performance on rapid window content changes,
  # but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
  # Recommended if it works.
  #
  # glx-no-rebind-pixmap = false

  # Disable the use of damage information.
  # This cause the whole screen to be redrawn everytime, instead of the part of the screen
  # has actually changed. Potentially degrades the performance, but might fix some artifacts.
  # The opposing option is use-damage
  use-damage = true;

  # Use X Sync fence to sync clients' draw calls, to make sure all draw
  # calls are finished before picom starts drawing. Needed on nvidia-drivers
  # with GLX backend for some users.
  #
  # xrender-sync-fence = false

  # GLX backend: Use specified GLSL fragment shader for rendering window contents.
  # See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
  # in the source tree for examples.
  #
  # glx-fshader-win = ""

  # Force all windows to be painted with blending. Useful if you
  # have a glx-fshader-win that could turn opaque pixels transparent.
  #
  # force-win-blend = false

  # Do not use EWMH to detect fullscreen windows.
  # Reverts to checking if a window is fullscreen based only on its size and coordinates.
  #
  # no-ewmh-fullscreen = false

  # Dimming bright windows so their brightness doesn't exceed this set value.
  # Brightness of a window is estimated by averaging all pixels in the window,
  # so this could comes with a performance hit.
  # Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
  #
  # max-brightness = 1.0

  # Make transparent windows clip other windows like non-transparent windows do,
  # instead of blending on top of them.
  #
  # transparent-clipping = false

  # Set the log level. Possible values are:
  #  "trace", "debug", "info", "warn", "error"
  # in increasing level of importance. Case doesn't matter.
  # If using the "TRACE" log level, it's better to log into a file
  # using *--log-file*, since it can generate a huge stream of logs.
  log-level = "warn";

  # Set the log file.
  # If *--log-file* is never specified, logs will be written to stderr.
  # Otherwise, logs will to written to the given file, though some of the early
  # logs might still be written to the stderr.
  # When setting this option from the config file, it is recommended to use an absolute path.
  #
  # log-file = "/path/to/your/log/file"

  # Show all X errors (for debugging)
  # show-all-xerrors = false

  # Write process ID to a file.
  # write-pid-path = "/path/to/your/log/file"

  # Window type settings
  #
  # 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
  #     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
  #     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
  #     "tooltip", "notification", "combo", and "dnd".
  #
  # Following per window-type options are available: ::
  #
  #   fade, shadow:::
  #     Controls window-type-specific shadow and fade settings.
  #
  #   opacity:::
  #     Controls default opacity of the window type.
  #
  #   focus:::
  #     Controls whether the window of this type is to be always considered focused.
  #     (By default, all window types except "normal" and "dialog" has this on.)
  #
  #   full-shadow:::
  #     Controls whether shadow is drawn under the parts of the window that you
  #     normally won't be able to see. Useful when the window has parts of it
  #     transparent, and you want shadows in those areas.
  #
  #   clip-shadow-above:::
  #     Controls wether shadows that would have been drawn above the window should
  #     be clipped. Useful for dock windows that should have no shadow painted on top.
  #
  #   redir-ignore:::
  #     Controls whether this type of windows should cause screen to become
  #     redirected again after been unredirected. If you have unredir-if-possible
  #     set, and doesn't want certain window to cause unnecessary screen redirection,
  #     you can set this to `true`.
  #
  wintypes:
  {
      tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
      # dock = { shadow = false; clip-shadow-above = true; }
      dnd = { shadow = false; }
      menu = { opacity = false; }
      popup_menu = { shadow = false; opacity = false; }
      dropdown_menu = { opacity = false; }
  };

  # round-borders = 1;
  # round-borders-execute = [];

#+end_src

* Rofi

Configuration based on https://github.com/adi1090x/rofi

** Config

#+begin_src css :tangle ./.config/rofi/config.rasi

  configuration {
      show-icons:             true;
      /* icon-theme:             "Papirus"; */
      icon-theme:             "myIcons";
      modi:                   "window,run,ssh,drun";

      terminal:               "alacritty";
      run-command:            "{cmd}";
      run-shell-command:      "{terminal} -e {cmd}";
      drun-match-fields:      "name";
      drun-display-format:    "{name}";
      cycle:                  false;
      case-sensitive:         false;
      monitor:                "-1";
      cache-dir:              "/home/none9632/.cache/rofi";

      display-run:            "Run";
      display-drun:           "Run";

      kb-mode-complete:       "";
      kb-remove-to-eol:       "";
      kb-cancel:              "Super+q,Escape";
      kb-remove-char-forward: "Delete";
      kb-remove-char-back:    "BackSpace,Shift+BackSpace";
      kb-secondary-paste:     "P,Control+p";
      kb-clear-line:          "D,Control+d";
      kb-move-front:          "I,Control+i";
      kb-move-end:            "A,Control+a";
      kb-move-word-back:      "Control+Left";
      kb-move-word-forward:   "Control+Right";
      kb-move-char-back:      "Left,Alt+h,Control+h";
      kb-move-char-forward:   "Right,Alt+l,Control+l";
      kb-accept-entry:        ",Return,KP_Enter";
      kb-row-up:              "Up,ISO_Left_Tab,Alt+k";
      kb-row-down:            "Down,Alt+j";
  }

#+end_src

** Colors

#+begin_src css :tangle ./.config/rofi/colors.rasi

  ,* {
      accent:           #51afef;
      background:       #141c21;
      background-light: #1c252a;
      background-focus: #253137;
      foreground:       #93a1a1;
      on:               #5BB462;
      off:              #DE635E;
  }

#+end_src

** Themes
*** Menu themes
**** Application launcher

#+begin_src css :tangle ./.config/rofi/themes/menu/appslauncher.rasi

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
      spacing:                        0;
      highlight:                      bold;
      font:                           "SauceCodePro Nerd Font 16";
  }

  window {
      width:                          950px;
      height:                         533px;
  }

  prompt {
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        13px 16px 11px 16px;
      background-color:               @accent;
      text-color:                     @background-light;
  }

  inputbar {
      padding:                        20px 20px 9px 20px;
      children:                       [ prompt, entry, num-filtered-rows, textbox-num-sep, num-rows ];
  }

  num-filtered-rows {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  num-rows {
      background-color:               @background-light;
      border:                         2px 2px 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 13px 0 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  textbox-num-sep {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        12px 0;
      expand:                         false;
      str:                            "/";
  }

  entry {
      padding:                        12px 16px;
      border:                         2px 0 2px 2px;
      border-color:                   @accent;
      background-color:               @background-light;
  }


  element {
      padding:                        11px;
      margin:                         4px 20px;
      border-color:                   @accent;
      background-color:               @background-light;
  }

  element selected {
      background-color:               @background-focus;
      border-color:                   @accent;
  }

  element-icon {
      background-color:               inherit;
      text-color:                     inherit;
      size:                           32px;
      padding:                        0 9px 0 7px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      padding:                        3px 0 0 0;
  }

#+end_src

**** Application menu

#+begin_src css :tangle ./.config/rofi/themes/menu/appsmenu.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      /* width:                          950px; */
      width:                          800px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Apps ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        5;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Brightness

#+begin_src css :tangle ./.config/rofi/themes/menu/brightness.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          500px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Brightness ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        3;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** File search

#+begin_src css :tangle ./.config/rofi/themes/menu/filesearch.rasi

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
      spacing:                        0;
      highlight:                      bold;
      font:                           "SauceCodePro Nerd Font 16";
  }

  window {
      width:                          950px;
      height:                         533px;
  }

  prompt {
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        13px 16px 11px 16px;
      background-color:               @accent;
      text-color:                     @background-light;
  }

  inputbar {
      padding:                        20px 20px 9px 20px;
      children:                       [ prompt, entry, num-filtered-rows, textbox-num-sep, num-rows ];
  }

  num-filtered-rows {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  num-rows {
      background-color:               @background-light;
      border:                         2px 2px 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 13px 0 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  textbox-num-sep {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        12px 0;
      expand:                         false;
      str:                            "/";
  }

  entry {
      padding:                        12px 16px;
      border:                         2px 0 2px 2px;
      border-color:                   @accent;
      background-color:               @background-light;
  }


  element {
      padding:                        11px;
      margin:                         4px 20px;
      border-color:                   @accent;
      background-color:               @background-light;
  }

  element selected {
      background-color:               @background-focus;
      border-color:                   @accent;
  }

  element-icon {
      background-color:               inherit;
      text-color:                     inherit;
      size:                           32px;
      padding:                        0 9px 0 7px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      padding:                        3px 0 0 0;
  }

#+end_src

**** COMMENT Music Player Daemon

#+begin_src css :tangle ./.config/rofi/themes/menu/mdb.rasi

  configuration {
      font:                           "Comfortaa 14";
      disable-history:                false;
      fullscreen:                     false;
      hide-scrollbar:                 true;
      sidebar-mode:                   false;
  }

  @import "../../../styles/colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          950px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 4px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " MPD ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        14px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        6;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0;
      margin:                         25px 0px 65px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Network

#+begin_src css :tangle ./.config/rofi/themes/menu/network.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          650px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      /* border:                         2px 2px 4px 2px; */
      border:                         2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Network ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        4;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Power menu

#+begin_src css :tangle ./.config/rofi/themes/menu/powermenu.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          800px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " System ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        5;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** COMMENT Quick links

#+begin_src css :tangle ./.config/rofi/themes/menu/quicklinks.rasi

  configuration {
      font:                           "Comfortaa 14";
      disable-history:                false;
      fullscreen:                     false;
      hide-scrollbar:                 true;
      sidebar-mode:                   false;
  }

  @import "../../../styles/colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          950px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Quick Links ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        6;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0;
      margin:                         25px 0px 65px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Schreenshot

#+begin_src css :tangle ./.config/rofi/themes/menu/screenshot.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          500px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Screenshot ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        3;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** COMMENT Time

#+begin_src css :tangle ./.config/rofi/themes/menu/time.rasi

  configuration {
      show-icons:                     false;
      font:                           "Comfortaa 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../../styles/colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          700px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 4px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Time ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        3;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "Hurmit Nerd Font Mono 48";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Volume

#+begin_src css :tangle ./.config/rofi/themes/menu/volume.rasi

  configuration {
      show-icons:                     false;
      font:                           "SauceCodePro Nerd Font Semibold 14";
      disable-history:                false;
      sidebar-mode:                   false;
  }

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
  }

  window {
      transparency:                   "real";
      border-radius:                  0px;
      location:                       center;
      width:                          500px;
      x-offset:                       0px;
      y-offset:                       0px;
  }

  prompt {
      enabled:                        true;
      padding:                        10px;
      background-color:               @background-light;
      text-color:                     @accent;
      border:                         2px 2px 2px 2px;
      border-radius:                  0px;
      border-color:                   @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Volume ";
      background-color:               @accent;
      text-color:                     @background;
      padding:                        12px 10px 0px 10px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      spacing:                        0px;
      background-color:               @background;
      text-color:                     @foreground;
      expand:                         false;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @accent;
      margin:                         0px 0px 0px 0px;
      padding:                        0px;
      position:                       center;
  }

  listview {
      columns:                        3;
      lines:                          1;
      spacing:                        15px;
      cycle:                          true;
      dynamic:                        true;
      layout:                         vertical;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
      spacing:                        15px;
      margin:                         40px;
  }

  element {
      background-color:               @background-light;
      text-color:                     @foreground;
      orientation:                    vertical;
      border-radius:                  0px;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      font:                           "feather 32";
      expand:                         true;
      horizontal-align:               0.5;
      vertical-align:                 0.5;
      margin:                         40px 0px 40px 0px;
  }

  element normal.urgent,
  element alternate.urgent {
      background-color:               @off;
      text-color:                     @background;
      border-radius:                  0px;
  }

  element normal.active,
  element alternate.active {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected {
      background-color:               @accent;
      text-color:                     @background;
      border:                         0px;
      border-radius:                  0px;
      border-color:                   @border;
  }

  element selected.urgent {
      background-color:               @on;
      text-color:                     @background;
  }

  element selected.active {
      background-color:               @off;
      color:                          @background;
  }

#+end_src

**** Wifi

#+begin_src css :tangle ./.config/rofi/themes/menu/wifi.rasi

  @import "../../colors.rasi"

  ,* {
      background-color:               @background;
      text-color:                     @foreground;
      spacing:                        0;
      highlight:                      bold;
      font:                           "SauceCodePro Nerd Font 16";
  }

  window {
      /* width:                          950px; */
      width:                          30%;
      height:                         533px;
  }

  prompt {
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        13px 16px 11px 16px;
      background-color:               @accent;
      text-color:                     @background-light;
  }

  inputbar {
      padding:                        20px 20px 9px 20px;
      children:                       [ prompt, entry, num-filtered-rows, textbox-num-sep, num-rows ];
  }

  num-filtered-rows {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  num-rows {
      background-color:               @background-light;
      border:                         2px 2px 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      padding:                        12px 13px 0 0;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      expand:                         false;
  }

  textbox-num-sep {
      background-color:               @background-light;
      border:                         2px 0 2px 0;
      border-color:                   @accent;
      text-color:                     @accent;
      font:                           "SauceCodePro Nerd Font Semibold 15";
      padding:                        12px 0;
      expand:                         false;
      str:                            "/";
  }

  entry {
      padding:                        12px 16px;
      border:                         2px 0 2px 2px;
      border-color:                   @accent;
      background-color:               @background-light;
  }


  element {
      padding:                        11px;
      margin:                         4px 20px;
      border-color:                   @accent;
      background-color:               @background-light;
  }

  element selected {
      background-color:               @background-focus;
      border-color:                   @accent;
  }

  element-icon {
      background-color:               inherit;
      text-color:                     inherit;
  }

  element-text {
      background-color:               inherit;
      text-color:                     inherit;
      padding:                        3px 0 0 0;
  }

#+end_src

**** COMMENT Wifi

#+begin_src css :tangle ./.config/rofi/themes/menu/wifi.rasi

  ,* {
      transparency:     "real";
      se:               rgba ( 94, 108, 145, 75 % );
      bg:               rgba ( 0, 0, 0, 0 % );
      red:              rgba ( 255, 85, 85, 75 % );
      bg2:              rgba ( 40, 42, 54, 75 % );
      al:               rgba ( 0, 0, 0, 0 % );
      opacity:          75.0000% ;
      fg:               rgba ( 248, 248, 242, 75 % );
      background-color: var(bg);
      ac:               rgba ( 255, 121, 198, 75 % );
  }
  window {
      padding:          10;
      height:           35%;
      width:            20.5%;
      location:         north east;
      anchor:           north east;
      x-offset:         -14px;
      y-offset:         67px;
      background-color: var(bg2);
      border-radius:    6px ;
      border-color:     var(ac);
      border:           0px ;
      children: [listview];
  }
  entry {
      spacing:    0;
      text-color: var(fg);
  }
  mainbox {
      padding:      0;
      border-color: var(ac);
      border:       0px ;
      children:     [ inputbar,listview ];
  }
  listview {
      fixed-height: 0;
      padding:      5px ;
      scrollbar:    false;
      dynamic:      true;
      border-color: var(ac);
      columns:      1;
      spacing:      4px ;
      border:       0px ;
  }
  element-text {
      background-color: rgba ( 0, 0, 0, 0 % );
      text-color:       inherit;
  }
  element {
      padding:       5px ;
      border:        0px ;
      border-radius: 4px ;
      horizontal-align: 0.5;
  }


  element normal.normal {
      background-color: var(bg);
      text-color:       var(fg);
  }
  element normal.active {
      background-color: var(green);
      text-color:       var(bg2);
  }
  element selected.normal {
      background-color: var(fg);
      text-color:       var(bg2);
  }
  element selected.active {
      background-color: var(fg);
      text-color:       var(bg2);
  }
  element alternate.normal {
      background-color: var(bg);
      text-color:       var(fg);
  }
  element alternate.active {
      background-color: var(bg);
      text-color:       var(fg);
  }

#+end_src

*** Other themes
**** Blur background

#+begin_src css :tangle ./.config/rofi/themes/other/blurbg.rasi

  ,* {
      background-color:               #00000000;
      text-color:                     #00000000;
  }

#+end_src

**** Error message

#+begin_src css :tangle ./.config/rofi/themes/other/errormsg.rasi

  @import "../../colors.rasi"

  ,* {
      font:                           "SauceCodePro Nerd Font Semibold 14";
      background-color:               @background;
  }

  window {
      width:                          530px;
      height:                         53px;
  }

  prompt {
      enabled:                        true;
      padding:                        14px 11px 14px 9px;
      background-color:               @background;
      text-color:                     @accent;
  }

  textbox-prompt-colon {
      expand:                         false;
      str:                            " Error ";
      background-color:               @off;
      text-color:                     @background;
      padding:                        14px 11px 9px 11px;
  }

  inputbar {
      children:                       [ textbox-prompt-colon, prompt ];
      expand:                         false;
  }

  listview {
      enabled:                        false;
  }

  mainbox {
      background-color:               @background;
      children:                       [ inputbar, listview ];
  }

#+end_src

**** Input

#+begin_src css :tangle ./.config/rofi/themes/other/input.rasi

  @import "../../colors.rasi"

  ,* {
      font:                           "SauceCodePro Nerd Font Semibold 14";
  }

  window {
      width:                          550px;
      height:                         53px;
  }

  inputbar, prompt, textbox-prompt-colon, entry {
      background-color:               @background;
  }

  inputbar {
      children:                       [ prompt, textbox-prompt-colon, entry ];
  }

  prompt {
      padding:                        14px 11px 14px 11px;
      background-color:               @accent;
      text-color:                     @background;
  }

  textbox-prompt-colon {
      expand:                         false;
      padding:                        9px;
  }

  entry {
      text-color:                     @accent;
      padding:                        14px 23px 14px 0px;
  }

#+end_src

**** Long input

#+begin_src css :tangle ./.config/rofi/themes/other/longinput.rasi

  @import "../../colors.rasi"

  ,* {
      font:                           "SauceCodePro Nerd Font Semibold 14";
  }

  window {
      width:                          700px;
      height:                         53px;
  }

  inputbar, prompt, textbox-prompt-colon, entry {
      background-color:               @background;
  }

  inputbar {
      children:                       [ prompt, textbox-prompt-colon, entry ];
  }

  prompt {
      padding:                        14px 11px 14px 11px;
      background-color:               @accent;
      text-color:                     @background;
  }

  textbox-prompt-colon {
      expand:                         false;
      padding:                        9px;
  }

  entry {
      text-color:                     @accent;
      padding:                        14px 23px 14px 0px;
  }

#+end_src

** Scripts
:PROPERTIES:
:header-args: :tangle-mode (identity #o755)
:END:

*** Menu scripts
**** Application launcher

#+begin_src sh :tangle ./.config/rofi/scripts/appslauncher

  #!/bin/sh

  xdotool key Mode_switch

  rofi -show drun\
       -replace\
       -theme $HOME/.config/rofi/themes/menu/appslauncher.rasi\
       -scroll-method 1

#+end_src

**** Application menu

#+begin_src sh :tangle ./.config/rofi/scripts/appsmenu

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -kb-row-first H\
                     -kb-row-last L\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/appsmenu.rasi"

  # Links
  terminal=""
  files=""
  editor=""
  browser=""
  settings=""

  if [[ -f /usr/bin/alacritty ]]; then
      term=alacritty
  else
      errormsg "No suitable terminal found!"
  fi

  # Variable passed to rofi
  options="$files\n$editor\n$terminal\n$browser\n$settings"

  xdotool key Mode_switch

  chosen="$(echo -e "$options" | $rofi_command -p " Most Used " -dmenu -selected-row 2)"
  case $chosen in
      $terminal)
          $term -o env.run_neofetch=yes &
          ;;
      $files)
          if [[ -f /usr/bin/lf ]]; then
              . $HOME/.config/lf/.lfrc
              $term -e lf &
          else
              errormsg "No suitable file manager found!"
          fi
          ;;
      $editor)
          if [[ -f /usr/bin/emacs ]]; then
              emacs &
          else
              errormsg "No suitable text editor found!"
          fi
          ;;
      $browser)
          if [[ -f /usr/bin/librewolf ]]; then
              librewolf &
          else
              errormsg "No suitable web browser found!"
          fi
          ;;
      $settings)
          ~/Desktop/st/st -e zsh &
          ;;
  esac

#+end_src

**** Brightness

#+begin_src sh :tangle ./.config/rofi/scripts/brightness

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/brightness.rasi"

  ## Icons
  ICON_UP=""
  ICON_DOWN=""
  ICON_OPT=""

  if [[ ! -f /bin/brightnessctl ]]
  then
      errormsg "Please install 'brightnessctl'"
      exit 1
  fi

  xdotool key Mode_switch

  row=1
  options="$ICON_UP\n$ICON_OPT\n$ICON_DOWN"
  while
      BNESS="$(brightnessctl get)"
      MAX="$(brightnessctl max)"
      PERC="$((BNESS*100/MAX))"
      BLIGHT=${PERC%.*}
      chosen="$(echo -e "$options" | $rofi_command -p " $BLIGHT% " -dmenu -selected-row $row)"

      case $chosen in
          $ICON_UP)
              brightnessctl -q set +10%
              row=0
              ;;
          $ICON_DOWN)
              brightnessctl -q set 10%-
              row=2
              ;;
          $ICON_OPT)
              brightnessctl -q set 70%
              row=1
              ;;
      esac
      [ "$chosen" = "$ICON_UP" ] || [ "$chosen" = "$ICON_DOWN" ]
  do true; done

#+end_src

**** File search

#+begin_src sh :tangle ./.config/rofi/scripts/filesearch

  #!/bin/sh

  pwd=$1
  ls_command="exa -a --color=never --group-directories-first $pwd"
  rofi_command="rofi -scroll-method 1\
                     -i\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/filesearch.rasi"
  list=$(LC_COLLATE=C ls -A --group-directories-first $pwd)

  function print_icon()
  {
      if [ -L $pwd/$1 ]; then
          echo "ln_file"
      elif [ -d $pwd/$1 ]; then
          echo "dir"
      elif [ -x $pwd/$1 ]; then
          echo "exe_file"
      else
          case "$1" in
              Makefile)         echo "makefile"      ;;
              makefile)         echo "makefile"      ;;
              Dockerfile)       echo "docker1"       ;;
              dockerfile)       echo "docker1"       ;;
              README)           echo "markdown"      ;;
              CMakeLists.txt)   echo "cmake"         ;;
              TAGS)             echo "tags"          ;;
              TODO)             echo "todo2"         ;;
              LICENSE)          echo "license2"      ;;
              .gitignore)       echo "git"           ;;
              .vimrc)           echo "vim"           ;;
              .viminfo)         echo "vim"           ;;
              .zshrc)           echo "exe_file"      ;;
              .zprofile)        echo "exe_file"      ;;
              .zshenv)          echo "exe_file"      ;;
              .bashrc)          echo "exe_file"      ;;
              .bash_logout)     echo "exe_file"      ;;
              .bash_profile)    echo "exe_file"      ;;
              .profile)         echo "exe_file"      ;;
              .xinitrc)         echo "exe_file"      ;;
              .xprofile)        echo "exe_file"      ;;
              ,*.asm)            echo "assembly"      ;;
              ,*.b)              echo "brainfuck"     ;;
              ,*.c)              echo "c"             ;;
              ,*.cc)             echo "c"             ;;
              ,*.clj)            echo "clojure"       ;;
              ,*.cljc)           echo "clojure"       ;;
              ,*.cmake)          echo "cmake"         ;;
              ,*.conf)           echo "settings_file" ;;
              ,*.coffee)         echo "coffee"        ;;
              ,*.cpp)            echo "cpp"           ;;
              ,*.cs)             echo "csharp"        ;;
              ,*.css)            echo "css"           ;;
              ,*.d)              echo "d"             ;;
              ,*.dart)           echo "dart-plain"    ;;
              ,*.db)             echo "database"      ;;
              ,*.djvu)           echo "book"          ;;
              ,*.doc)            echo "word"          ;;
              ,*.dockerfile)     echo "docker1"       ;;
              ,*.docx)           echo "word"          ;;
              ,*.eex)            echo "elixir"        ;;
              ,*.el)             echo "elisp"         ;;
              ,*.elc)            echo "elisp"         ;;
              ,*.elm)            echo "elm"           ;;
              ,*.erl)            echo "erlang"        ;;
              ,*.ex)             echo "elixir"        ;;
              ,*.exs)            echo "elixir"        ;;
              ,*.fs)             echo "fsharp"        ;;
              ,*.go)             echo "go"            ;;
              ,*.h)              echo "h"             ;;
              ,*.hh)             echo "hpp"           ;;
              ,*.hpp)            echo "hpp"           ;;
              ,*.hs)             echo "haskell"       ;;
              ,*.html)           echo "html"          ;;
              ,*.ino)            echo "arduino"       ;;
              ,*.iso)            echo "iso"           ;;
              ,*.java)           echo "java"          ;;
              ,*.jl)             echo "julia"         ;;
              ,*.js)             echo "javascript"    ;;
              ,*.jsx)            echo "jsx"           ;;
              ,*.json)           echo "json"          ;;
              ,*.key)            echo "key"           ;;
              ,*.kt)             echo "kotlin"        ;;
              ,*.kts)            echo "kotlin"        ;;
              ,*.less)           echo "css"           ;;
              ,*.log)            echo "log_file"      ;;
              ,*.lua)            echo "lua"           ;;
              ,*.md)             echo "markdown"      ;;
              ,*.nasm)           echo "assembly"      ;;
              ,*.ods)            echo "table_file"    ;;
              ,*.org)            echo "org-mode"      ;;
              ,*.pdf)            echo "pdf_file"      ;;
              ,*.pem)            echo "key"           ;;
              ,*.php)            echo "php"           ;;
              ,*.pl)             echo "perl"          ;;
              ,*.ppt)            echo "powerpoint"    ;;
              ,*.pptx)           echo "powerpoint"    ;;
              ,*.py)             echo "python"        ;;
              ,*.rb)             echo "ruby"          ;;
              ,*.rs)             echo "rust"          ;;
              ,*.S)              echo "assembly"      ;;
              ,*.s)              echo "assembly"      ;;
              ,*.scala)          echo "scala"         ;;
              ,*.sql)            echo "database"      ;;
              ,*.sqlite)         echo "database"      ;;
              ,*.swift)          echo "swift"         ;;
              ,*.tex)            echo "tex"           ;;
              ,*.torrent)        echo "torrent"       ;;
              ,*.ts)             echo "typescript"    ;;
              ,*.vim)            echo "vim"           ;;
              ,*.xls)            echo "excel"         ;;
              ,*.xlsx)           echo "excel"         ;;
              ,*.xml)            echo "xml"           ;;
              ,*.yml)            echo "yaml"          ;;
              ,*.ttf)            echo "font"          ;;
              ,*.ttc)            echo "font"          ;;
              ,*.otf)            echo "font"          ;;
              ,*.woff)           echo "font"          ;;
              ,*.o)              echo "bin_file"      ;;
              ,*.obj)            echo "bin_file"      ;;
              ,*.exe)            echo "bin_file"      ;;
              ,*.bin)            echo "bin_file"      ;;
              ,*.elf)            echo "bin_file"      ;;
              ,*.cmd)            echo "exe_file"      ;;
              ,*.ps1)            echo "exe_file"      ;;
              ,*.sh)             echo "exe_file"      ;;
              ,*.bash)           echo "exe_file"      ;;
              ,*.zsh)            echo "exe_file"      ;;
              ,*.fish)           echo "exe_file"      ;;
              ,*.mp4)            echo "video_file"    ;;
              ,*.webm)           echo "video_file"    ;;
              ,*.mkv)            echo "video_file"    ;;
              ,*.flv)            echo "video_file"    ;;
              ,*.vob)            echo "video_file"    ;;
              ,*.ogv)            echo "video_file"    ;;
              ,*.ogm)            echo "video_file"    ;;
              ,*.gifv)           echo "video_file"    ;;
              ,*.mpg)            echo "video_file"    ;;
              ,*.mpeg)           echo "video_file"    ;;
              ,*.mp4v)           echo "video_file"    ;;
              ,*.wmv)            echo "video_file"    ;;
              ,*.qt)             echo "video_file"    ;;
              ,*.yuv)            echo "video_file"    ;;
              ,*.rm)             echo "video_file"    ;;
              ,*.rmvb)           echo "video_file"    ;;
              ,*.viv)            echo "video_file"    ;;
              ,*.asf)            echo "video_file"    ;;
              ,*.m4v)            echo "video_file"    ;;
              ,*.avi)            echo "video_file"    ;;
              ,*.mov)            echo "video_file"    ;;
              ,*.m2v)            echo "video_file"    ;;
              ,*.nuv)            echo "video_file"    ;;
              ,*.flc)            echo "video_file"    ;;
              ,*.fli)            echo "video_file"    ;;
              ,*.gl)             echo "video_file"    ;;
              ,*.ogx)            echo "video_file"    ;;
              ,*.mp3)            echo "audio_file"    ;;
              ,*.aac)            echo "audio_file"    ;;
              ,*.m4a)            echo "audio_file"    ;;
              ,*.oga)            echo "audio_file"    ;;
              ,*.spx)            echo "audio_file"    ;;
              ,*.au)             echo "audio_file"    ;;
              ,*.wav)            echo "audio_file"    ;;
              ,*.opus)           echo "audio_file"    ;;
              ,*.ra)             echo "audio_file"    ;;
              ,*.flac)           echo "audio_file"    ;;
              ,*.mid)            echo "audio_file"    ;;
              ,*.midi)           echo "audio_file"    ;;
              ,*.mka)            echo "audio_file"    ;;
              ,*.mpc)            echo "audio_file"    ;;
              ,*.xspf)           echo "audio_file"    ;;
              ,*.jpg)            echo "img_file"      ;;
              ,*.jpeg)           echo "img_file"      ;;
              ,*.mjpg)           echo "img_file"      ;;
              ,*.mjpeg)          echo "img_file"      ;;
              ,*.ico)            echo "img_file"      ;;
              ,*.gif)            echo "img_file"      ;;
              ,*.bmp)            echo "img_file"      ;;
              ,*.pbm)            echo "img_file"      ;;
              ,*.pgm)            echo "img_file"      ;;
              ,*.ppm)            echo "img_file"      ;;
              ,*.tga)            echo "img_file"      ;;
              ,*.xbm)            echo "img_file"      ;;
              ,*.xpm)            echo "img_file"      ;;
              ,*.tif)            echo "img_file"      ;;
              ,*.tiff)           echo "img_file"      ;;
              ,*.png)            echo "img_file"      ;;
              ,*.svg)            echo "img_file"      ;;
              ,*.svgz)           echo "img_file"      ;;
              ,*.mng)            echo "img_file"      ;;
              ,*.pcx)            echo "img_file"      ;;
              ,*.xcf)            echo "img_file"      ;;
              ,*.xwd)            echo "img_file"      ;;
              ,*.cgm)            echo "img_file"      ;;
              ,*.emf)            echo "img_file"      ;;
              ,*.tar)            echo "zip_file"      ;;
              ,*.tgz)            echo "zip_file"      ;;
              ,*.arc)            echo "zip_file"      ;;
              ,*.arj)            echo "zip_file"      ;;
              ,*.taz)            echo "zip_file"      ;;
              ,*.lha)            echo "zip_file"      ;;
              ,*.lz4)            echo "zip_file"      ;;
              ,*.lzh)            echo "zip_file"      ;;
              ,*.lzma)           echo "zip_file"      ;;
              ,*.tlz)            echo "zip_file"      ;;
              ,*.txz)            echo "zip_file"      ;;
              ,*.tzo)            echo "zip_file"      ;;
              ,*.t7z)            echo "zip_file"      ;;
              ,*.zip)            echo "zip_file"      ;;
              ,*.z)              echo "zip_file"      ;;
              ,*.dz)             echo "zip_file"      ;;
              ,*.gz)             echo "zip_file"      ;;
              ,*.lrz)            echo "zip_file"      ;;
              ,*.lz)             echo "zip_file"      ;;
              ,*.lzo)            echo "zip_file"      ;;
              ,*.xz)             echo "zip_file"      ;;
              ,*.zst)            echo "zip_file"      ;;
              ,*.tzst)           echo "zip_file"      ;;
              ,*.bz2)            echo "zip_file"      ;;
              ,*.bz)             echo "zip_file"      ;;
              ,*.tbz)            echo "zip_file"      ;;
              ,*.tbz2)           echo "zip_file"      ;;
              ,*.tz)             echo "zip_file"      ;;
              ,*.deb)            echo "zip_file"      ;;
              ,*.rpm)            echo "zip_file"      ;;
              ,*.jar)            echo "zip_file"      ;;
              ,*.war)            echo "zip_file"      ;;
              ,*.ear)            echo "zip_file"      ;;
              ,*.sar)            echo "zip_file"      ;;
              ,*.rar)            echo "zip_file"      ;;
              ,*.alz)            echo "zip_file"      ;;
              ,*.ace)            echo "zip_file"      ;;
              ,*.zoo)            echo "zip_file"      ;;
              ,*.cpio)           echo "zip_file"      ;;
              ,*.7z)             echo "zip_file"      ;;
              ,*.rz)             echo "zip_file"      ;;
              ,*.cab)            echo "zip_file"      ;;
              ,*.wim)            echo "zip_file"      ;;
              ,*.swm)            echo "zip_file"      ;;
              ,*.dwm)            echo "zip_file"      ;;
              ,*.esd)            echo "zip_file"      ;;
              ,*)                echo "text_file"     ;;
          esac
      fi
  }

  function options()
  {
      for file in $list
      do
          icon=$(print_icon "$file")
          echo -en "$file\0icon\x1f$icon\n"
      done
  }

  chosen="$(options | $rofi_command -p " Search " -dmenu)"
  if [ "$chosen" != "" ]
  then
      echo "$pwd/$chosen"
  else
      echo "."
  fi

#+end_src

**** COMMENT Music Player Daemon

#+begin_src sh :tangle ./.config/rofi/scripts/mdb.sh

  #!/usr/bin/env bash

  style="$($HOME/.config/rofi/applets/menu/style.sh)"

  dir="$HOME/.config/rofi/applets/menu/configs/$style"
  rofi_command="rofi -theme $dir/mpd.rasi"

  # Gets the current status of mpd (for us to parse it later on)
  status="$(mpc status)"
  # Defines the Play / Pause option content
  if [[ $status == *"[playing]"* ]]; then
      play_pause=""
  else
      play_pause=""
  fi
  active=""
  urgent=""

  # Display if repeat mode is on / off
  tog_repeat=""
  if [[ $status == *"repeat: on"* ]]; then
      active="-a 4"
  elif [[ $status == *"repeat: off"* ]]; then
      urgent="-u 4"
  else
      tog_repeat=" Parsing error"
  fi

  # Display if random mode is on / off
  tog_random=""
  if [[ $status == *"random: on"* ]]; then
      [ -n "$active" ] && active+=",5" || active="-a 5"
  elif [[ $status == *"random: off"* ]]; then
      [ -n "$urgent" ] && urgent+=",5" || urgent="-u 5"
  else
      tog_random=" Parsing error"
  fi
  stop=""
  next=""
  previous=""

  # Variable passed to rofi
  options="$previous\n$play_pause\n$stop\n$next\n$tog_repeat\n$tog_random"

  # Get the current playing song
  current=$(mpc -f "%artist% - %title%" current)
  # If mpd isn't running it will return an empty string, we don't want to display that
  if [[ -z "$current" ]]; then
      current="-"
  fi

  # Spawn the mpd menu with the "Play / Pause" entry selected by default
  chosen="$(echo -e "$options" | $rofi_command -p "  $current" -dmenu $active $urgent -selected-row 1)"
  case $chosen in
      $previous)
          mpc -q prev && notify-send -u low -t 1800 " $(mpc current)"
          ;;
      $play_pause)
          mpc -q toggle && notify-send -u low -t 1800 " $(mpc current)"
          ;;
      $stop)
          mpc -q stop
          ;;
      $next)
          mpc -q next && notify-send -u low -t 1800 " $(mpc current)"
          ;;
      $tog_repeat)
          mpc -q repeat
          ;;
      $tog_random)
          mpc -q random
          ;;
  esac

#+end_src

**** Network

#+begin_src sh :tangle ./.config/rofi/scripts/network

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/network.rasi"

  ## Get info
  IFACE="$(nmcli | grep -i interface | awk '/interface/ {print $2}')"
  #SSID="$(iwgetid -r)"
  #LIP="$(nmcli | grep -i server | awk '/server/ {print $2}')"
  #PIP="$(dig +short myip.opendns.com @resolver1.opendns.com )"
  STATUS="$(nmcli radio wifi)"

  active=""
  urgent=""

  if (ping -c 1 archlinux.org || ping -c 1 google.com || ping -c 1 bitbucket.org || ping -c 1 github.com || ping -c 1 sourceforge.net) &>/dev/null; then
      if [[ $STATUS == *"enable"* ]]; then
          if [[ $IFACE == e* ]]; then
              connected=""
          else
              connected=""
          fi
          active="-a 0"
          SSID="﬉ $(iwgetid -r)"
          PIP="$(wget --timeout=30 http://ipinfo.io/ip -qO -)"
      fi
  else
      urgent="-u 0"
      SSID="Disconnected"
      PIP="Not Available"
      connected=""
  fi

  ## Icons
  bmon=""
  launch_cli=""
  launch=""

  options="$connected\n$bmon\n$launch_cli\n$launch"

  ## Main
  chosen="$(echo -e "$options" | $rofi_command -p " $SSID | $PIP " -dmenu $active $urgent -selected-row 1)"
  case $chosen in
      $connected)
          if [[ $STATUS == *"enable"* ]]; then
              nmcli radio wifi off
          else
              nmcli radio wifi on
          fi
          ;;
      $bmon)
          termite -e bmon
          ;;
      $launch_cli)
          termite -e nmtui
          ;;
      $launch)
          nm-connection-editor
          ;;
  esac

#+end_src

**** Power menu

#+begin_src sh :tangle ./.config/rofi/scripts/powermenu

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/powermenu.rasi"

  uptime=$(uptime -p | sed -e 's/up //g')

  # Options
  shutdown=""
  reboot=""
  lock=""
  suspend=""
  logout=""

  xdotool key Mode_switch

  # Variable passed to rofi
  options="$lock\n$reboot\n$shutdown\n$suspend\n$logout"
  chosen="$(echo -e "$options" | $rofi_command -p " 祥  $uptime " -dmenu -selected-row 2)"
  case $chosen in
      $shutdown)
          systemctl poweroff
          ;;
      $reboot)
          systemctl reboot
          ;;
      $lock)
          if [[ -f /usr/bin/i3lock ]]; then
              i3lock
          elif [[ -f /usr/bin/betterlockscreen ]]; then
              betterlockscreen -l
          fi
          ;;
      $suspend)
          # mpc -q pause
          # amixer set Master mute
          # systemctl suspend
          ;;
      $logout)
          awesome-client 'awesome.quit()'
          ;;
  esac

#+end_src

**** COMMENT Quick links

#+begin_src sh :tangle ./.config/rofi/scripts/quicklinks.sh

  #!/usr/bin/env bash

  style="$($HOME/.config/rofi/applets/menu/style.sh)"

  dir="$HOME/.config/rofi/applets/menu/configs/$style"
  rofi_command="rofi -theme $dir/quicklinks.rasi"

  # Error msg
  msg() {
      rofi -theme "$HOME/.config/rofi/applets/styles/message.rasi" -e "$1"
  }

  # Browser
  if [[ -f /usr/bin/firefox ]]; then
      app="firefox"
  elif [[ -f /usr/bin/chromium ]]; then
      app="chromium"
  elif [[ -f /usr/bin/midori ]]; then
      app="midori"
  else
      msg "No suitable web browser found!"
      exit 1
  fi

  # Links
  google=""
  facebook=""
  twitter=""
  github=""
  mail=""
  youtube=""

  # Variable passed to rofi
  options="$google\n$facebook\n$twitter\n$github\n$mail\n$youtube"

  chosen="$(echo -e "$options" | $rofi_command -p "Open In  :  $app" -dmenu -selected-row 0)"
  case $chosen in
      $google)
          $app https://www.google.com &
          ;;
      $facebook)
          $app https://www.facebook.com &
          ;;
      $twitter)
          $app https://www.twitter.com &
          ;;
      $github)
          $app https://www.github.com &
          ;;
      $mail)
          $app https://www.gmail.com &
          ;;
      $youtube)
          $app https://www.youtube.com &
          ;;
  esac

#+end_src

**** Schreenshot

#+begin_src sh :tangle ./.config/rofi/scripts/screenshot

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/screenshot.rasi"

  scr_dir="$HOME/Pictures/screenshots"
  mkdir -p "${scr_dir}"

  getStamp()
  {
      date '+%Y%m%d-%H%M%S'
  }

  if [[ ! -f /usr/bin/scrot ]] || [[ ! -f /usr/bin/flameshot ]]
  then
      [[ -f /usr/bin/scrot ]] && errormsg "Please install 'scrot'"
      [[ -f /usr/bin/flameshot ]] && errormsg "Please install 'flameshot'"
      exit 0
  fi

  # Options
  screen=""
  window=""
  area=""
  options="$window\n$screen\n$area"

  xdotool key Mode_switch

  chosen="$(echo -e "$options" | $rofi_command -p ' scrot/flameshot ' -dmenu -selected-row 1)"
  sleep 0.35
  case $chosen in
      $screen)
          scr_name=full-$(getStamp).png
          scrot ${scr_dir}/${scr_name}
          ;;
      $window)
          scr_name=window-$(getStamp).png
          scrot -u ${scr_dir}/${scr_name}
          ;;
      $area)
          window_focus=$(xdotool getwindowfocus)
          flameshot gui --path "$scr_dir" -r > /dev/null
          scr_path=$(find "$scr_dir" -type f -newermt `date --date='1 second ago' +%Y-%m-%dT%H:%M:%S` | head -n 1)
          scr_name=$(basename $scr_path)
          xdotool windowfocus $window_focus
          ;;
      ,*)
          exit 0
          ;;
  esac

  if [ -n "$scr_name" ]
  then
      tmp_small_image=/tmp/screenshot_tmp
      convert $scr_dir/$scr_name -resize 100x60 $tmp_small_image
      notify-send -u normal -i $tmp_small_image \
                  "Screenshot" "Screenshot save as $scr_name"
  fi

#+end_src

**** COMMENT Time

#+begin_src sh :tangle ./.config/rofi/scripts/time.sh

  #!/usr/bin/env bash

  style="$($HOME/.config/rofi/applets/menu/style.sh)"

  dir="$HOME/.config/rofi/applets/menu/configs/$style"
  rofi_command="rofi -theme $dir/time.rasi"

  ## Get time and date
  TIME="$(date +"%I:%M %p")"
  DN=$(date +"%A")
  MN=$(date +"%B")
  DAY="$(date +"%d")"
  MONTH="$(date +"%m")"
  YEAR="$(date +"%Y")"

  options="$DAY\n$MONTH\n$YEAR"

  ## Main
  chosen="$(echo -e "$options" | $rofi_command -p "   at $TIME on $DN in $MN" -dmenu -selected-row 1)"

#+end_src

**** Volume

#+begin_src sh :tangle ./.config/rofi/scripts/volume

  #!/bin/sh

  rofi_command="rofi -kb-move-char-back Left,h\
                     -kb-move-char-forward Right,l\
                     -replace\
                     -theme $HOME/.config/rofi/themes/menu/volume.rasi"

  ## Icons
  ICON_UP=""
  ICON_DOWN=""
  ICON_MUTED=""

  row=1
  options="$ICON_MUTED\n$ICON_UP\n$ICON_DOWN"

  xdotool key Mode_switch

  while
      MUTE=$(amixer get Master | tail -n 1 | awk -F ' ' '{print $6}' | tr -d '[]%')
      if [[ $MUTE == *"off"* ]]; then
          row=0
          VOLUME="Mute"
      else
          VOLUME="$(amixer get Master | tail -n 1 | awk -F ' ' '{print $5}' | tr -d '[]%')%"
      fi

      chosen="$(echo -e "$options" | $rofi_command -p " $VOLUME " -dmenu -selected-row $row)"
      case $chosen in
          $ICON_UP)
              amixer -Mq set Master,0 5%+ unmute
              row=1
              ;;
          $ICON_DOWN)
              amixer -Mq set Master,0 5%- unmute
              row=2
              ;;
          $ICON_MUTED)
              amixer -q set Master toggle
              ;;
      esac
      [ "$chosen" = "$ICON_UP" ] || [ "$chosen" = "$ICON_DOWN" ]
  do true; done

#+end_src

**** Wifi

#+begin_src sh :tangle ./.config/rofi/scripts/wifi

  #!/bin/sh

  # this prints a beautifully formatted list. bash was a mistake
  nmcli -t d wifi rescan
  LIST=$(nmcli --fields SSID,SECURITY,BARS device wifi list | sed '/^--/d' | sed 1d | sed -E "s/WPA*.?\S/~~/g" | sed "s/~~ ~~/~~/g;s/802\.1X//g;s/--/~~/g;s/  *~/~/g;s/~  */~/g;s/_/ /g" | column -t -s '~')

  echo "$LIST" > /tmp/testfile
  # LIST=$(cat /tmp/testfile | column -t -s '~')
  # echo $LIST

  # get current connection status
  CONSTATE=$(nmcli -fields WIFI g)
  if [[ "$CONSTATE" =~ "enabled" ]]; then
      TOGGLE="Disable WiFi 睊"
  elif [[ "$CONSTATE" =~ "disabled" ]]; then
      TOGGLE="Enable WiFi 直"
  fi

  # display menu; store user choice
  # CHENTRY=$(echo -e "$TOGGLE\n$LIST" | uniq -u | rofi -dmenu -selected-row 1 -config "./theme.rasi")
  CHENTRY=$(echo -e "$TOGGLE\n$LIST" | uniq -u | rofi -dmenu -no-show-icon -selected-row 1 -theme "../themes/menu/wifi.rasi")
  # store selected SSID
  CHSSID=$(echo "$CHENTRY" | sed  's/\s\{2,\}/\|/g' | awk -F "|" '{print $1}')

  if [ "$CHENTRY" = "" ]; then
      exit
  elif [ "$CHENTRY" = "Enable WiFi 直" ]; then
      nmcli radio wifi on
  elif [ "$CHENTRY" = "Disable WiFi 睊" ]; then
      nmcli radio wifi off
  else
      # get list of known connections
      KNOWNCON=$(nmcli connection show)

      # If the connection is already in use, then this will still be able to get the SSID
      if [ "$CHSSID" = "*" ]; then
          CHSSID=$(echo "$CHENTRY" | sed  's/\s\{2,\}/\|/g' | awk -F "|" '{print $3}')
      fi

      # Parses the list of preconfigured connections to see if it already contains the chosen SSID. This speeds up the connection process
      if [[ $(echo "$KNOWNCON" | grep "$CHSSID") = "$CHSSID" ]]; then
          nmcli con up "$CHSSID"
      else
          if [[ "$CHENTRY" =~ "" ]]; then
              # WIFIPASS=$(rofi -dmenu -p " WiFi Password: " -lines 1 )
              WIFIPASS=$(input "Password:")
          fi
          if nmcli dev wifi con "$CHSSID" password "$WIFIPASS"
          then
              notify-send 'Connection successful'
          else
              notify-send 'Connection failed'
          fi
      fi
  fi

#+end_src

*** Other scripts
**** Error message

#+begin_src sh :tangle ./.config/rofi/scripts/errormsg

  #!/bin/sh

  options=""
  rofi_command="rofi -dmenu\
                     -monitor -2\
                     -normal-window\
                     -pid /run/user/1000/rofi-errormsg.pid\
                     -replace\
                     -theme $HOME/.config/rofi/themes/other/errormsg.rasi"
  $(echo -e "$options" | $rofi_command -p " $1 ")

#+end_src

**** Input

#+begin_src sh :tangle ./.config/rofi/scripts/input

  #!/bin/sh

  rofi_command="rofi -dmenu\
                     -i\
                     -fixed-num-lines\
                     -monitor -2\
                     -p \" $1 \"\
                     -normal-window\
                     -pid /run/user/1000/rofi-input.pid\
                     -replace\
                     -theme $HOME/.config/rofi/themes/other/input.rasi\
                     -kb-secondary-paste    Control+p,Control+k,Up\
                     -kb-clear-line         Control+d,Down\
                     -kb-move-front         Control+i\
                     -kb-move-end           Control+a\
                     -kb-move-char-back     Control+h,Left\
                     -kb-move-char-forward  Control+l,Right\
                     -kb-row-up             \"\"\
                     -kb-row-down           \"\""

  echo -n "$(eval $rofi_command)"

#+end_src

**** Long input

#+begin_src sh :tangle ./.config/rofi/scripts/longinput

  #!/bin/sh

  rofi_command="rofi -dmenu\
                     -i\
                     -fixed-num-lines\
                     -monitor -2\
                     -p \" $1 \"\
                     -normal-window\
                     -pid /run/user/1000/rofi-longinput.pid\
                     -replace\
                     -theme $HOME/.config/rofi/themes/other/longinput.rasi\
                     -kb-secondary-paste    Control+p,Control+k,Up\
                     -kb-clear-line         Control+d,Down\
                     -kb-move-front         Control+i\
                     -kb-move-end           Control+a\
                     -kb-move-char-back     Control+h,Left\
                     -kb-move-char-forward  Control+l,Right\
                     -kb-row-up             \"\"\
                     -kb-row-down           \"\""

  echo -n "$(eval $rofi_command)"

#+end_src

* Misc
** Flameshot

#+begin_src conf :tangle ./.config/flameshot/flameshot.ini

  [General]
  buttons=@Variant(\0\0\0\x7f\0\0\0\vQList<int>\0\0\0\0\b\0\0\0\0\0\0\0\x1\0\0\0\x2\0\0\0\x3\0\0\0\x5\0\0\0\x12\0\0\0\xf\0\0\0\n)
  contrastOpacity=188
  copyPathAfterSave=true
  disabledTrayIcon=true
  drawColor=#ff0000
  drawFontSize=8
  drawThickness=3
  filenamePattern=region-%Y%m%d-%H%M%S
  savePath=/home/none9632/Pictures/screenshots
  savePathFixed=false
  showDesktopNotification=false
  showHelp=false
  showSidePanelButton=false
  showStartupLaunchMessage=false
  startupLaunch=false
  uiColor=#51afef

  [Shortcuts]
  TYPE_ARROW=A
  TYPE_CIRCLE=C
  TYPE_CIRCLECOUNT=
  TYPE_COMMIT_CURRENT_TOOL=Ctrl+Return
  TYPE_COPY=Ctrl+C
  TYPE_DELETE_CURRENT_TOOL=Del
  TYPE_DRAWER=D
  TYPE_EXIT=Ctrl+Q
  TYPE_MARKER=M
  TYPE_MOVESELECTION=Ctrl+M
  TYPE_MOVE_DOWN=Down
  TYPE_MOVE_LEFT=Left
  TYPE_MOVE_RIGHT=Right
  TYPE_MOVE_UP=Up
  TYPE_OPEN_APP=Ctrl+O
  TYPE_PENCIL=P
  TYPE_PIN=
  TYPE_PIXELATE=B
  TYPE_RECTANGLE=R
  TYPE_REDO=Shift+U
  TYPE_RESIZE_DOWN=Shift+Down
  TYPE_RESIZE_LEFT=Shift+Left
  TYPE_RESIZE_RIGHT=Shift+Right
  TYPE_RESIZE_UP=Shift+Up
  TYPE_SAVE=Enter
  TYPE_SELECTION=S
  TYPE_SELECTIONINDICATOR=
  TYPE_SELECT_ALL=Ctrl+A
  TYPE_TEXT=T
  TYPE_TOGGLE_PANEL=Space
  TYPE_UNDO=U

#+end_src

** dunst

#+begin_src conf :tangle ./.config/dunst/dunstrc

  [global]
      ### Display ###

      # Which monitor should the notifications be displayed on.
      monitor = 0

      # Display notification on focused monitor.  Possible modes are:
      #   mouse: follow mouse pointer
      #   keyboard: follow window with keyboard focus
      #   none: don't follow anything
      #
      # "keyboard" needs a window manager that exports the
      # _NET_ACTIVE_WINDOW property.
      # This should be the case for almost all modern window managers.
      #
      # If this option is set to mouse or keyboard, the monitor option
      # will be ignored.
      follow = mouse

      ### Geometry ###

      # dynamic width from 0 to 300
      # width = (0, 300)
      # constant width of 300
      width = (0, 400)

      # The maximum height of a single notification, excluding the frame.
      height = 100

      # Position the notification in the top right corner
      origin = top-right

      # Offset from the origin
      offset = 14x70

      # Scale factor. It is auto-detected if value is 0.
      scale = 0

      # Maximum number of notification (0 means no limit)
      notification_limit = 0

      ### Progress bar ###

      # Turn on the progess bar. It appears when a progress hint is passed with
      # for example dunstify -h int:value:12
      progress_bar = true

      # Set the progress bar height. This includes the frame, so make sure
      # it's at least twice as big as the frame width.
      progress_bar_height = 10

      # Set the frame width of the progress bar
      progress_bar_frame_width = 1

      # Set the minimum width for the progress bar
      progress_bar_min_width = 150

      # Set the maximum width for the progress bar
      progress_bar_max_width = 300


      # Show how many messages are currently hidden (because of
      # notification_limit).
      indicate_hidden = yes

      # The transparency of the window.  Range: [0; 100].
      # This option will only work if a compositing window manager is
      # present (e.g. xcompmgr, compiz, etc.). (X11 only)
      transparency = 0

      # Draw a line of "separator_height" pixel height between two
      # notifications.
      # Set to 0 to disable.
      separator_height = 2

      # Padding between text and separator.
      padding = 14

      # Horizontal padding.
      horizontal_padding = 14

      # Padding between text and icon.
      text_icon_padding = 0

      # Defines width in pixels of frame around the notification window.
      # Set to 0 to disable.
      frame_width = 2

      # Defines color of the frame around the notification window.
      frame_color = "#32424bcc"

      # Define a color for the separator.
      # possible values are:
      #  * auto: dunst tries to find a color fitting to the background;
      #  * foreground: use the same color as the foreground;
      #  * frame: use the same color as the frame;
      #  * anything else will be interpreted as a X color.
      separator_color = frame

      # Sort messages by urgency.
      sort = yes

      # Don't remove messages, if the user is idle (no mouse or keyboard input)
      # for longer than idle_threshold seconds.
      # Set to 0 to disable.
      # A client can set the 'transient' hint to bypass this. See the rules
      # section for how to disable this if necessary
      # idle_threshold = 120

      ### Text ###

      font = Roboto Regular 11

      # The spacing between lines.  If the height is smaller than the
      # font height, it will get raised to the font height.
      line_height = 0

      # Possible values are:
      # full: Allow a small subset of html markup in notifications:
      #        <b>bold</b>
      #        <i>italic</i>
      #        <s>strikethrough</s>
      #        <u>underline</u>
      #
      #        For a complete reference see
      #        <https://docs.gtk.org/Pango/pango_markup.html>.
      #
      # strip: This setting is provided for compatibility with some broken
      #        clients that send markup even though it's not enabled on the
      #        server. Dunst will try to strip the markup but the parsing is
      #        simplistic so using this option outside of matching rules for
      #        specific applications *IS GREATLY DISCOURAGED*.
      #
      # no:    Disable markup parsing, incoming notifications will be treated as
      #        plain text. Dunst will not advertise that it has the body-markup
      #        capability if this is set as a global setting.
      #
      # It's important to note that markup inside the format option will be parsed
      # regardless of what this is set to.
      markup = full

      # The format of the message.  Possible variables are:
      #   %a  appname
      #   %s  summary
      #   %b  body
      #   %i  iconname (including its path)
      #   %I  iconname (without its path)
      #   %p  progress value if set ([  0%] to [100%]) or nothing
      #   %n  progress value if set without any extra characters
      #   %%  Literal %
      # Markup is allowed
      format = "<b>%s</b>\n%b"

      # Alignment of message text.
      # Possible values are "left", "center" and "right".
      alignment = left

      # Vertical alignment of message text and icon.
      # Possible values are "top", "center" and "bottom".
      vertical_alignment = center

      # Show age of message if message is older than show_age_threshold
      # seconds.
      # Set to -1 to disable.
      show_age_threshold = 60

      # Specify where to make an ellipsis in long lines.
      # Possible values are "start", "middle" and "end".
      ellipsize = middle

      # Ignore newlines '\n' in notifications.
      ignore_newline = no

      # Stack together notifications with the same content
      stack_duplicates = true

      # Hide the count of stacked notifications with the same content
      hide_duplicate_count = false

      # Display indicators for URLs (U) and actions (A).
      show_indicators = yes

      ### Icons ###

      # Align icons left/right/top/off
      icon_position = left

      # Scale small icons up to this size, set to 0 to disable. Helpful
      # for e.g. small files or high-dpi screens. In case of conflict,
      # max_icon_size takes precedence over this.
      min_icon_size = 0

      # Scale larger icons down to this size, set to 0 to disable
      max_icon_size = 60

      # Paths to default icons.
      icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

      ### History ###

      # Should a notification popped up from history be sticky or timeout
      # as if it would normally do.
      sticky_history = yes

      # Maximum amount of notifications kept in history
      history_length = 20

      # Redisplay last message(s). Equivalent dunstctl command:
      # dunstctl history-pop
      # history = mod4+n

      ### Misc/Advanced ###

      # dmenu path.
      dmenu = /usr/bin/dmenu -p dunst:

      # Browser for opening urls in context menu.
      browser = /usr/bin/xdg-open

      # Always run rule-defined scripts, even if the notification is suppressed
      always_run_script = true

      # Define the title of the windows spawned by dunst
      title = Dunst

      # Define the class of the windows spawned by dunst
      class = Dunst

      # Define the corner radius of the notification window
      # in pixel size. If the radius is 0, you have no rounded
      # corners.
      # The radius will be automatically lowered if it exceeds half of the
      # notification height to avoid clipping text and/or icons.
      corner_radius = 0

      # Ignore the dbus closeNotification message.
      # Useful to enforce the timeout set by dunst configuration. Without this
      # parameter, an application may close the notification sent before the
      # user defined timeout.
      ignore_dbusclose = false

      ### Wayland ###
      # These settings are Wayland-specific. They have no effect when using X11

      # Uncomment this if you want to let notications appear under fullscreen
      # applications (default: overlay)
      # layer = top

      # Set this to true to use X11 output on Wayland.
      force_xwayland = false

      ### Legacy

      # Use the Xinerama extension instead of RandR for multi-monitor support.
      # This setting is provided for compatibility with older nVidia drivers that
      # do not support RandR and using it on systems that support RandR is highly
      # discouraged.
      #
      # By enabling this setting dunst will not be able to detect when a monitor
      # is connected or disconnected which might break follow mode if the screen
      # layout changes.
      force_xinerama = false

      ### mouse

      # Defines list of actions for each mouse event
      # Possible values are:
      # * none: Don't do anything.
      # * do_action: Invoke the action determined by the action_name rule. If there is no
      #              such action, open the context menu.
      # * open_url: If the notification has exactly one url, open it. If there are multiple
      #             ones, open the context menu.
      # * close_current: Close current notification.
      # * close_all: Close all notifications.
      # * context: Open context menu for the notification.
      # * context_all: Open context menu for all notifications.
      # These values can be strung together for each mouse event, and
      # will be executed in sequence.
      mouse_left_click = close_current
      mouse_middle_click = do_action, close_current
      mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
      # Calculate the dpi to use on a per-monitor basis.
      # If this setting is enabled the Xft.dpi value will be ignored and instead
      # dunst will attempt to calculate an appropriate dpi value for each monitor
      # using the resolution and physical size. This might be useful in setups
      # where there are multiple screens with very different dpi values.
      per_monitor_dpi = false

  [urgency_low]
      # IMPORTANT: colors have to be defined in quotation marks.
      # Otherwise the "#" and following would be interpreted as a comment.
      background = "#222222"
      foreground = "#888888"
      timeout = 5
      # Icon for notifications with low urgency, uncomment to enable
      #default_icon = /path/to/icon

  [urgency_normal]
      background = "#1c252acc"
      foreground = "#cad0da"
      timeout = 5
      # Icon for notifications with normal urgency, uncomment to enable
      #default_icon = /path/to/icon

  [urgency_critical]
      background = "#900000aa"
      foreground = "#cad0da"
      frame_color = "#ff0000aa"
      timeout = 10
      # Icon for notifications with critical urgency, uncomment to enable
      #default_icon = /path/to/icon

  # Every section that isn't one of the above is interpreted as a rules to
  # override settings for certain messages.
  #
  # Messages can be matched by
  #    appname (discouraged, see desktop_entry)
  #    body
  #    category
  #    desktop_entry
  #    icon
  #    match_transient
  #    msg_urgency
  #    stack_tag
  #    summary
  #
  # and you can override the
  #    background
  #    foreground
  #    format
  #    frame_color
  #    fullscreen
  #    new_icon
  #    set_stack_tag
  #    set_transient
  #    set_category
  #    timeout
  #    urgency
  #    icon_position
  #    skip_display
  #    history_ignore
  #    action_name
  #    word_wrap
  #    ellipsize
  #    alignment
  #    hide_text
  #
  # Shell-like globbing will get expanded.
  #
  # Instead of the appname filter, it's recommended to use the desktop_entry filter.
  # GLib based applications export their desktop-entry name. In comparison to the appname,
  # the desktop-entry won't get localized.
  #
  # SCRIPTING
  # You can specify a script that gets run when the rule matches by
  # setting the "script" option.
  # The script will be called as follows:
  #   script appname summary body icon urgency
  # where urgency can be "LOW", "NORMAL" or "CRITICAL".
  #
  # NOTE: It might be helpful to run dunst -print in a terminal in order
  # to find fitting options for rules.

  # Disable the transient hint so that idle_threshold cannot be bypassed from the
  # client
  #[transient_disable]
  #    match_transient = yes
  #    set_transient = no
  #
  # Make the handling of transient notifications more strict by making them not
  # be placed in history.
  #[transient_history_ignore]
  #    match_transient = yes
  #    history_ignore = yes

  # fullscreen values
  # show: show the notifications, regardless if there is a fullscreen window opened
  # delay: displays the new notification, if there is no fullscreen window active
  #        If the notification is already drawn, it won't get undrawn.
  # pushback: same as delay, but when switching into fullscreen, the notification will get
  #           withdrawn from screen again and will get delayed like a new notification
  #[fullscreen_delay_everything]
  #    fullscreen = delay
  #[fullscreen_show_critical]
  #    msg_urgency = critical
  #    fullscreen = show

  #[espeak]
  #    summary = "*"
  #    script = dunst_espeak.sh

  #[script-test]
  #    summary = "*script*"
  #    script = dunst_test.sh

  #[ignore]
  #    # This notification will not be displayed
  #    summary = "foobar"
  #    skip_display = true

  #[history-ignore]
  #    # This notification will not be saved in history
  #    summary = "foobar"
  #    history_ignore = yes

  #[skip-display]
  #    # This notification will not be displayed, but will be included in the history
  #    summary = "foobar"
  #    skip_display = yes

  #[signed_on]
  #    appname = Pidgin
  #    summary = "*signed on*"
  #    urgency = low
  #
  #[signed_off]
  #    appname = Pidgin
  #    summary = *signed off*
  #    urgency = low
  #
  #[says]
  #    appname = Pidgin
  #    summary = *says*
  #    urgency = critical
  #
  #[twitter]
  #    appname = Pidgin
  #    summary = *twitter.com*
  #    urgency = normal
  #
  #[stack-volumes]
  #    appname = "some_volume_notifiers"
  #    set_stack_tag = "volume"
  #
  # vim: ft=cfg

#+end_src

** Neofetch
:PROPERTIES:
:header-args: :tangle ./.config/neofetch/config.conf
:END:

Neofetch config

*** Print information

#+begin_src sh

  print_info()
  {
      prin "${cl17}──────────\n Hardware Information \n──────────"
      info " ​ ​ Host\n \n " model
      # the original cpu info is too long
      # info " ​ ​  " cpu
      prin " ​ ​ ${cl17}CPU\n \n \n \n \n ${cl0}AMD Ryzen 5 3500U (8) @ 2.1GHz"
      # the original gpu info is too long
      # info " ​ ​ GPU\n \n \n " gpu
      prin " ​ ​ ${cl17}CPU\n \n \n \n \n ${cl0}AMD ATI Radeon Vega Series"
      info " ​ ​ Mem\n \n \n " memory
      info " ​ ​ Res\n \n \n " resolution
      prin "${cl17}──────────\n Software Information \n──────────"
      info " ​ ​ OS\n \n \n \n " distro
      info " ​ ​ Kernel" kernel
      info " ​ ​ DE/WM\n " wm
      info " ​ ​ Shell\n " shell
      info " ​ ​ Term\n \n " term
      info " ​ ​ Font\n \n " term_font
      info " ​ ​ Pkgs\n \n " packages
      info " ​ ​ IP\n \n \n \n " local_ip
      prin "${cl17}─────────────────\n Colors \n─────────────────"
      prin
      prin "\n \n \n \n \n ${cl1}\n \n \n \n \n${cl2}\n \n \n \n \n${cl3}\n \n \n \n \n${cl4}\n \n \n \n \n${cl5}\n \n \n \n \n${cl6}\n \n \n \n \n${cl7}\n \n \n \n \n${cl8}\n \n \n \n \n"
      prin "\n \n \n \n \n ${cl9}\n \n \n \n \n${cl10}\n \n \n \n \n${cl11}\n \n \n \n \n${cl12}\n \n \n \n \n${cl13}\n \n \n \n \n${cl14}\n \n \n \n \n${cl15}\n \n \n \n \n${cl16}\n \n \n \n \n"
  }

#+end_src

*** Colors for custom colorblocks

#+begin_src sh

  reset="\033[0m"
  black="\033[1;40m"
  red="\033[1;41m"
  green="\033[1;42m"
  yellow="\033[1;43m"
  blue="\033[1;44m"
  magenta="\033[1;45m"
  cyan="\033[1;46m"
  white="\033[1;47m"
  bblack="\033[1;100m"
  bred="\033[1;101m"
  bgreen="\033[1;102m"
  byellow="\033[1;103m"
  bblue="\033[1;104m"
  bmagenta="\033[1;105m"
  bcyan="\033[1;106m"
  bwhite="\033[1;107m"
  cl0="${reset}"
  cl1="${black}"
  cl2="${red}"
  cl3="${green}"
  cl4="${yellow}"
  cl5="${blue}"
  cl6="${magenta}"
  cl7="${cyan}"
  cl8="${white}"
  cl9="${bblack}"
  cl10="${bred}"
  cl11="${bgreen}"
  cl12="${byellow}"
  cl13="${bblue}"
  cl14="${bmagenta}"
  cl15="${bcyan}"
  cl16="${bwhite}"
  cl17="\033[1;36m"

#+end_src

*** COMMENT Title

#+begin_src sh

  # Hide/Show Fully qualified domain name.
  #
  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --title_fqdn
  title_fqdn="off"

#+end_src

*** COMMENT Kernel

#+begin_src sh

  # Shorten the output of the kernel function.
  #
  # Default:  'on'
  # Values:   'on', 'off'
  # Flag:     --kernel_shorthand
  # Supports: Everything except *BSDs (except PacBSD and PC-BSD)
  #
  # Example:
  # on:  '4.8.9-1-ARCH'
  # off: 'Linux 4.8.9-1-ARCH'
  kernel_shorthand="on"

#+end_src

*** Distro
**** COMMENT Shorten the output of the distro function

#+begin_src sh

  # Default:  'off'
  # Values:   'on', 'tiny', 'off'
  # Flag:     --distro_shorthand
  # Supports: Everything except Windows and Haiku
  distro_shorthand="off"

#+end_src

**** Show/Hide OS architecture

#+begin_src sh

  # Show 'x86_64', 'x86' and etc in 'Distro:' output.
  #
  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --os_arch
  #
  # Example:
  # on:  'Arch Linux x86_64'
  # off: 'Arch Linux'
  os_arch="off"

#+end_src

*** COMMENT Uptime

#+begin_src sh

  # Shorten the output of the uptime function
  #
  # Default: 'on'
  # Values:  'on', 'tiny', 'off'
  # Flag:    --uptime_shorthand
  #
  # Example:
  # on:   '2 days, 10 hours, 3 mins'
  # tiny: '2d 10h 3m'
  # off:  '2 days, 10 hours, 3 minutes'
  uptime_shorthand="on"

#+end_src

*** Memory
**** Show memory pecentage in output

#+begin_src sh

  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --memory_percent
  #
  # Example:
  # on:   '1801MiB / 7881MiB (22%)'
  # off:  '1801MiB / 7881MiB'
  memory_percent="on"

#+end_src

**** COMMENT Change memory output unit

#+begin_src sh

  # Default: 'mib'
  # Values:  'kib', 'mib', 'gib'
  # Flag:    --memory_unit
  #
  # Example:
  # kib  '1020928KiB / 7117824KiB'
  # mib  '1042MiB / 6951MiB'
  # gib: ' 0.98GiB / 6.79GiB'
  memory_unit="mib"

#+end_src

*** Packages

#+begin_src sh

  # Show/Hide Package Manager names.
  #
  # Default: 'tiny'
  # Values:  'on', 'tiny' 'off'
  # Flag:    --package_managers
  #
  # Example:
  # on:   '998 (pacman), 8 (flatpak), 4 (snap)'
  # tiny: '908 (pacman, flatpak, snap)'
  # off:  '908'
  package_managers="on"

#+end_src

*** COMMENT Shell
**** Show the path to $SHELL

#+begin_src sh

  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --shell_path
  #
  # Example:
  # on:  '/bin/bash'
  # off: 'bash'
  shell_path="off"

#+end_src

**** Show $SHELL version

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --shell_version
  #
  # Example:
  # on:  'bash 4.4.5'
  # off: 'bash'
  shell_version="on"

#+end_src

*** CPU
**** COMMENT CPU speed type

#+begin_src sh

  # Default:  'bios_limit'
  # Values:   'scaling_cur_freq', 'scaling_min_freq', 'scaling_max_freq', 'bios_limit'.
  # Flag:     --speed_type
  # Supports: Linux with 'cpufreq'
  # NOTE: Any file in '/sys/devices/system/cpu/cpu0/cpufreq' can be used as a value.
  speed_type="bios_limit"

#+end_src

**** CPU speed shorthand

#+begin_src sh

  # Default: 'off'
  # Values:  'on', 'off'.
  # Flag:    --speed_shorthand
  # NOTE: This flag is not supported in systems with CPU speed less than 1 GHz
  #
  # Example:
  # on:    'i7-6500U (4) @ 3.1GHz'
  # off:   'i7-6500U (4) @ 3.100GHz'
  speed_shorthand="on"

#+end_src

**** COMMENT Enable/Disable CPU brand in output

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --cpu_brand
  #
  # Example:
  # on:   'Intel i7-6500U'
  # off:  'i7-6500U (4)'
  cpu_brand="on"

#+end_src

**** COMMENT CPU Speed

#+begin_src sh

  # Hide/Show CPU speed.
  #
  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --cpu_speed
  #
  # Example:
  # on:  'Intel i7-6500U (4) @ 3.1GHz'
  # off: 'Intel i7-6500U (4)'
  cpu_speed="on"

#+end_src

**** COMMENT CPU Cores

#+begin_src sh

  # Display CPU cores in output
  #
  # Default: 'logical'
  # Values:  'logical', 'physical', 'off'
  # Flag:    --cpu_cores
  # Support: 'physical' doesn't work on BSD.
  #
  # Example:
  # logical:  'Intel i7-6500U (4) @ 3.1GHz' (All virtual cores)
  # physical: 'Intel i7-6500U (2) @ 3.1GHz' (All physical cores)
  # off:      'Intel i7-6500U @ 3.1GHz'
  cpu_cores="logical"

#+end_src

**** COMMENT CPU Temperature

#+begin_src sh

  # Hide/Show CPU temperature.
  # Note the temperature is added to the regular CPU function.
  #
  # Default:  'off'
  # Values:   'C', 'F', 'off'
  # Flag:     --cpu_temp
  # Supports: Linux, BSD
  # NOTE: For FreeBSD and NetBSD-based systems, you'll need to enable
  #       coretemp kernel module. This only supports newer Intel processors.
  #
  # Example:
  # C:   'Intel i7-6500U (4) @ 3.1GHz [27.2°C]'
  # F:   'Intel i7-6500U (4) @ 3.1GHz [82.0°F]'
  # off: 'Intel i7-6500U (4) @ 3.1GHz'
  cpu_temp="off"

#+end_src

*** COMMENT GPU
**** Enable/Disable GPU brand

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --gpu_brand
  #
  # Example:
  # on:  'AMD HD 7950'
  # off: 'HD 7950'
  gpu_brand="on"

#+end_src

**** Which GPU to display

#+begin_src sh

  # Default:  'all'
  # Values:   'all', 'dedicated', 'integrated'
  # Flag:     --gpu_type
  # Supports: Linux
  #
  # Example:
  # all:
  #   GPU1: AMD HD 7950
  #   GPU2: Intel Integrated Graphics
  #
  # dedicated:
  #   GPU1: AMD HD 7950
  #
  # integrated:
  #   GPU1: Intel Integrated Graphics
  gpu_type="all"

#+end_src

*** Resolution

#+begin_src sh

  # Display refresh rate next to each monitor
  #
  # Default:  'off'
  # Values:   'on', 'off'
  # Flag:     --refresh_rate
  # Supports: Doesn't work on Windows.
  #
  # Example:
  # on:  '1920x1080 @ 60Hz'
  # off: '1920x1080'
  refresh_rate="on"

#+end_src

*** COMMENT GTK Theme / Icons / Font
**** Shorten output of GTK

#+begin_src sh

  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --gtk_shorthand
  #
  # Example:
  # on:  'Numix, Adwaita'
  # off: 'Numix [GTK2], Adwaita [GTK3]'
  gtk_shorthand="off"

#+end_src

**** Enable/Disable GTK2

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --gtk2
  #
  # Example:
  # on:  'Numix [GTK2], Adwaita [GTK3]'
  # off: 'Adwaita [GTK3]'
  gtk2="on"

#+end_src

**** Enable/Disable GTK3

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --gtk3
  #
  # Example:
  # on:  'Numix [GTK2], Adwaita [GTK3]'
  # off: 'Numix [GTK2]'
  gtk3="on"

#+end_src

*** COMMENT IP address
**** Website to ping for the public IP

#+begin_src sh

  # Default: 'http://ident.me'
  # Values:  'url'
  # Flag:    --ip_host
  public_ip_host="http://ident.me"

#+end_src

**** Public IP timeout

#+begin_src sh

  # Default: '2'
  # Values:  'int'
  # Flag:    --ip_timeout
  public_ip_timeout=2

#+end_src

*** COMMENT Desktop evironment

#+begin_src sh

  # Show Desktop Environment version
  #
  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --de_version
  de_version="on"

#+end_src

*** COMMENT Disk
**** Which disks to display

#+begin_src sh

  # The values can be any /dev/sdXX, mount point or directory.
  # NOTE: By default we only show the disk info for '/'.
  #
  # Default: '/'
  # Values:  '/', '/dev/sdXX', '/path/to/drive'.
  # Flag:    --disk_show
  #
  # Example:
  # disk_show=('/' '/dev/sdb1'):
  #      'Disk (/): 74G / 118G (66%)'
  #      'Disk (/mnt/Videos): 823G / 893G (93%)'
  #
  # disk_show=('/'):
  #      'Disk (/): 74G / 118G (66%)'
  disk_show=('/')

#+end_src

**** Disk subtitle

#+begin_src sh

  # What to append to the Disk subtitle.
  #
  # Default: 'mount'
  # Values:  'mount', 'name', 'dir', 'none'
  # Flag:    --disk_subtitle
  #
  # Example:
  # name:   'Disk (/dev/sda1): 74G / 118G (66%)'
  #         'Disk (/dev/sdb2): 74G / 118G (66%)'
  #
  # mount:  'Disk (/): 74G / 118G (66%)'
  #         'Disk (/mnt/Local Disk): 74G / 118G (66%)'
  #         'Disk (/mnt/Videos): 74G / 118G (66%)'
  #
  # dir:    'Disk (/): 74G / 118G (66%)'
  #         'Disk (Local Disk): 74G / 118G (66%)'
  #         'Disk (Videos): 74G / 118G (66%)'
  #
  # none:   'Disk: 74G / 118G (66%)'
  #         'Disk: 74G / 118G (66%)'
  #         'Disk: 74G / 118G (66%)'
  disk_subtitle="mount"

#+end_src

**** Disk percent

#+begin_src sh

  # Show/Hide disk percent.
  #
  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --disk_percent
  #
  # Example:
  # on:  'Disk (/): 74G / 118G (66%)'
  # off: 'Disk (/): 74G / 118G'
  disk_percent="on"

#+end_src

*** COMMENT Song
**** Manually specify a music player

#+begin_src sh

  # Default: 'auto'
  # Values:  'auto', 'player-name'
  # Flag:    --music_player
  #
  # Available values for 'player-name':
  #
  # amarok
  # audacious
  # banshee
  # bluemindo
  # clementine
  # cmus
  # deadbeef
  # deepin-music
  # dragon
  # elisa
  # exaile
  # gnome-music
  # gmusicbrowser
  # gogglesmm
  # guayadeque
  # io.elementary.music
  # iTunes
  # juk
  # lollypop
  # mocp
  # mopidy
  # mpd
  # muine
  # netease-cloud-music
  # olivia
  # playerctl
  # pogo
  # pragha
  # qmmp
  # quodlibet
  # rhythmbox
  # sayonara
  # smplayer
  # spotify
  # strawberry
  # tauonmb
  # tomahawk
  # vlc
  # xmms2d
  # xnoise
  # yarock
  music_player="auto"

#+end_src

**** Format to display song information

#+begin_src sh

  # Default: '%artist% - %album% - %title%'
  # Values:  '%artist%', '%album%', '%title%'
  # Flag:    --song_format
  #
  # Example:
  # default: 'Song: Jet - Get Born - Sgt Major'
  song_format="%artist% - %title%"

#+end_src

**** Print the Artist, Album and Title on separate lines

#+begin_src sh

  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --song_shorthand
  #
  # Example:
  # on:  'Artist: The Fratellis'
  #      'Album: Costello Music'
  #      'Song: Chelsea Dagger'
  #
  # off: 'Song: The Fratellis - Costello Music - Chelsea Dagger'
  song_shorthand="off"

#+end_src

**** 'mpc' arguments 

#+begin_src sh

  # Default: ''
  # Example: mpc_args=(-h HOST -P PASSWORD)
  mpc_args=()

#+end_src

*** COMMENT Text colors

#+begin_src sh

  # Default: 'distro'
  # Values:  'distro', 'num' 'num' 'num' 'num' 'num' 'num'
  # Flag:    --colors
  #
  # Each number represents a different part of the text in
  # this order: 'title', '@', 'underline', 'subtitle', 'colon', 'info'
  #
  # Example:
  # colors=(distro)      - Text is colored based on Distro colors.
  # colors=(4 6 1 8 8 6) - Text is colored in the order above.
  colors=(distro)

#+end_src

*** Text options
**** COMMENT Toggle bold text

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --bold
  bold="on"

#+end_src

**** COMMENT Enable/Disable Underline

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --underline
  underline_enabled="on"

#+end_src

**** COMMENT Underline character

#+begin_src sh

  # Default: '-'
  # Values:  'string'
  # Flag:    --underline_char
  underline_char="-"

#+end_src

**** Info Separator

#+begin_src sh

  # Replace the default separator with the specified string.
  #
  # Default: ':'
  # Flag:    --separator
  #
  # Example:
  # separator="->":   'Shell-> bash'
  # separator=" =":   'WM = dwm'
  # separator="  "
  separator=" "

#+end_src

*** COMMENT Color blocks
**** Color block range

#+begin_src sh

  # The range of colors to print.
  #
  # Default: '0', '15'
  # Values:  'num'
  # Flag:    --block_range
  #
  # Example:
  #
  # Display colors 0-7 in the blocks.  (8 colors)
  # neofetch --block_range 0 7
  #
  # Display colors 0-15 in the blocks. (16 colors)
  # neofetch --block_range 0 15
  block_range=(0 15)

#+end_src

**** Toggle color blocks

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --color_blocks
  color_blocks="on"

#+end_src

**** Color block width in spaces

#+begin_src sh

  # Default: '3'
  # Values:  'num'
  # Flag:    --block_width
  block_width=3

#+end_src

**** Color block height in lines

#+begin_src sh

  # Default: '1'
  # Values:  'num'
  # Flag:    --block_height
  block_height=1

#+end_src

**** Color Alignment

#+begin_src sh

  # Default: 'auto'
  # Values:  'auto', 'num'
  # Flag:    --col_offset
  #
  # Number specifies how far from the left side of the terminal (in spaces) to
  # begin printing the columns, in case you want to e.g. center them under your
  # text.
  # Example:
  # col_offset="auto" - Default behavior of neofetch
  # col_offset=7      - Leave 7 spaces then print the colors
  col_offset="auto"

#+end_src

*** COMMENT Progress bar
**** Bar characters

#+begin_src sh

  # Default: '-', '='
  # Values:  'string', 'string'
  # Flag:    --bar_char
  #
  # Example:
  # neofetch --bar_char 'elapsed' 'total'
  # neofetch --bar_char '-' '='
  bar_char_elapsed="-"
  bar_char_total="="

#+end_src

**** Toggle Bar border

#+begin_src sh

  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --bar_border
  bar_border="on"

#+end_src

**** Progress bar length in spaces

#+begin_src sh

  # Number of chars long to make the progress bars.
  #
  # Default: '15'
  # Values:  'num'
  # Flag:    --bar_length
  bar_length=15

#+end_src

**** Progress bar colors

#+begin_src sh

  # When set to distro, uses your distro's logo colors.
  #
  # Default: 'distro', 'distro'
  # Values:  'distro', 'num'
  # Flag:    --bar_colors
  #
  # Example:
  # neofetch --bar_colors 3 4
  # neofetch --bar_colors distro 5
  bar_color_elapsed="distro"
  bar_color_total="distro"

#+end_src

**** Info display

#+begin_src sh

  # Display a bar with the info.
  #
  # Default: 'off'
  # Values:  'bar', 'infobar', 'barinfo', 'off'
  # Flags:   --cpu_display
  #          --memory_display
  #          --battery_display
  #          --disk_display
  #
  # Example:
  # bar:     '[---=======]'
  # infobar: 'info [---=======]'
  # barinfo: '[---=======] info'
  # off:     'info'
  cpu_display="on"
  memory_display="on"
  battery_display="on"
  disk_display="on"

#+end_src

*** COMMENT Backend settings
**** Image backend

#+begin_src sh

  # Default: 'ascii'
  # Values:  'ascii', 'caca', 'chafa', 'jp2a', 'iterm2', 'off',
  #          'pot', 'termpix', 'pixterm', 'tycat', 'w3m', 'kitty'
  # Flag:    --backend
  image_backend="ascii"

#+end_src

**** Image source

#+begin_src sh

  # Which image or ascii file to display.
  #
  # Default: 'auto'
  # Values:  'auto', 'ascii', 'wallpaper', '/path/to/img', '/path/to/ascii', '/path/to/dir/'
  #          'command output (neofetch --ascii "$(fortune | cowsay -W 30)")'
  # Flag:    --source
  #
  # NOTE: 'auto' will pick the best image source for whatever image backend is used.
  #       In ascii mode, distro ascii art will be used and in an image mode, your
  #       wallpaper will be used.
  image_source="auto"

#+end_src

*** COMMENT Ascii options
**** Ascii distro

#+begin_src sh

  # Which distro's ascii art to display.
  #
  # Default: 'auto'
  # Values:  'auto', 'distro_name'
  # Flag:    --ascii_distro
  # NOTE: AIX, Alpine, Anarchy, Android, Antergos, antiX, "AOSC OS",
  #       "AOSC OS/Retro", Apricity, ArcoLinux, ArchBox, ARCHlabs,
  #       ArchStrike, XFerience, ArchMerge, Arch, Artix, Arya, Bedrock,
  #       Bitrig, BlackArch, BLAG, BlankOn, BlueLight, bonsai, BSD,
  #       BunsenLabs, Calculate, Carbs, CentOS, Chakra, ChaletOS,
  #       Chapeau, Chrom*, Cleanjaro, ClearOS, Clear_Linux, Clover,
  #       Condres, Container_Linux, CRUX, Cucumber, Debian, Deepin,
  #       DesaOS, Devuan, DracOS, DarkOs, DragonFly, Drauger, Elementary,
  #       EndeavourOS, Endless, EuroLinux, Exherbo, Fedora, Feren, FreeBSD,
  #       FreeMiNT, Frugalware, Funtoo, GalliumOS, Garuda, Gentoo, Pentoo,
  #       gNewSense, GNOME, GNU, GoboLinux, Grombyang, Guix, Haiku, Huayra,
  #       Hyperbola, janus, Kali, KaOS, KDE_neon, Kibojoe, Kogaion,
  #       Korora, KSLinux, Kubuntu, LEDE, LFS, Linux_Lite,
  #       LMDE, Lubuntu, Lunar, macos, Mageia, MagpieOS, Mandriva,
  #       Manjaro, Maui, Mer, Minix, LinuxMint, MX_Linux, Namib,
  #       Neptune, NetBSD, Netrunner, Nitrux, NixOS, Nurunner,
  #       NuTyX, OBRevenge, OpenBSD, openEuler, OpenIndiana, openmamba,
  #       OpenMandriva, OpenStage, OpenWrt, osmc, Oracle, OS Elbrus, PacBSD,
  #       Parabola, Pardus, Parrot, Parsix, TrueOS, PCLinuxOS, Peppermint,
  #       popos, Porteus, PostMarketOS, Proxmox, Puppy, PureOS, Qubes, Radix,
  #       Raspbian, Reborn_OS, Redstar, Redcore, Redhat, Refracted_Devuan,
  #       Regata, Rosa, sabotage, Sabayon, Sailfish, SalentOS, Scientific,
  #       Septor, SereneLinux, SharkLinux, Siduction, Slackware, SliTaz,
  #       SmartOS, Solus, Source_Mage, Sparky, Star, SteamOS, SunOS,
  #       openSUSE_Leap, openSUSE_Tumbleweed, openSUSE, SwagArch, Tails,
  #       Trisquel, Ubuntu-Budgie, Ubuntu-GNOME, Ubuntu-MATE, Ubuntu-Studio,
  #       Ubuntu, Venom, Void, Obarun, windows10, Windows7, Xubuntu, Zorin,
  #       and IRIX have ascii logos
  # NOTE: Arch, Ubuntu, Redhat, and Dragonfly have 'old' logo variants.
  #       Use '{distro name}_old' to use the old logos.
  # NOTE: Ubuntu has flavor variants.
  #       Change this to Lubuntu, Kubuntu, Xubuntu, Ubuntu-GNOME,
  #       Ubuntu-Studio, Ubuntu-Mate  or Ubuntu-Budgie to use the flavors.
  # NOTE: Arcolinux, Dragonfly, Fedora, Alpine, Arch, Ubuntu,
  #       CRUX, Debian, Gentoo, FreeBSD, Mac, NixOS, OpenBSD, android,
  #       Antrix, CentOS, Cleanjaro, ElementaryOS, GUIX, Hyperbola,
  #       Manjaro, MXLinux, NetBSD, Parabola, POP_OS, PureOS,
  #       Slackware, SunOS, LinuxLite, OpenSUSE, Raspbian,
  #       postmarketOS, and Void have a smaller logo variant.
  #       Use '{distro name}_small' to use the small variants.
  ascii_distro="auto"

#+end_src

**** Ascii colors

#+begin_src sh

  # Default: 'distro'
  # Values:  'distro', 'num' 'num' 'num' 'num' 'num' 'num'
  # Flag:    --ascii_colors
  #
  # Example:
  # ascii_colors=(distro)      - Ascii is colored based on Distro colors.
  # ascii_colors=(4 6 1 8 8 6) - Ascii is colored using these colors.
  ascii_colors=(distro)

#+end_src

**** Bold ascii logo

#+begin_src sh

  # Whether or not to bold the ascii logo.
  #
  # Default: 'on'
  # Values:  'on', 'off'
  # Flag:    --ascii_bold
  ascii_bold="on"

#+end_src

*** Image options
**** COMMENT Image loop

#+begin_src sh

  # Setting this to on will make neofetch redraw the image constantly until
  # Ctrl+C is pressed. This fixes display issues in some terminal emulators.
  #
  # Default: 'off'
  # Values:  'on', 'off'
  # Flag:    --loop
  image_loop="off"

#+end_src

**** COMMENT Thumbnail directory

#+begin_src sh

  # Default: '~/.cache/thumbnails/neofetch'
  # Values:  'dir'
  thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"

#+end_src

**** COMMENT Crop mode

#+begin_src sh

  # Default: 'normal'
  # Values:  'normal', 'fit', 'fill'
  # Flag:    --crop_mode
  #
  # See this wiki page to learn about the fit and fill options.
  # https://github.com/dylanaraps/neofetch/wiki/What-is-Waifu-Crop%3F
  crop_mode="normal"

#+end_src

**** COMMENT Crop offset

#+begin_src sh

  # Note: Only affects 'normal' crop mode.
  #
  # Default: 'center'
  # Values:  'northwest', 'north', 'northeast', 'west', 'center'
  #          'east', 'southwest', 'south', 'southeast'
  # Flag:    --crop_offset
  crop_offset="center"

#+end_src

**** COMMENT Image size

#+begin_src sh

  # The image is half the terminal width by default.
  #
  # Default: 'auto'
  # Values:  'auto', '00px', '00%', 'none'
  # Flags:   --image_size
  #          --size
  image_size="auto"

#+end_src

**** Gap between image and text

#+begin_src sh

  # Default: '3'
  # Values:  'num', '-num'
  # Flag:    --gap
  gap=2

#+end_src

**** COMMENT Image offsets

#+begin_src sh

  # Only works with the w3m backend.
  #
  # Default: '0'
  # Values:  'px'
  # Flags:   --xoffset
  #          --yoffset
  yoffset=0
  xoffset=0

#+end_src

**** COMMENT Image background color

#+begin_src sh

  # Only works with the w3m backend.
  #
  # Default: ''
  # Values:  'color', 'blue'
  # Flag:    --bg_color
  background_color=

#+end_src

*** COMMENT Misc Options

#+begin_src sh

  # Stdout mode
  # Turn off all colors and disables image backend (ASCII/Image).
  # Useful for piping into another command.
  # Default: 'off'
  # Values: 'on', 'off'
  stdout="off"

#+end_src

* COMMENT Unused configs
** Fish
:PROPERTIES:
:header-args: :tangle ./.config/fish/config.fish
:END:

*** Adding to the path

First line removes the path; second line sets it. Without the first line, your path gets massive and
fish becomes very slow.

#+begin_src fish

  set -e fish_user_paths
  set -U fish_user_paths $HOME/.local/bin $HOME/Applications $fish_user_paths

#+end_src

*** Export

#+begin_src fish

  set fish_greeting                                 # Supresses fish's intro message

  # set -gx EDITOR "/bin/nvim"                      # $EDITOR use Emacs in terminal
  # set -gx VISUAL "emacsclient -c -a emacs"        # $VISUAL use Emacs in GUI mode

  # Don't shorten the working directory in the prompt
  set -g fish_prompt_pwd_dir_length 0

  # Sets the cursor type
  set -g fish_cursor_default block
  set -g fish_cursor_insert line
  set -g fish_cursor_replace_one underscore

  # "bat" as manpager
  set -x MANPAGER "sh -c 'col -bx | bat -l man -p'"

  # "vim" as manpager
  # set -x MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

  # "nvim" as manpager
  # set -x MANPAGER "nvim -c 'set ft=man' -"

#+end_src

*** Keybinding

#+begin_src fish

  # Set either default vi mode
  function fish_user_key_bindings
      fish_vi_key_bindings
  end

  bind -M insert -m default jj backward-char force-repaint

#+end_src

*** Autocomplete and highlight colors

#+begin_src fish

  set fish_color_normal '#bbc2cf'
  set fish_color_autosuggestion '#7b7278'
  set fish_color_command magenta
  set fish_color_error --bold red
  set fish_color_param '#e7c07b'
  # set fish_color_quote
  set fish_color_cwd green --bold
  set fish_color_user blue --bold
  set fish_color_host '#ffaf00' --bold

#+end_src

*** Prompt

#+begin_src fish

  function fish_prompt
      set_color $fish_color_autosuggestion
      echo -n "┌["
      set_color $fish_color_cwd
      echo -n (prompt_pwd)
      set_color normal
      set_color $fish_color_autosuggestion
      echo -n "]─["
      set_color $fish_color_user
      echo -n $USER
      set_color normal
      set_color $fish_color_autosuggestion
      echo -n "]─["
      set_color $fish_color_host
      echo -n $hostname
      set_color normal
      set_color $fish_color_autosuggestion
      echo "]"
      echo -n "└> "
      set_color brcyan
      echo -n "λ "
      set_color normal
  end

  function fish_mode_prompt
  end

  function fish_right_prompt
  end

#+end_src

*** Functions

#+begin_src fish

  # Functions needed for !! and !$
  function __history_previous_command
      switch (commandline -t)
          case "!"
              commandline -t $history[1]; commandline -f repaint
          case "*"
              commandline -i !
      end
  end

  function __history_previous_command_arguments
      switch (commandline -t)
          case "!"
              commandline -t ""
              commandline -f history-token-search-backward
          case "*"
              commandline -i '$'
      end
  end

  # The bindings for !! and !$
  if [ $fish_key_bindings = fish_vi_key_bindings ];
      bind -Minsert ! __history_previous_command
      bind -Minsert '$' __history_previous_command_arguments
  else
      bind ! __history_previous_command
      bind '$' __history_previous_command_arguments
  end

  # Function for creating a backup file
  # ex: backup file.txt
  # result: copies file as file.txt.bak
  function backup --argument filename
      cp $filename $filename.bak
  end

  # Function for copying files and directories, even recursively.
  # ex: copy DIRNAME LOCATIONS
  # result: copies the directory and all of its contents.
  function copy
      set count (count $argv | tr -d \n)
      if test "$count" = 2; and test -d "$argv[1]"
          set from (echo $argv[1] | trim-right /)
          set to (echo $argv[2])
          command cp -r $from $to
      else
          command cp $argv
      end
  end

  # Function for printing a column (splits input on whitespace)
  # ex: echo 1 2 3 | coln 3
  # output: 3
  function coln
      while read -l input
          echo $input | awk '{print $'$argv[1]'}'
      end
  end

  # Function for printing a row
  # ex: seq 3 | rown 3
  # output: 3
  function rown --argument index
      sed -n "$index p"
  end

  # Function for ignoring the first 'n' lines
  # ex: seq 10 | skip 5
  # results: prints everything but the first 5 lines
  function skip --argument n
      tail +(math 1 + $n)
  end

  # Function for taking the first 'n' lines
  # ex: seq 10 | take 5
  # results: prints only the first 5 lines
  function take --argument number
      head -$number
  end

  # Function for org-agenda
  function org-search -d "send a search string to org-mode"
      set -l output (/usr/bin/emacsclient -a "" -e "(message \"%s\" (mapconcat #'substring-no-properties \
          (mapcar #'org-link-display-format \
          (org-ql-query \
          :select #'org-get-heading \
          :from  (org-agenda-files) \
          :where (org-ql--query-string-to-sexp \"$argv\"))) \
          \"
      \"))")
      printf $output
  end

#+end_src

*** Aliases

#+begin_src fish

  # root privileges
  alias doas="doas --"

  # navigation
  alias ..='cd ..'
  alias ...='cd ../..'
  alias .3='cd ../../..'
  alias .4='cd ../../../..'
  alias .5='cd ../../../../..'

  # vim
  alias vim='nvim'

  # bat
  alias cat='bat'

  # broot
  alias br='broot -dhp'
  alias bs='broot --sizes'

  # Changing "ls" to "exa"
  alias ls='exa -al --color=always --group-directories-first' # my preferred listing
  alias la='exa -a --color=always --group-directories-first'  # all files and dirs
  alias ll='exa -l --color=always --group-directories-first'  # long format
  alias lt='exa -aT --color=always --group-directories-first' # tree listing
  alias l.='exa -a | egrep "^\."'

  # pacman and yay
  alias pacsyu='sudo pacman -Syyu'                 # update only standard pkgs
  alias yaysua='yay -Sua --noconfirm'              # update only AUR pkgs (yay)
  alias yaysyu='yay -Syu --noconfirm'              # update standard pkgs and AUR pkgs (yay)
  alias parsua='paru -Sua --noconfirm'             # update only AUR pkgs (paru)
  alias parsyu='paru -Syu --noconfirm'             # update standard pkgs and AUR pkgs (paru)
  alias unlock='sudo rm /var/lib/pacman/db.lck'    # remove pacman lock
  alias cleanup='sudo pacman -Rns (pacman -Qtdq)'  # remove orphaned packages

  # get fastest mirrors
  alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
  alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
  alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
  alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

  # Colorize grep output (good for log files)
  alias grep='grep --color=auto'
  alias egrep='egrep --color=auto'
  alias fgrep='fgrep --color=auto'

  # adding flags
  alias df='df -h'                          # human-readable sizes
  alias free='free -m'                      # show sizes in MB
  alias lynx='lynx -cfg=~/.lynx/lynx.cfg -lss=~/.lynx/lynx.lss -vikeys'
  alias vifm='./.config/vifm/scripts/vifmrun'
  alias ncmpcpp='ncmpcpp ncmpcpp_directory=$HOME/.config/ncmpcpp/'
  alias mocp='mocp -M "$XDG_CONFIG_HOME"/moc -O MOCDir="$XDG_CONFIG_HOME"/moc'

  ## get top process eating memory
  alias psmem='ps auxf | sort -nr -k 4'
  alias psmem10='ps auxf | sort -nr -k 4 | head -10'

  ## get top process eating cpu ##
  alias pscpu='ps auxf | sort -nr -k 3'
  alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

  # get error messages from journalctl
  alias jctl="journalctl -p 3 -xb"

  # gpg encryption
  # verify signature for isos
  alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
  # receive the key of a developer
  alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

  # bare git repo alias for dotfiles
  alias config="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"

  # termbin
  alias tb="nc termbin.com 9999"

  # the terminal rickroll
  alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

  # Thinkorswim
  alias tos="~/thinkorswim/thinkorswim"

  # force all kakoune windows into one session
  alias kak="/usr/bin/kak -c mysession"
  alias kaks="/usr/bin/kak -s mysession"
  alias kakd="/usr/bin/kak -d -s mysession &"

#+end_src

*** Run commands

#+begin_src fish

  echo ""
  neofetch

#+end_src

** Bash
*** .bashrc
:PROPERTIES:
:header-args: :tangle ./.bashrc
:END:

**** Non-Interactive Shell

If not running interactively, don't do anything.

#+begin_src sh

  [[ $- != *i* ]] && return

#+end_src

**** Prompt

#+begin_src sh

  prefix="λ"
  green="\033[38;5;2m\033[1;1m"
  blue="\033[34;1m"
  bblack="\033[38;5;8m"
  borange="\033[38;5;11m\033[1;1m"
  bcyan="\033[38;5;14m"
  reset="\033[0m"

  PS1="\
  ${bblack}┌[${reset}\
  ${green}\w${reset}\
  ${bblack}]─[${reset}\
  ${blue}\u${reset}\
  ${bblack}]─[${reset}\
  ${borange}\h${reset}\
  ${bblack}]${reset}\n\
  ${bblack}└>${reset} \
  ${bcyan}${prefix}${reset} "

#+end_src

**** Keybindings

#+begin_src sh

  set -o vi
  bind -m vi-insert '"jj":vi-movement-mode'

#+end_src

**** Aliases

#+begin_src sh

  alias stcpu="stress -c 8"
  alias stmem="stress -vm 2 --vm-bytes"

  alias pacman="sudo pacman"
  alias pacsyu="sudo pacman -Syu"
  alias yaysyu="yay -Syu"

  alias ls="exa -la --color=always --group-directories-first"
  alias cat="bat"
  alias rm="rm -r"
  alias cp="cp -r"

#+end_src

**** Misc

#+begin_src sh

  . $HOME/.config/lf/.lfrc

  echo ""
  neofetch

#+end_src

*** .inputrc

Сhanges the shape of the cursor depending on the VI mode in Bash.

#+begin_src sh :tangle ./.inputrc

  set show-mode-in-prompt on
  set vi-cmd-mode-string "\1\e[2 q\2"
  set vi-ins-mode-string "\1\e[6 q\2"

#+end_src

** Polybar

Configuration based on https://github.sre.pub/adi1090x/polybar-themes

*** Launch script

#+begin_src sh :tangle ./.config/polybar/launch.sh :tangle-mode (identity #o755)

  #!/bin/sh

  dir="$HOME/.config/polybar/"

  # Terminate already running bar instances
  killall -q polybar

  # Wait until the processes have been shut down
  while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done

  # Launch the bar
  polybar -c "$dir"/config.ini workspaces &
  polybar -c "$dir"/config.ini tray &

#+end_src

*** Config
:PROPERTIES:
:header-args: :tangle ./.config/polybar/config.ini
:END:

**** Global WM settings

#+begin_src conf

  [global/wm]
  ; Adjust the _NET_WM_STRUT_PARTIAL top value
  ; Used for top aligned bars
  margin-bottom = 0

  ; Adjust the _NET_WM_STRUT_PARTIAL bottom value
  ; Used for bottom aligned bars
  margin-top = 0

#+end_src

**** File Inclusion

Include an external file, like module file, etc.

#+begin_src conf

  include-file = ~/.config/polybar/bars.ini
  include-file = ~/.config/polybar/colors.ini
  include-file = ~/.config/polybar/modules.ini
  include-file = ~/.config/polybar/user_modules.ini

#+end_src

**** Bar settings

#+begin_src conf

  [bar/main]
  ; Use either of the following command to list available outputs:
  ; If unspecified, the application will pick the first one it finds.
  ; $ polybar -m | cut -d ':' -f 1
  ; $ xrandr -q | grep " connected" | cut -d ' ' -f1
  monitor =

  ; Use the specified monitor as a fallback if the main one is not found.
  monitor-fallback =

  ; Require the monitor to be in connected state
  ; XRandR sometimes reports my monitor as being disconnected (when in use)
  monitor-strict = false

  ; Tell the Window Manager not to configure the window.
  ; Use this to detach the bar if your WM is locking its size/position.
  ; override-redirect = false

  ; Prefer fixed center position for the `modules-center` block
  ; When false, the center position will be based on the size of the other blocks.
  fixed-center = true

  ; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
  ; the percentage can optionally be extended with a pixel offset like so:
  ; 50%:-10, this will result in a width or height of 50% minus 10 pixels
  ; width = 98.7%
  height = 45

  ; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
  ; the percentage can optionally be extended with a pixel offset like so:
  ; 50%:-10, this will result in an offset in the x or y direction
  ; of 50% minus 10 pixels
  ; offset-x = 14px
  offset-y = 1%

  ; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
  background = ${color.shade2}

  ; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
  foreground = ${color.foreground}

  ; Background gradient (vertical steps)
  ;   background-[0-9]+ = #aarrggbb
  ;;background-0 =

  ; Value used for drawing rounded corners
  ; Note: This shouldn't be used together with border-size because the border
  ; doesn't get rounded
  ; Individual top/bottom values can be defined using:
  ;   radius-{top,bottom}
  radius-top = 0.0
  radius-bottom = 0.0

  ; Under-/overline pixel size and argb color
  ; Individual values can be defined using:
  ;   {overline,underline}-size
  ;   {overline,underline}-color
  underline-size = 2
  underline-color = ${color.foreground}

  ; Values applied to all borders
  ; Individual side values can be defined using:
  ;   border-{left,top,right,bottom}-size
  ;   border-{left,top,right,bottom}-color
  ; The top and bottom borders are added to the bar height, so the effective
  ; window height is:
  ;   height + border-top-size + border-bottom-size
  ; Meanwhile the effective window width is defined entirely by the width key and
  ; the border is placed withing this area. So you effectively only have the
  ; following horizontal space on the bar:
  ;   width - border-right-size - border-left-size
  border-size = 0
  border-color = ${color.foreground}

  ; Number of spaces to add at the beginning/end of the bar
  ; Individual side values can be defined using:
  ;   padding-{left,right}
  padding-left = 0
  padding-right = 0

  ; Number of spaces to add before/after each module
  ; Individual side values can be defined using:
  ;   module-margin-{left,right}
  module-margin-left = 0
  module-margin-right = 0

  ; Fonts are defined using <font-name>;<vertical-offset>
  ; Font names are specified using a fontconfig pattern.
  ;   font-0 = NotoSans-Regular:size=8;2
  ;   font-1 = MaterialIcons:size=10
  ;   font-2 = Termsynu:size=8;-1
  ;   font-3 = FontAwesome:size=10
  ; See the Fonts wiki page for more details

  font-0 = "Iosevka Nerd Font:pixelsize=13;4"
  font-1 = "MyFont:pixelsize=18;4"

  ; Modules are added to one of the available blocks
  ;   modules-left = cpu ram
  ;   modules-center = xwindow xbacklight
  ;   modules-right = ipc clock

  modules-left = launcher sep workspaces
  modules-center =
  modules-right = cpu memory alsa battery network date

  ; The separator will be inserted between the output of each module
  separator =

  ; Opacity value between 0.0 and 1.0 used on fade in/out
  dim-value = 1.0

  ; Value to be used to set the WM_NAME atom
  ; If the value is empty or undefined, the atom value
  ; will be created from the following template: polybar-[BAR]_[MONITOR]
  ; NOTE: The placeholders are not available for custom values
  wm-name =

  ; Locale used to localize various module data (e.g. date)
  ; Expects a valid libc locale, for example: sv_SE.UTF-8
  locale =

  ; Position of the system tray window
  ; If empty or undefined, tray support will be disabled
  ; NOTE: A center aligned tray will cover center aligned modules
  ;
  ; Available positions:
  ;   left
  ;   center
  ;   right
  ;   none
  tray-position = none

  ; If true, the bar will not shift its
  ; contents when the tray changes
  tray-detached = false

  ; Tray icon max size
  tray-maxsize = 16

  ; Background color for the tray container
  ; ARGB color (e.g. #f00, #ff992a, #ddff1023)
  ; By default the tray container will use the bar
  ; background color.
  ; tray-background = ${color.background}
  tray-background =

  ; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
  tray-offset-x = 0
  tray-offset-y = 0

  ; Pad the sides of each tray icon
  tray-padding = 0

  ; Scale factor for tray clients
  tray-scale = 1.0

  ; Restack the bar window and put it above the
  ; selected window manager's root
  ;
  ; Fixes the issue where the bar is being drawn
  ; on top of fullscreen window's
  ;
  ; Currently supported WM's:
  ;   bspwm
  ;   i3 (requires: `override-redirect = true`)
  ;;wm-restack =

  ; Set a DPI values used when rendering text
  ; This only affects scalable fonts
  ; dpi =

  ; Enable support for inter-process messaging
  ; See the Messaging wiki page for more details.
  enable-ipc = true

  ; Fallback click handlers that will be called if
  ; there's no matching module handler found.
  click-left =
  click-middle =
  click-right =
  scroll-up =
  scroll-down =
  double-click-left =
  double-click-middle =
  double-click-right =

  ; Requires polybar to be built with xcursor support (xcb-util-cursor)
  ; Possible values are:
  ; - default   : The default pointer as before, can also be an empty string (default)
  ; - pointer   : Typically in the form of a hand
  ; - ns-resize : Up and down arrows, can be used to indicate scrolling
  cursor-click =
  cursor-scroll =

  [bar/workspaces]
  inherit = bar/main
  fixed-center = false
  modules-left = workspaces
  modules-right =
  width = 315px
  offset-x = 14

  [bar/tray]
  inherit = bar/main
  fixed-center = false
  modules-left =
  modules-right = mycpu temperature mymemory battery keyboard updates date
  ; width = 764px
  width = 744px
  offset-x = 1142
  tray-position = adaptive

#+end_src

**** Application Settings

#+begin_src conf

  [settings]
  ; The throttle settings lets the eventloop swallow up til X events
  ; if they happen within Y millisecond after first event was received.
  ; This is done to prevent flood of update event.
  ;
  ; For example if 5 modules emit an update event at the same time, we really
  ; just care about the last one. But if we wait too long for events to swallow
  ; the bar would appear sluggish so we continue if timeout
  ; expires or limit is reached.
  ; throttle-output = 5
  ; throttle-output-for = 10

  ; Time in milliseconds that the input handler will wait between processing events
  ;throttle-input-for = 30

  ; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
  screenchange-reload = false

  ; Compositing operators
  ; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
  compositing-background = source
  compositing-foreground = over
  compositing-overline = over
  compositing-underline = over
  compositing-border = over

  ; Define fallback values used by all module formats
  ;format-foreground =
  ;format-background =
  ;format-underline =
  ;format-overline =
  ;format-spacing =
  ;format-padding =
  ;format-margin =
  ;format-offset =

  ; Enables pseudo-transparency for the bar
  ; If set to true the bar can be transparent without a compositor.
  pseudo-transparency = false

#+end_src

*** Colors
:PROPERTIES:
:header-args: :tangle ./.config/polybar/colors.ini
:END:

#+begin_src conf

  [color]

  ;; main colors
  background     = #bb1c252a
  background-alt = #1c252a
  foreground     = #cad0da
  red-background = #bbff6c6b

  red-foreground    = #ff6c6b
  green-foreground  = #98be65
  blue-foreground   = #51afef
  yellow-foreground = #ffaf00
  brown-foreground  = #c38a48
  cyan-foreground   = #46d9ff
  purple-foreground = #d499e5

  ; shades
  shade1 = #bb1c252a
  shade2 = #bb202b31
  shade3 = #bb253137
  shade4 = #bb29363e
  shade5 = #bb2e3c44
  shade6 = #bb32424b
  shade7 = #bb364852

#+end_src

*** COMMENT Bars
:PROPERTIES:
:header-args: :tangle ./.config/polybar/bars.ini
:END:

**** Bar

#+begin_src conf

  [bar]
  fill = 
  empty = 
  indicator = ⏽
  ; Nerd font :   ,  ⏽,  樂 籠 錄 , 雷 絛

#+end_src

**** Module volume

#+begin_src conf

  [module/volume]
  type = internal/alsa

  ; Soundcard to be used
  ; Usually in the format hw:# where # is the card number
  ; You can find the different card numbers in `/proc/asound/cards`
  master-soundcard = default
  speaker-soundcard = default
  headphone-soundcard = default

  ; Name of the master, speaker and headphone mixers
  ; Use the following command to list available mixer controls:
  ; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
  ; If master, speaker or headphone-soundcard isn't the default,
  ; use `amixer -c # scontrols` instead where # is the number
  ; of the master, speaker or headphone soundcard respectively
  ;
  ; Default: Master
  master-mixer = Master

  ; Optionally define speaker and headphone mixers
  ; Default: none
  ;;speaker-mixer = Speaker
  ; Default: none
  ;;headphone-mixer = Headphone

  ; NOTE: This is required if headphone_mixer is defined
  ; Use the following command to list available device controls
  ; $ amixer controls | sed -r "/CARD/\!d; s/.*=([0-9]+).*name='([^']+)'.*/printf '%3.0f: %s\n' '\1' '\2'/e" | sort
  ; You may also need to use `amixer -c # controls` as above for the mixer names
  ; Default: none
  ;;headphone-id = 9

  ; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
  ; Default: false
  ;;mapped = true

  ; Interval for volume increase/decrease (in percent points)
  ; Default: 5
  interval = 5

  ; Available tags:
  ;   <label-volume> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-volume = <ramp-volume> <bar-volume>
  format-volume-background = ${color.shade6}
  format-volume-padding = 2

  ; Available tags:
  ;   <label-muted> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-muted = <label-muted>
  format-muted-prefix = 
  format-muted-prefix-font = 2
  format-muted-background = ${color.shade6}
  format-muted-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  label-volume = %percentage%%

  ; Available tokens:
  ;   %percentage% (default
  label-muted = " Muted"
  label-muted-foreground = ${color.foreground}

  ; Only applies if <ramp-volume> is used
  ramp-volume-0 = 
  ramp-volume-1 = 
  ramp-volume-2 = 
  ramp-volume-font = 2

  ; Only applies if <bar-volume> is used
  bar-volume-width = 10
  bar-volume-gradient = false

  bar-volume-indicator = ${bar.indicator}
  bar-volume-indicator-foreground = ${color.foreground}

  bar-volume-fill = ${bar.fill}
  bar-volume-foreground-0 = ${color.foreground}
  bar-volume-foreground-1 = ${color.foreground}
  bar-volume-foreground-2 = ${color.foreground}

  bar-volume-empty = ${bar.empty}
  bar-volume-empty-foreground = ${color.foreground}

  ; If defined, it will replace <ramp-volume> when
  ; headphones are plugged in to `headphone_control_numid`
  ; If undefined, <ramp-volume> will be used for both
  ; Only applies if <ramp-volume> is used
  ramp-headphones-0 = 

#+end_src

**** Module brightness

#+begin_src conf

  [module/brightness]
  ;type = internal/xbacklight
  type = internal/backlight

  ; Use the following command to list available cards:
  ; $ ls -1 /sys/class/backlight/
  ;card = intel_backlight
  card = amdgpu_bl0

  ; Available tags:
  ;   <label> (default)
  ;   <ramp>
  ;   <bar>
  format = <ramp> <bar>
  format-background = ${color.shade7}
  format-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  label = %percentage%%

  ; Only applies if <ramp> is used
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 
  ramp-font = 2

  ; Only applies if <bar> is used
  bar-width = 10
  bar-gradient = false

  bar-indicator = ${bar.indicator}
  bar-indicator-foreground = ${color.foreground}

  bar-fill = ${bar.fill}
  bar-foreground-0 = ${color.foreground}
  bar-foreground-1 = ${color.foreground}
  bar-foreground-2 = ${color.foreground}

  bar-empty = ${bar.empty}
  bar-empty-foreground = ${color.foreground}

#+end_src

**** Module battery_bar

#+begin_src conf

  [module/battery_bar]
  type = internal/battery

  ; This is useful in case the battery never reports 100% charge
  full-at = 99

  ; Use the following command to list batteries and adapters:
  ; $ ls -1 /sys/class/power_supply/
  battery = BAT1
  adapter = ACAD

  ; If an inotify event haven't been reported in this many
  ; seconds, manually poll for new values.
  ;
  ; Needed as a fallback for systems that don't report events
  ; on sysfs/procfs.
  ;
  ; Disable polling by setting the interval to 0.
  ;
  ; Default: 5
  poll-interval = 2

  ; see "man date" for details on how to format the time string
  ; NOTE: if you want to use syntax tags here you need to use %%{...}
  ; Default: %H:%M:%S
  time-format = %H:%M

  ; Available tags:
  ;   <label-charging> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  ;   <animation-charging>
  format-charging = <bar-capacity>
  format-charging-prefix = " "
  format-charging-prefix-font = 2
  format-charging-background = ${color.shade5}
  format-charging-padding = 2

  ; Available tags:
  ;   <label-discharging> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  ;   <animation-discharging>
  format-discharging = <bar-capacity>
  format-discharging-prefix = " "
  format-discharging-prefix-font = 2
  format-discharging-background = ${color.shade5}
  format-discharging-padding = 2

  ; Available tags:
  ;   <label-full> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  format-full = <label-full>
  format-full-prefix = " "
  format-full-prefix-font = 2
  format-full-background = ${color.shade5}
  format-full-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  ;   %time%
  ;   %consumption% (shows current charge rate in watts)

  label-charging = %percentage%%

  ; Available tokens:
  ;   %percentage% (default)
  ;   %time%
  ;   %consumption% (shows current discharge rate in watts)
  label-discharging = %percentage%%

  ; Available tokens:
  ;   %percentage% (default)
  label-full = "Full"

  ; Only applies if <bar-capacity> is used
  bar-capacity-width = 10
  bar-capacity-gradient = false

  bar-capacity-indicator = ${bar.indicator}
  bar-capacity-indicator-foreground = ${color.foreground}

  bar-capacity-fill = ${bar.fill}
  bar-capacity-foreground-0 = ${color.foreground}
  bar-capacity-foreground-1 = ${color.foreground}
  bar-capacity-foreground-2 = ${color.foreground}

  bar-capacity-empty = ${bar.empty}
  bar-capacity-empty-foreground = ${color.foreground}

#+end_src

**** Module cpu_bar

#+begin_src conf

  [module/cpu_bar]
  type = internal/cpu

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 0.5

  ; Available tags:
  ;   <label> (default)
  ;   <bar-load>
  ;   <ramp-load>
  ;   <ramp-coreload>
  ;;format = <label> <ramp-coreload>
  format = <bar-load> <label>
  format-prefix = "﬙ "
  format-prefix-font = 2
  format-background = ${color.shade7}
  format-padding = 2

  ; Available tokens:
  ;   %percentage% (default) - total cpu load averaged over all cores
  ;   %percentage-sum% - Cumulative load on all cores
  ;   %percentage-cores% - load percentage for each core
  ;   %percentage-core[1-9]% - load percentage for specific core
  label = "%percentage%%"

  ; Only applies if <bar-load> is used
  bar-load-width = 10
  bar-load-gradient = false

  bar-load-indicator = ${bar.indicator}
  bar-load-indicator-foreground = ${color.foreground}

  bar-load-fill = ${bar.fill}
  bar-load-foreground-0 = ${color.foreground}
  bar-load-foreground-1 = ${color.foreground}
  bar-load-foreground-2 = ${color.foreground}

  bar-load-empty = ${bar.empty}
  bar-load-empty-foreground = ${color.foreground}

#+end_src

**** Module filesystem_bar

#+begin_src conf

  [module/filesystem_bar]
  type = internal/fs

  ; Mountpoints to display
  mount-0 = /
  ;;mount-1 = /home
  ;;mount-2 = /var

  ; Seconds to sleep between updates
  ; Default: 30
  interval = 30

  ; Display fixed precision values
  ; Default: false
  fixed-values = false

  ; Spacing between entries
  ; Default: 2
  ;;spacing = 4

  ; Available tags:
  ;   <label-mounted> (default)
  ;   <bar-free>
  ;   <bar-used>
  ;   <ramp-capacity>
  format-mounted = <bar-used> <label-mounted>
  format-mounted-prefix = " "
  format-mounted-prefix-font = 2
  format-mounted-background = ${color.shade5}
  format-mounted-padding = 2

  ; Available tags:
  ;   <label-unmounted> (default)
  format-unmounted = <label-unmounted>
  format-unmounted-prefix = " "
  format-unmounted-prefix-font = 2
  format-unmounted-background = ${color.shade5}
  format-unmounted-padding = 2

  ; Available tokens:
  ;   %mountpoint%
  ;   %type%
  ;   %fsname%
  ;   %percentage_free%
  ;   %percentage_used%
  ;   %total%
  ;   %free%
  ;   %used%
  ; Default: %mountpoint% %percentage_free%%
  label-mounted = %used%/%total%

  ; Available tokens:
  ;   %mountpoint%
  ; Default: %mountpoint% is not mounted
  label-unmounted = "%mountpoint%: not mounted"

  ; Only applies if <bar-used> is used
  bar-used-width = 10
  bar-used-gradient = false

  bar-used-indicator = ${bar.indicator}
  bar-used-indicator-foreground = ${color.foreground}

  bar-used-fill = ${bar.fill}
  bar-used-foreground-0 = ${color.foreground}
  bar-used-foreground-1 = ${color.foreground}
  bar-used-foreground-2 = ${color.foreground}

  bar-used-empty = ${bar.empty}
  bar-used-empty-foreground = ${color.foreground}

#+end_src

**** Module memory_bar

#+begin_src conf

  [module/memory_bar]
  type = internal/memory

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 2

  ; Available tags:
  ;   <label> (default)
  ;   <bar-used>
  ;   <bar-free>
  ;   <ramp-used>
  ;   <ramp-free>
  ;   <bar-swap-used>
  ;   <bar-swap-free>
  ;   <ramp-swap-used>
  ;   <ramp-swap-free>
  format = <bar-used> <label>
  format-prefix = " "
  format-prefix-font = 2
  format-background = ${color.shade6}
  format-padding = 2

  ; Available tokens:
  ;   %percentage_used% (default)
  ;   %percentage_free%
  ;   %gb_used%
  ;   %gb_free%
  ;   %gb_total%
  ;   %mb_used%
  ;   %mb_free%
  ;   %mb_total%
  ;   %percentage_swap_used%
  ;   %percentage_swap_free%
  ;   %mb_swap_total%
  ;   %mb_swap_free%
  ;   %mb_swap_used%
  ;   %gb_swap_total%
  ;   %gb_swap_free%
  ;   %gb_swap_used%

  label = "%mb_used%"

  ; Only applies if <bar-used> is used
  bar-used-width = 10
  bar-used-gradient = false

  bar-used-indicator = ${bar.indicator}
  bar-used-indicator-foreground = ${color.foreground}

  bar-used-fill = ${bar.fill}
  bar-used-foreground-0 = ${color.foreground}
  bar-used-foreground-1 = ${color.foreground}
  bar-used-foreground-2 = ${color.foreground}

  bar-used-empty = ${bar.empty}
  bar-used-empty-foreground = ${color.foreground}

#+end_src

**** Module mpd_bar

#+begin_src conf

  [module/mpd_bar]
  type = internal/mpd

  ; Host where mpd is running (either ip or domain name)
  ; Can also be the full path to a unix socket where mpd is running.
  ;;host = 127.0.0.1
  ;;port = 6600
  ;;password = mysecretpassword

  ; Seconds to sleep between progressbar/song timer sync
  ; Default: 1
  interval = 1

  ; Available tags:
  ;   <label-song> (default)
  ;   <label-time>
  ;   <bar-progress>
  ;   <toggle> - gets replaced with <icon-(pause|play)>
  ;   <toggle-stop> - gets replaced with <icon-(stop|play)>
  ;   <icon-random>
  ;   <icon-repeat>
  ;   <icon-repeatone> (deprecated)
  ;   <icon-single> - Toggle playing only a single song. Replaces <icon-repeatone>
  ;   <icon-consume>
  ;   <icon-prev>
  ;   <icon-stop>
  ;   <icon-play>
  ;   <icon-pause>
  ;   <icon-next>
  ;   <icon-seekb>
  ;   <icon-seekf>
  format-online = <label-song> <bar-progress> <label-time>
  format-online-prefix = ﱘ
  format-online-prefix-font = 2
  format-online-background = ${color.shade4}
  format-online-padding = 2

  ;format-playing = ${self.format-online}
  ;format-paused = ${self.format-online}
  ;format-stopped = ${self.format-online}

  ; Available tags:
  ;   <label-offline>
  format-offline = <label-offline>
  format-offline-prefix = ﱘ
  format-offline-prefix-font = 2
  format-offline-background = ${color.shade4}
  format-offline-padding = 2

  ; Available tokens:
  ;   %artist%
  ;   %album-artist%
  ;   %album%
  ;   %date%
  ;   %title%
  ; Default: %artist% - %title%
  label-song =  " %artist% - %title%"
  label-song-maxlen = 25
  label-song-ellipsis = true

  ; Available tokens:
  ;   %elapsed%
  ;   %total%
  ; Default: %elapsed% / %total%
  label-time = %elapsed% / %total%

  ; Available tokens:
  ;   None
  label-offline = " Offline"

  ; Only applies if <icon-X> is used
  icon-play = 喇
  icon-pause = 
  icon-stop =
  icon-prev =
  icon-next =
  icon-seekb =
  icon-seekf =
  icon-random =
  icon-repeat =
  icon-repeatone =
  icon-single =
  icon-consume =

  ; Used to display the state of random/repeat/repeatone/single
  ; Only applies if <icon-[random|repeat|repeatone|single]> is used
  toggle-on-foreground = ${color.foreground}
  toggle-off-foreground = ${color.background}

  ; Only applies if <bar-progress> is used
  bar-progress-width = 10
  bar-progress-gradient = false

  bar-progress-indicator = ${bar.indicator}
  bar-progress-indicator-foreground = ${color.foreground}

  bar-progress-fill = ${bar.fill}
  bar-progress-foreground-0 = ${color.foreground}
  bar-progress-foreground-1 = ${color.foreground}
  bar-progress-foreground-2 = ${color.foreground}

  bar-progress-empty = ${bar.empty}
  bar-progress-empty-foreground = ${color.foreground}

#+end_src

*** Modules
:PROPERTIES:
:header-args: :tangle ./.config/polybar/modules.ini
:END:

**** COMMENT alsa

#+begin_src conf

  [module/alsa]
  type = internal/alsa

  ; Soundcard to be used
  ; Usually in the format hw:# where # is the card number
  ; You can find the different card numbers in `/proc/asound/cards`
  master-soundcard = default
  speaker-soundcard = default
  headphone-soundcard = default

  ; Name of the master, speaker and headphone mixers
  ; Use the following command to list available mixer controls:
  ; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
  ; If master, speaker or headphone-soundcard isn't the default,
  ; use `amixer -c # scontrols` instead where # is the number
  ; of the master, speaker or headphone soundcard respectively
  ;
  ; Default: Master
  master-mixer = Master

  ; Optionally define speaker and headphone mixers
  ; Default: none
  ;;speaker-mixer = Speaker
  ; Default: none
  ;;headphone-mixer = Headphone

  ; NOTE: This is required if headphone_mixer is defined
  ; Use the following command to list available device controls
  ; $ amixer controls | sed -r "/CARD/\!d; s/.*=([0-9]+).*name='([^']+)'.*/printf '%3.0f: %s\n' '\1' '\2'/e" | sort
  ; You may also need to use `amixer -c # controls` as above for the mixer names
  ; Default: none
  ;;headphone-id = 9

  ; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
  ; Default: false
  ;;mapped = true

  ; Interval for volume increase/decrease (in percent points)
  ; Default: 5
  interval = 5

  ; Available tags:
  ;   <label-volume> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-volume = <ramp-volume> <label-volume>
  format-volume-background = ${color.shade6}
  format-volume-padding = 2

  ; Available tags:
  ;   <label-muted> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-muted = <label-muted>
  format-muted-prefix = 
  format-muted-prefix-font = 2
  format-muted-background = ${color.shade6}
  format-muted-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  label-volume = %percentage%%

  ; Available tokens:
  ;   %percentage% (default
  label-muted = " Muted"
  label-muted-foreground = ${color.foreground}

  ; Only applies if <ramp-volume> is used
  ramp-volume-0 = 
  ramp-volume-1 = 
  ramp-volume-2 = 
  ramp-volume-font = 2

  ; If defined, it will replace <ramp-volume> when
  ; headphones are plugged in to `headphone_control_numid`
  ; If undefined, <ramp-volume> will be used for both
  ; Only applies if <ramp-volume> is used
  ramp-headphones-0 = 

#+end_src

**** COMMENT backlight

#+begin_src conf

  [module/backlight]
  ;type = internal/xbacklight
  type = internal/backlight

  ; Use the following command to list available cards:
  ; $ ls -1 /sys/class/backlight/
  ;card = intel_backlight
  card = amdgpu_bl0

  ; Available tags:
  ;   <label> (default)
  ;   <ramp>
  ;   <bar>
  format = <ramp> <label>
  format-background = ${color.shade3}
  format-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  label = %percentage%%

  ; Only applies if <ramp> is used
  ramp-0 = 
  ramp-1 = 
  ramp-2 = 
  ramp-3 = 
  ramp-4 = 
  ramp-font = 2

#+end_src

**** battery

#+begin_src conf

  [module/battery]
  type = internal/battery

  ; This is useful in case the battery never reports 100% charge
  ; full-at = 99

  ; Use the following command to list batteries and adapters:
  ; $ ls -1 /sys/class/power_supply/
  battery = BAT1
  adapter = ACAD

  ; If an inotify event haven't been reported in this many
  ; seconds, manually poll for new values.
  ;
  ; Needed as a fallback for systems that don't report events
  ; on sysfs/procfs.
  ;
  ; Disable polling by setting the interval to 0.
  ;
  ; Default: 5
  poll-interval = 2

  ; see "man date" for details on how to format the time string
  ; NOTE: if you want to use syntax tags here you need to use %%{...}
  ; Default: %H:%M:%S
  time-format = %H:%M

  ; Available tags:
  ;   <label-charging> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  ;   <animation-charging>
  format-charging = <animation-charging> <label-charging>
  format-charging-background = ${color.shade4}
  format-charging-padding = 1

  ; Available tags:
  ;   <label-discharging> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  ;   <animation-discharging>
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-background = ${color.shade4}
  format-discharging-padding = 1

  ; Available tags:
  ;   <label-full> (default)
  ;   <bar-capacity>
  ;   <ramp-capacity>
  format-full = " 99%"
  format-full-prefix = ""
  format-full-prefix-font = 2
  format-full-prefix-foreground = ${color.cyan-foreground}
  format-full-background = ${color.shade4}
  format-full-padding = 1

  ; Available tokens:
  ;   %percentage% (default)
  ;   %time%
  ;   %consumption% (shows current charge rate in watts)
  label-charging = %percentage:2%%

  ; Available tokens:
  ;   %percentage% (default)
  ;   %time%
  ;   %consumption% (shows current discharge rate in watts)
  label-discharging = %percentage:2%%

  ; Available tokens:
  ;   %percentage% (default)
  label-full = " Full"

  ; Only applies if <ramp-capacity> is used
  ramp-capacity-0 = ""
  ramp-capacity-1 = ""
  ramp-capacity-2 = ""
  ramp-capacity-3 = ""
  ramp-capacity-4 = ""
  ramp-capacity-0-foreground = ${color.cyan-foreground}
  ramp-capacity-1-foreground = ${color.cyan-foreground}
  ramp-capacity-2-foreground = ${color.cyan-foreground}
  ramp-capacity-3-foreground = ${color.cyan-foreground}
  ramp-capacity-4-foreground = ${color.cyan-foreground}
  ramp-capacity-font = 2

  ; Only applies if <bar-capacity> is used
  ; bar-capacity-width = 10

  ; Only applies if <animation-charging> is used

  animation-charging-0 = ""
  animation-charging-1 = ""
  animation-charging-2 = ""
  animation-charging-3 = ""
  animation-charging-4 = ""
  animation-charging-1-foreground = ${color.cyan-foreground}
  animation-charging-0-foreground = ${color.cyan-foreground}
  animation-charging-2-foreground = ${color.cyan-foreground}
  animation-charging-3-foreground = ${color.cyan-foreground}
  animation-charging-4-foreground = ${color.cyan-foreground}
  animation-charging-font = 2

  ; Framerate in milliseconds
  animation-charging-framerate = 750

  ; Only applies if <animation-discharging> is used
  ;;animation-discharging-0 = ${battery.anim0}
  ;;animation-discharging-1 = ${battery.anim1}

  ; Framerate in milliseconds
  ;animation-discharging-framerate = 500

#+end_src

**** COMMENT bspwm

#+begin_src conf

  [module/bspwm]
  type = internal/bspwm

  ; Only show workspaces defined on the same output as the bar
  ; NOTE: The bspwm and XRandR monitor names must match, which they do by default.
  ; Default: true
  pin-workspaces = true

  ; Output mode flags after focused state label
  ; Default: false
  inline-mode = false

  ; Create click handler used to focus workspace
  ; Default: true
  enable-click = false

  ; Create scroll handlers used to cycle workspaces
  ; Default: true
  enable-scroll = false

  ; Set the scroll cycle direction
  ; Default: true
  reverse-scroll = false

  ; Use fuzzy (partial) matching on labels when assigning
  ; icons to workspaces
  ; Example: code;♚ will apply the icon to all workspaces
  ; containing 'code' in the label
  ; Default: false
  fuzzy-match = true

  ; ws-icon-[0-9]+ = label;icon
  ; Note that the label needs to correspond with the bspwm workspace name
  ws-icon-0 = code;♚
  ws-icon-1 = office;♛
  ws-icon-2 = graphics;♜
  ws-icon-3 = mail;♝
  ws-icon-4 = web;♞
  ws-icon-default = ♟

  ; Available tags:
  ;   <label-monitor>
  ;   <label-state> - gets replaced with <label-(focused|urgent|occupied|empty)>
  ;   <label-mode> - gets replaced with <label-(monocle|tiled|fullscreen|floating|locked|sticky|private)>
  ; Default: <label-state>
  format = <label-state> <label-mode>

  ; Available tokens:
  ;   %name%
  ; Default: %name%
  label-monitor = %name%

  ; If any values for label-dimmed-N are defined, the workspace/mode
  ; colors will get overridden with those values if the monitor is out of focus
  ; To only override workspaces in a specific state, use:
  ;   label-dimmed-focused
  ;   label-dimmed-occupied
  ;   label-dimmed-urgent
  ;   label-dimmed-empty
  label-dimmed-foreground = #555
  label-dimmed-underline = ${bar/top.background}
  label-dimmed-focused-background = #f00

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-focused = %icon%
  label-focused-foreground = #ffffff
  label-focused-background = #3f3f3f
  label-focused-underline = #fba922

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-occupied = %icon%
  label-occupied-underline = #555555

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-urgent = %icon%
  label-urgent-foreground = #000000
  label-urgent-background = #bd2c40
  label-urgent-underline = #9b0a20

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-empty = %icon%
  label-empty-foreground = #55

  ; The following labels will be used to indicate the layout/mode
  ; for the focused workspace. Requires <label-mode>
  ;
  ; Available tokens:
  ;   None
  label-monocle = 
  label-tiled = 
  label-fullscreen = 
  label-floating = 
  label-pseudotiled = P
  label-locked = 
  label-locked-foreground = #bd2c40
  label-sticky = 
  label-sticky-foreground = #fba922
  label-private = 
  label-private-foreground = #bd2c40

  ; Separator in between workspaces
  label-separator = |
  label-separator-padding = 2
  label-separator-foreground = #ffb52a

#+end_src

**** cpu

#+begin_src conf

  [module/cpu]
  type = internal/cpu

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 1

  ; Available tags:
  ;   <label> (default)
  ;   <bar-load>
  ;   <ramp-load>
  ;   <ramp-coreload>
  ;;format = <label> <ramp-coreload>
  format = <label>
  format-prefix = 
  format-prefix-font = 2
  format-background = ${color.shade7}
  format-foreground = ${color.foreground}
  format-padding = 2

  ; Available tokens:
  ;   %percentage% (default) - total cpu load averaged over all cores
  ;   %percentage-sum% - Cumulative load on all cores
  ;   %percentage-cores% - load percentage for each core
  ;   %percentage-core[1-9]% - load percentage for specific core
  label = " %percentage%%"

  ; Spacing between individual per-core ramps
  ;;ramp-coreload-spacing = 1
  ;;ramp-coreload-0 = ${cpu.load0}
  ;;ramp-coreload-1 = ${cpu.load1}

  ;;ramp-load-0 = ${cpu.load0}
  ;;ramp-load-1 = ${cpu.load1}

#+end_src

**** date

#+begin_src conf

  [module/date]
  type = internal/date

  ; Seconds to sleep between updates
  interval = 1.0

  ; See "http://en.cppreference.com/w/cpp/io/manip/put_time" for details on how to format the date string
  ; NOTE: if you want to use syntax tags here you need to use %%{...}
  ;;date = %Y-%m-%d%

  ; Optional time format
  time = " %H:%M | %a | %d %b"

  ; if `date-alt` or `time-alt` is defined, clicking
  ; the module will toggle between formats
  ;;date-alt = %A, %d %B %Y
  time-alt = " %a, %d %b %Y"

  ; Available tags:
  ;   <label> (default)
  format = <label>
  format-prefix = 
  format-prefix-foreground = ${color.blue-foreground}
  format-prefix-font = 2
  format-background = ${color.shade1}
  format-foreground = ${color.foreground}
  format-padding = 1

  ; Available tokens:
  ;   %date%
  ;   %time%
  ; Default: %date%
  label = %time%

#+end_src

**** COMMENT filesystem

#+begin_src conf

  [module/filesystem]
  type = internal/fs

  ; Mountpoints to display
  mount-0 = /
  ;;mount-1 = /home
  ;;mount-2 = /var

  ; Seconds to sleep between updates
  ; Default: 30
  interval = 30

  ; Display fixed precision values
  ; Default: false
  fixed-values = true

  ; Spacing between entries
  ; Default: 2
  ;;spacing = 4

  ; Available tags:
  ;   <label-mounted> (default)
  ;   <bar-free>
  ;   <bar-used>
  ;   <ramp-capacity>
  format-mounted = <label-mounted>
  format-mounted-prefix = 
  format-mounted-prefix-font = 2
  format-mounted-background = ${color.shade6}
  format-mounted-padding = 2

  ; Available tags:
  ;   <label-unmounted> (default)
  format-unmounted = <label-unmounted>
  format-unmounted-prefix = 
  format-unmounted-prefix-font = 2
  format-unmounted-background = ${color.shade6}
  format-unmounted-padding = 2

  ; Available tokens:
  ;   %mountpoint%
  ;   %type%
  ;   %fsname%
  ;   %percentage_free%
  ;   %percentage_used%
  ;   %total%
  ;   %free%
  ;   %used%
  ; Default: %mountpoint% %percentage_free%%
  label-mounted = " %free%"

  ; Available tokens:
  ;   %mountpoint%
  ; Default: %mountpoint% is not mounted
  label-unmounted = " %mountpoint%: not mounted"

#+end_src

**** COMMENT github

#+begin_src conf

  [module/github]
  type = internal/github

  ; Accessing an access token stored in file
  token = ${file:/path/to/file/containing/github/access.token}

  ; Accessing an access token stored in an environment variable
  token = ${env:GITHUB_ACCESS_TOKEN}

  ; Whether empty notifications should be displayed or not
  empty-notifications = false

  ; Number of seconds in between requests
  interval = 10

  ; Available tags:
  ;   <label> (default)
  format = <label>
  format-prefix = 

  ; Available tokens:
  ;   %notifications% (default)
  ; Default: Notifications: %notifications%
  label = %notifications%

#+end_src

**** COMMENT i3

#+begin_src conf

  [module/i3]
  type = internal/i3

  ; Only show workspaces defined on the same output as the bar
  ;
  ; Useful if you want to show monitor specific workspaces
  ; on different bars
  ;
  ; Default: false
  pin-workspaces = true

  ; This will split the workspace name on ':'
  ; Default: false
  strip-wsnumbers = true

  ; Sort the workspaces by index instead of the default
  ; sorting that groups the workspaces by output
  ; Default: false
  index-sort = true

  ; Create click handler used to focus workspace
  ; Default: true
  enable-click = false

  ; Create scroll handlers used to cycle workspaces
  ; Default: true
  enable-scroll = false

  ; Wrap around when reaching the first/last workspace
  ; Default: true
  wrapping-scroll = false

  ; Set the scroll cycle direction
  ; Default: true
  reverse-scroll = false

  ; Use fuzzy (partial) matching on labels when assigning
  ; icons to workspaces
  ; Example: code;♚ will apply the icon to all workspaces
  ; containing 'code' in the label
  ; Default: false
  fuzzy-match = true

  ; ws-icon-[0-9]+ = label;icon
  ; NOTE: The label needs to match the name of the i3 workspace
  ws-icon-0 = 1;♚
  ws-icon-1 = 2;♛
  ws-icon-2 = 3;♜
  ws-icon-3 = 4;♝
  ws-icon-4 = 5;♞
  ws-icon-default = ♟
  ; NOTE: You cannot skip icons, e.g. to get a ws-icon-6
  ; you must also define a ws-icon-5.

  ; Available tags:
  ;   <label-state> (default) - gets replaced with <label-(focused|unfocused|visible|urgent)>
  ;   <label-mode> (default)
  format = <label-state> <label-mode>

  ; Available tokens:
  ;   %mode%
  ; Default: %mode%
  label-mode = %mode%
  label-mode-padding = 2
  label-mode-background = #e60053

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ;   %output%
  ; Default: %icon%  %name%
  label-focused = %index%
  label-focused-foreground = #ffffff
  label-focused-background = #3f3f3f
  label-focused-underline = #fba922
  label-focused-padding = 4

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ;   %output%
  ; Default: %icon%  %name%
  label-unfocused = %index%
  label-unfocused-padding = 4

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ;   %output%
  ; Default: %icon%  %name%
  label-visible = %index%
  label-visible-underline = #555555
  label-visible-padding = 4

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ;   %output%
  ; Default: %icon%  %name%
  label-urgent = %index%
  label-urgent-foreground = #000000
  label-urgent-background = #bd2c40
  label-urgent-padding = 4

  ; Separator in between workspaces
  label-separator = |
  label-separator-padding = 2
  label-separator-foreground = #ffb52a

#+end_src

**** COMMENT memory

#+begin_src conf

  [module/memory]
  type = internal/memory

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 1

  ; Available tags:
  ;   <label> (default)
  ;   <bar-used>
  ;   <bar-free>
  ;   <ramp-used>
  ;   <ramp-free>
  ;   <bar-swap-used>
  ;   <bar-swap-free>
  ;   <ramp-swap-used>
  ;   <ramp-swap-free>
  format = <label>
  format-prefix = 
  format-prefix-font = 2
  format-background = ${color.shade5}
  format-padding = 2

  ; Available tokens:
  ;   %percentage_used% (default)
  ;   %percentage_free%
  ;   %gb_used%
  ;   %gb_free%
  ;   %gb_total%
  ;   %mb_used%
  ;   %mb_free%
  ;   %mb_total%
  ;   %percentage_swap_used%
  ;   %percentage_swap_free%
  ;   %mb_swap_total%
  ;   %mb_swap_free%
  ;   %mb_swap_used%
  ;   %gb_swap_total%
  ;   %gb_swap_free%
  ;   %gb_swap_used%

  label = " %mb_used%"

  ; Only applies if <ramp-used> is used
  ;;ramp-used-0 = ${memory.used0}
  ;;ramp-used-1 = ${memory.used1}
  ;;ramp-used-2 = ${memory.used2}

  ; Only applies if <ramp-free> is used
  ;;ramp-free-0 = ${memory.free0}
  ;;ramp-free-1 = ${memory.free1}
  ;;ramp-free-2 = ${memory.free2}

#+end_src

**** COMMENT network

#+begin_src conf

  ; If you use both a wired and a wireless network, just add 2 module definitions. For example
  [module/wired-network]
  type = internal/network
  interface = eth0

  [module/wireless-network]
  type = internal/network
  interface = wlp3s0

  ; Normal Module
  [module/network]
  type = internal/network
  interface = wlan0

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 1.0

  ; Test connectivity every Nth update
  ; A value of 0 disables the feature
  ; NOTE: Experimental (needs more testing)
  ; Default: 0
  ;ping-interval = 3

  ; @deprecated: Define min width using token specifiers (%downspeed:min% and %upspeed:min%)
  ; Minimum output width of upload/download rate
  ; Default: 3
  ;;udspeed-minwidth = 5

  ; Accumulate values from all interfaces
  ; when querying for up/downspeed rate
  ; Default: false
  accumulate-stats = true

  ; Consider an `UNKNOWN` interface state as up.
  ; Some devices have an unknown state, even when they're running
  ; Default: false
  unknown-as-up = true

  ; Available tags:
  ;   <label-connected> (default)
  ;   <ramp-signal>
  format-connected = <label-connected>
  format-connected-prefix = 直
  format-connected-prefix-font = 2
  format-connected-background = ${color.shade4}
  format-connected-padding = 2

  ; Available tags:
  ;   <label-disconnected> (default)
  format-disconnected = <label-disconnected>
  format-disconnected-prefix = 睊
  format-disconnected-prefix-font = 2
  format-disconnected-background = ${color.shade4}
  format-disconnected-padding = 2

  ; Available tags:
  ;   <label-connected> (default)
  ;   <label-packetloss>
  ;   <animation-packetloss>
  ;;format-packetloss = <animation-packetloss> <label-connected>

  ; Available tokens:
  ;   %ifname%    [wireless+wired]
  ;   %local_ip%  [wireless+wired]
  ;   %local_ip6% [wireless+wired]
  ;   %essid%     [wireless]
  ;   %signal%    [wireless]
  ;   %upspeed%   [wireless+wired]
  ;   %downspeed% [wireless+wired]
  ;   %linkspeed% [wired]
  ; Default: %ifname% %local_ip%
  label-connected = "%{A1:networkmanager_dmenu &:} %essid%%{A}"

  ; Available tokens:
  ;   %ifname%    [wireless+wired]
  ; Default: (none)
  label-disconnected = "%{A1:networkmanager_dmenu &:} Offline%{A}"
  ;;label-disconnected-foreground = #66ffffff

  ; Available tokens:
  ;   %ifname%    [wireless+wired]
  ;   %local_ip%  [wireless+wired]
  ;   %local_ip6% [wireless+wired]
  ;   %essid%     [wireless]
  ;   %signal%    [wireless]
  ;   %upspeed%   [wireless+wired]
  ;   %downspeed% [wireless+wired]
  ;   %linkspeed% [wired]
  ; Default: (none)
  ;label-packetloss = %essid%
  ;label-packetloss-foreground = #eefafafa

  ; Only applies if <ramp-signal> is used
  ramp-signal-0 = 直
  ramp-signal-1 = 直
  ramp-signal-2 = 直

  ; Only applies if <animation-packetloss> is used
  ;;animation-packetloss-0 = ⚠
  ;;animation-packetloss-0-foreground = #ffa64c
  ;;animation-packetloss-1 = ⚠
  ;;animation-packetloss-1-foreground = #000000
  ; Framerate in milliseconds
  ;;animation-packetloss-framerate = 500

#+end_src

**** COMMENT pulseaudio

#+begin_src conf

  [module/pulseaudio]
  type = internal/pulseaudio

  ; Sink to be used, if it exists (find using `pacmd list-sinks`, name field)
  ; If not, uses default sink
  sink = alsa_output.pci-0000_03_00.6.analog-stereo

  ; Use PA_VOLUME_UI_MAX (~153%) if true, or PA_VOLUME_NORM (100%) if false
  ; Default: true
  use-ui-max = false

  ; Interval for volume increase/decrease (in percent points)
  ; Default: 5
  interval = 5

  ; Available tags:
  ;   <label-volume> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-volume = <ramp-volume> <label-volume>
  format-volume-background = ${color.shade4}
  format-volume-padding = 2

  ; Available tags:
  ;   <label-muted> (default)
  ;   <ramp-volume>
  ;   <bar-volume>
  format-muted = <label-muted>
  format-muted-prefix = 
  format-muted-prefix-font = 2
  format-muted-background = ${color.shade4}
  format-muted-padding = 2

  ; Available tokens:
  ;   %percentage% (default)
  label-volume = %percentage%%

  ; Available tokens:
  ;   %percentage% (default
  label-muted = " Muted"
  label-muted-foreground = ${color.foreground}

  ; Only applies if <ramp-volume> is used
  ramp-volume-0 = 
  ramp-volume-1 = 
  ramp-volume-2 = 
  ramp-volume-font = 2

#+end_src

**** temperature

#+begin_src conf

  [module/temperature]
  type = internal/temperature

  ; Seconds to sleep between updates
  ; Default: 1
  interval = 0.5

  ; Thermal zone to use
  ; To list all the zone types, run 
  ; $ for i in /sys/class/thermal/thermal_zone*; do echo "$i: $(<$i/type)"; done
  ; Default: 0
  thermal-zone = 0

  ; Full path of temperature sysfs path
  ; Use `sensors` to find preferred temperature source, then run
  ; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done
  ; to find path to desired file
  ; Default reverts to thermal zone setting
  ;;hwmon-path = /sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input
  hwmon-path = /sys/devices/pci0000:00/0000:00:18.3/hwmon/hwmon3/temp1_input

  ; Threshold temperature to display warning label (in degrees celsius)
  ; Default: 80
  warn-temperature = 65

  ; Whether or not to show units next to the temperature tokens (°C, °F)
  ; Default: true
  units = true

  ; Available tags:
  ;   <label> (default)
  ;   <ramp>
  format = <ramp> <label>
  format-background = ${color.shade6}
  format-foreground = ${color.foreground}
  format-padding = 1

  ; Available tags:
  ;   <label-warn> (default)
  ;   <ramp>
  format-warn = <ramp> <label-warn>
  format-warn-background = ${color.red-background}
  format-warn-foreground = ${color.background}
  format-warn-padding = 1

  ; Available tokens:
  ;   %temperature% (deprecated)
  ;   %temperature-c%   (default, temperature in °C)
  ;   %temperature-f%   (temperature in °F)
  label = %temperature-c%

  ; Available tokens:
  ;   %temperature% (deprecated)
  ;   %temperature-c%   (default, temperature in °C)
  ;   %temperature-f%   (temperature in °F)
  label-warn = "%temperature-c%"

  ; Requires the <ramp> tag
  ; The icon selection will range from 0 to `warn-temperature`
  ; with the current temperature as index.
  ramp-0 = ""
  ramp-0-foreground = ${color.yellow-foreground}
  ramp-1 = ""
  ramp-1-foreground = ${color.yellow-foreground}
  ramp-2 = ""
  ramp-2-foreground = ${color.yellow-foreground}
  ramp-3 = ""
  ramp-3-foreground = ${color.yellow-foreground}
  ramp-4 = ""
  ramp-4-foreground = ${color.yellow-foreground}
  ramp-font = 2

#+end_src

**** keyboard

#+begin_src conf

  [module/keyboard]
  type = internal/xkeyboard

  ; List of indicators to ignore
  blacklist-0 = num lock
  blacklist-1 = scroll lock

  ; Available tags:
  ;   <label-layout> (default)
  ;   <label-indicator> (default)
  format = <label-layout>
  format-prefix = ""
  format-prefix-foreground = ${color.purple-foreground}
  format-prefix-font = 2
  format-background = ${color.shade3}
  format-foreground = ${color.foreground}
  format-padding = 1

  ; Available tokens:
  ;   %layout%
  ;   %name%
  ;   %number%
  ; Default: %layout%
  label-layout = " %layout%"

  ; Available tokens:
  ;   %name%
  ; Default: %name%
  label-indicator-on = %name%
  label-indicator-on-foreground = ${color.foreground}

#+end_src

**** COMMENT title

#+begin_src conf

  [module/title]
  type = internal/xwindow

  ; Available tags:
  ;   <label> (default)
  format = <label>
  format-prefix = ﯑
  format-prefix-font = 2
  format-prefix-background = ${color.shade8}
  format-prefix-foreground = #0a0a0a
  format-prefix-padding = 2

  ; Available tokens:
  ;   %title%
  ; Default: %title%
  label = "%title%"
  label-maxlen = 30
  label-background = ${color.background}
  label-foreground = ${color.foreground}
  label-padding = 2

  ; Used instead of label when there is no window title
  label-empty = "Desktop"
  label-empty-background = ${color.background}
  label-empty-foreground = ${color.foreground}
  label-empty-padding = 2

#+end_src

**** workspaces

#+begin_src conf

  [module/workspaces]
  type = internal/xworkspaces

  ; Only show workspaces defined on the same output as the bar
  ;
  ; Useful if you want to show monitor specific workspaces
  ; on different bars
  ;
  ; Default: false
  ; pin-workspaces = true
  pin-workspaces = false

  ; Create click handler used to focus desktop
  ; Default: true
  enable-click = true

  ; Create scroll handlers used to cycle desktops
  ; Default: true
  enable-scroll = true

  ; icon-[0-9]+ = <desktop-name>;<icon>
  ; NOTE: The desktop name needs to match the name configured by the WM
  ; You can get a list of the defined desktops using:
  ; $ xprop -root _NET_DESKTOP_NAMES
  icon-0 = 1;1
  icon-1 = 2;2
  icon-2 = 3;3
  icon-3 = 4;4
  icon-4 = 5;5
  icon-5 = 6;6
  icon-6 = 7;7
  icon-7 = 8;8
  icon-8 = 9;9
  icon-default = 0

  ; Available tags:
  ;   <label-monitor>
  ;   <label-state> - gets replaced with <label-(active|urgent|occupied|empty)>
  ; Default: <label-state>
  format = <label-state>
  format-background = ${color.background}
  format-foreground = ${color.foreground}

  ; Available tokens:
  ;   %name%
  ; Default: %name%
  label-monitor = %name%

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-active = %icon%
  label-active-background = ${color.blue-foreground}
  label-active-foreground = ${color.background-alt}

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-occupied = %icon%
  label-occupied-background = ${color.background}
  label-occupied-foreground = ${color.blue-foreground}

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-urgent = %icon%
  label-urgent-background = ${color.background}
  label-urgent-foreground = #CC6666

  ; Available tokens:
  ;   %name%
  ;   %icon%
  ;   %index%
  ; Default: %icon%  %name%
  label-empty = %icon%
  label-empty-background = ${color.background}
  label-empty-foreground = ${color.foreground}

  label-active-padding = 2
  label-urgent-padding = 2
  label-occupied-padding = 2
  label-empty-padding = 2

#+end_src

*** User modules
**** Updates
***** Module config

#+begin_src conf :tangle ./.config/polybar/user_modules.ini

  [module/updates]
  type = custom/script

   ; Available tokens:
  ;   %counter%
  ; Command to be executed (using "/usr/bin/env sh -c [command]")
  exec = ~/.config/polybar/scripts/updates.sh

  ; Conditional command that, if defined, needs to exit successfully
  ; before the main exec command is invoked.
  ; Default: ""
  ;;exec-if = ""

  ; Will the script output continous content?
  ; Default: false
  tail = true

  ; Seconds to sleep between updates
  ; Default: 2 (0 if `tail = true`)
  interval = 10

  ; Available tags:
  ;   <output> - deprecated
  ;   <label> (default)
  format = <label>
  format-prefix = 
  format-prefix-foreground = ${color.brown-foreground}
  format-prefix-font = 2
  format-background = ${color.shade2}
  format-foreground = ${color.foreground}
  format-padding = 1

  ; Available tokens:
  ;   %output%
  ; Default: %output%
  label = %output%
  label-background = ${color.shade2}

  ; Available tokens:
  ;   %counter%
  ;   %pid%
  ;
  ; "click-(left|middle|right)" will be executed using "/usr/bin/env sh -c [command]"
  ;; click-left = exo-open --launch TerminalEmulator &
  ;; click-right = exo-open --launch TerminalEmulator &
  ;;double-click-left = echo double left %counter%
  ;;double-click-middle = echo double middle %counter%
  ;;double-click-right = echo double right %counter%

  ; Available tokens:
  ;   %counter%
  ;   %pid%
  ;
  ; "scroll-(up|down)" will be executed using "/usr/bin/env sh -c [command]"
  ;;scroll-up = echo scroll up %counter%
  ;;scroll-down = echo scroll down %counter%

#+end_src

***** Script

#+begin_src sh :tangle ./.config/polybar/scripts/updates.sh :tangle-mode (identity #o755)

  #!/bin/sh

  notify_icon=/usr/share/icons/Papirus/32x32/apps/system-software-update.svg
  yay_log_file=$HOME/.cache/updates/updates.log

  get_total_updates ()
  {
      while [ $(ping -c 1 -q archlinux.org >&/dev/null; echo $?) -ne 0 ]
      do
          sleep 1
      done

      update
      updates=$(yay -Qu 2>/dev/null | wc -l);
  }

  while true
  do
      echo " .."
      get_total_updates

      echo $updates

      # notify user of updates
      if hash notify-send &>/dev/null && [ $updates -gt 0 ]
      then
          notify-send -u normal -i $notify_icon \
                      "You should update soon" "$updates New packages"
      fi
      if [ $(cat $yay_log_file | wc -l) -gt 0 ]
      then
          notify-send -u normal -i $notify_icon \
                      "Error in updates script" "Something wrong"
      fi

      # when there are updates available
      # every 1000 seconds another check for updates is done
      while (( $updates > 0 ))
      do
          if (( $updates > 99 )); then
              echo "$updates"
          elif (( $updates > 9 )); then
              echo " $updates"
          else
              echo "  $updates"
          fi
          sleep 1000
          get_total_updates
      done

      # when no updates are available, use a longer loop, this saves on CPU
      # and network uptime, only checking once every 10 min for new updates
      while (( $updates == 0 ))
      do
          echo "  0"
          sleep 1000
          get_total_updates
      done
  done

#+end_src

**** COMMENT Network speed

#+begin_src conf

  [module/network_speed]
  type = custom/script

  ; Available tokens:
  ;   %counter%
  ; Command to be executed (using "/usr/bin/env sh -c [command]")
  exec =

#+end_src

**** My CPU
***** Module config

#+begin_src conf :tangle ./.config/polybar/user_modules.ini

  [module/mycpu]
  type = custom/script

  ; Available tokens:
  ;   %counter%
  ; Command to be executed (using "/usr/bin/env sh -c [command]")
  exec = ~/.config/polybar/scripts/cpu/cpu

  ; Will the script output continous content?
  ; Default: false
  tail = true

  ; Seconds to sleep between updates
  ; Default: 2 (0 if `tail = true`)
  interval = 1

  ; Available tags:
  ;   <output> - deprecated
  ;   <label> (default)
  format = <label>
  format-prefix = " "
  format-prefix-foreground = ${color.red-foreground}
  format-prefix-font = 2
  format-background = ${color.shade7}
  format-foreground = ${color.foreground}

  ; Available tokens:
  ;   %output%
  ; Default: %output%
  label = %output%
  label-background = ${color.shade7}

#+end_src

***** COMMENT Script

gcc -Wall -O3 cpu.c -o cpu

#+begin_src c :tangle ./.config/polybar/scripts/cpu/cpu.c

  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <time.h>

  void read_stat(long long int *a)
  {
      FILE *stat = fopen("/proc/stat","r");

      if (stat == NULL)
          exit(EXIT_FAILURE);

      fscanf(stat,"%*s %lli %lli %lli %lli %lli %lli %lli", &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6]);
      fclose(stat);
  }

  int main(void)
  {
      long long int a[7], b[7];
      double delta;
      int used;

      read_stat(a);
      usleep(250000);
      read_stat(b);

      delta = ((b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6]) - (a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]));
      used  = (delta - (b[3] - a[3])) / delta * 100;

      if (used == 100)
          printf("%i%% \n", used);
      else if (used > 9)
          printf(" %i%% \n", used);
      else
          printf("  %i%% \n", used);

      return 0;
  }

#+end_src

**** My memory
***** Module config

#+begin_src conf :tangle ./.config/polybar/user_modules.ini

  [module/mymemory]
  type = custom/script

  ; Available tokens:
  ;   %counter%
  ; Command to be executed (using "/usr/bin/env sh -c [command]")
  exec = ~/.config/polybar/scripts/ram/ram

  ; Will the script output continous content?
  ; Default: false
  tail = true

  ; Seconds to sleep between updates
  ; Default: 2 (0 if `tail = true`)
  interval = 1

  ; Available tags:
  ;   <output> - deprecated
  ;   <label> (default)
  format = <label>
  format-prefix = "  "
  format-prefix-foreground = ${color.green-foreground}
  format-prefix-font = 2
  format-background = ${color.shade5}
  format-foreground = ${color.foreground}
  ; format-padding = 2

  ; Available tokens:
  ;   %output%
  ; Default: %output%
  label = %output%
  label-background = ${color.shade5}

#+end_src

***** COMMENT Script

gcc -Wall -O3 ram.c -o ram

#+begin_src c :tangle ./.config/polybar/scripts/ram/ram.c

  #include <stdio.h>
  #include <stdlib.h>

  #define SIZE 28

  #define mem_available_s buffers_s
  #define swap_cached_s   shmem_s
  #define active_s        shmem_s
  #define inactive_s      shmem_s
  #define active_anon_s   shmem_s
  #define inactive_anoa_s shmem_s
  #define active_file_s   shmem_s
  #define inactive_file_s shmem_s
  #define unevictable_s   shmem_s
  #define mlocked_s       shmem_s
  #define swap_total_s    shmem_s
  #define swap_free_s     shmem_s
  #define dirty_s         shmem_s
  #define writeback_s     shmem_s
  #define anon_pages_s    shmem_s
  #define mapped_s        shmem_s
  #define kreclaimable_s  sreclaimable_s
  #define slab_s          sreclaimable_s

  int take_num(char *str)
  {
    int num = 0;

    for (int i = 16; i < SIZE - 4; ++i)
      {
        char ch = str[i];

        if (ch == ' ')
          continue;

        num = num * 10 + (ch - '0');
      }

    return num;
  }

  int main(void)
  {
    FILE *meminfo = fopen("/proc/meminfo", "r");
    char mem_total_s[SIZE],
      mem_free_s[SIZE],
      buffers_s[SIZE],
      cached_s[SIZE],
      shmem_s[SIZE],
      sreclaimable_s[SIZE];

    if (meminfo == NULL)
      exit(EXIT_FAILURE);

    fread(mem_total_s,     sizeof(char), SIZE, meminfo);
    fread(mem_free_s,      sizeof(char), SIZE, meminfo);
    fread(buffers_s,       sizeof(char), SIZE, meminfo);
    fread(mem_available_s, sizeof(char), SIZE, meminfo);
    fread(cached_s,        sizeof(char), SIZE, meminfo);
    fread(swap_cached_s,   sizeof(char), SIZE, meminfo);
    fread(active_s,        sizeof(char), SIZE, meminfo);
    fread(inactive_s,      sizeof(char), SIZE, meminfo);
    fread(active_anon_s,   sizeof(char), SIZE, meminfo);
    fread(inactive_anoa_s, sizeof(char), SIZE, meminfo);
    fread(active_file_s,   sizeof(char), SIZE, meminfo);
    fread(inactive_file_s, sizeof(char), SIZE, meminfo);
    fread(unevictable_s,   sizeof(char), SIZE, meminfo);
    fread(mlocked_s,       sizeof(char), SIZE, meminfo);
    fread(swap_total_s,    sizeof(char), SIZE, meminfo);
    fread(swap_free_s,     sizeof(char), SIZE, meminfo);
    fread(dirty_s,         sizeof(char), SIZE, meminfo);
    fread(writeback_s,     sizeof(char), SIZE, meminfo);
    fread(anon_pages_s,    sizeof(char), SIZE, meminfo);
    fread(mapped_s,        sizeof(char), SIZE, meminfo);
    fread(shmem_s,         sizeof(char), SIZE, meminfo);
    fread(kreclaimable_s,  sizeof(char), SIZE, meminfo);
    fread(slab_s,          sizeof(char), SIZE, meminfo);
    fread(sreclaimable_s,  sizeof(char), SIZE, meminfo);

    int mem_total    = take_num(mem_total_s),
      mem_free     = take_num(mem_free_s),
      buffers      = take_num(buffers_s),
      shmem        = take_num(shmem_s),
      sreclaimable = take_num(sreclaimable_s),
      cached       = take_num(cached_s) + sreclaimable - shmem;

    int used = mem_total - (mem_free + buffers + cached);
    double total_M = mem_total / 1024;
    double used_M = used / 1024;

    if (used_M < 1024)
      if (used_M < 1000)
        printf(" %iM/%.2lfG \n", (int)used_M, total_M / 1024);
      else
        printf("%iM/%.2lfG \n", (int)used_M, total_M / 1024);
    else
      printf("%.2lfG/%.2lfG \n", used_M / 1024, total_M / 1024);

    fclose(meminfo);
    return 0;
  }

#+end_src

**** COMMENT My battery
***** Module config
***** Script

gcc -Wall -O3 battery.c -o battery

#+begin_src c :tangle ./.config/polybar/scripts/battery/battery.c

  #include <stdio.h>
  #include <stdlib.h>

  int main(void)
  {
    FILE *capacity_f = fopen("/sys/class/power_supply/BAT1/capacity", "r");
    int capacity;

    if (capacity_f == NULL)
      exit(EXIT_FAILURE);

    fscanf(capacity_f, "%i", &capacity);

    if (capacity == 100)
      printf("%d%%\n", capacity);
    else if (capacity > 9)
      printf(" %d%%\n", capacity);
    else
      printf("  %d%%\n", capacity);

    fclose(capacity_f);
    return 0;
  }

#+end_src

** Zathura

#+begin_src conf :tangle ./.config/zathura/zathurarc

  set font "SauceCodePro Nerd Font 12"
  set default-bg "#141c21"
  set statusbar-bg "#32424b"
  set highlight-color "#F4BF75"
  set highlight-active-color "#6A9FB5"

  set inputbar-bg "#141c21"
  set inputbar-fg "#e0e0e0"

  set recolor "true"
  # background color
  set recolor-darkcolor "#bbc2cf"
  # foreground color
  set recolor-lightcolor "#1c252a"
  set recolor-reverse-video "true"
  set recolor-keephue "true"

  # copy selection to system clipboard
  set selection-clipboard clipboard

  set scroll-step 50
  set statusbar-h-padding 0
  set statusbar-v-padding 0
  map L zoom in
  map H zoom out

#+end_src

